import {TextField}                 from '@material-ui/core';
import Button                      from '@material-ui/core/Button';
import axios, {AxiosRequestConfig} from 'axios';
import React, {useState}           from 'react';
import {Observable, Observer}      from 'rxjs';


export const notes: string = `b'QWRtaXNzaW9uIERhdGU6IFsqKjIxMDMtMTItOSoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjEwMy0xMi0xNioqXSBEYXRlIG9mIEJpcnRoOiBbKioyMDU3LTMtMyoqXSBTZXg6IEYgU2VydmljZTogU1VSR0VSWSBBbGxlcmdpZXM6IENvbXBhemluZSAvIFByb21ldGhhemluZSAvIFR5bG94IC8gRGVtZXJvbCBBdHRlbmRpbmc6WyoqRmlyc3QgTmFtZTMgKExGKSAzMTI3KipdIENoaWVmIENvbXBsYWludDogRVNSRCBNYWpvciBTdXJnaWNhbCBvciBJbnZhc2l2ZSBQcm9jZWR1cmU6IFN0YXR1cyBwb3N0IGxpdm5nIHJlbGF0ZWQga2lkbmV5IHRyYW5zcGxhbnQgSGlzdG9yeSBvZiBQcmVzZW50IElsbG5lc3M6IDQ2LXllYXItb2xkLCBDYXVjYXNpYW4gbGFkeSB3aXRoIGEgbG9uZyBhbmQgY29tcGxpY2F0ZWQgaGlzdG9yeS4gSW4gYnJpZWYsIHNoZSBoYXMgaGFkIHR3byBwcmlvciBkZWNlYXNlZCBkb25vciBraWRuZXkgdHJhbnNwbGFudHMuIFRoZSBmaXJzdCBvbmUgd2FzIGluIFsqKjIwODYqKl0gZm9yIHJhcGlkbHkgcHJvZ3Jlc3NpbmcgZ2xvbWVydWxvbmVwaHJpdGlzIHdoaWNoIHdhcyBsb3N0IGR1ZSB0byBhY3V0ZSByZWplY3Rpb24uIFNoZSBoYWQgYSBzdWJzZXF1ZW50IHRyYW5zcGxhbnQgaW4gWyoqMjA4OSoqXSB3aGljaCByZWNlbnRseSBmYWlsZWQgYW5kIHNoZSBoYXMgYmVlbiBiYWNrIG9uIGhlbW9kaWFseXNpcyBmb3IgYXBwcm94aW1hdGVseSB0d28gbW9udGhzIHZpYSBhIFBlcm0gQ2F0aCBQYXN0IE1lZGljYWwgSGlzdG9yeTogLVR5cGUgQSBhb3J0aWMgZGlzc2VjdGlvbiAtQ29sb24gcmVzZWN0aW9uIHNlY29uZGFyeSB0byBkaXZlcnRpY3VsaXRpcyBhbmQgY29sb3N0b215IHdoaWNoIGhhcyBiZWVuIGNsb3NlZCAtTXVsdGlwbGUgQ1ZBcyB3aXRoIHJlc2lkdWFsIHJpZ2h0LXNpZGVkIHdlYWtuZXNzIGFuZCBzbHVycmVkIHNwZWVjaC4gLVNoZSBoYXMgaGFkIG51bWVyb3VzIHNraW4gY2FuY2VycyByZXF1aXJpbmcgcmVzZWN0aW9uIC1CaWxhdGVyYWwgcmVkdWN0aXZlIG1hc3RlY3RvbXksIC1Pc3Rlb3Bvcm9zaXMsIGh5cGVycGFyYXRoeXJvaWRpc20sIGFuZCBoeXBlcnRlbnNpb24gU29jaWFsIEhpc3Rvcnk6IFNoZSBoYXMgYSBoaXN0b3J5IG9mIHNtb2tpbmcgZm9yIGFib3V0IDEwIHllYXJzLiBTaGUgc21va2VzIGFwcHJveGltYXRlbHkgb25lIHBhY2sgcGVyIG1vbnRoIFBoeXNpY2FsIEV4YW06IEdlbmVyYWw6IG5vIGFjdXRlIGRpc3RyZXNzLCBhd2FrZSwgYWxlcnQgYW5kIG9yaWVudCB0byB0aW1lIHBlcnNvbiBhbmQgcGxhY2UgSEVFTlQ6IEVPTUksIFBFRVJMQSwgbmVjayBzdXBwbGUsIGNsZWFyIG9yb3BoYXJ5bnggQ2FyZGlvOiBSUlIgTFVOR1M6IENUQSBiL2wgQWJkOiBzb2Z0LCBub24tdGVuZGVyLCBwb3NpdGl2ZSBib3dlbCBzb3VuZHMgUGVydGluZW50IFJlc3VsdHM6IFsqKjIxMDMtMTItOSoqXSAwOToyNFBNIFVSSU5FIENPTE9SLVN0cmF3IEFQUEVBUi1DbGVhciBTUCBbKipMYXN0IE5hbWUgKHVuKSAxNTUqKl0tMS4wMTMgWyoqMjEwMy0xMi05KipdIDA5OjI0UE0gVVJJTkUgQkxPT0QtTEcgTklUUklURS1ORUcgUFJPVEVJTi01MDAgR0xVQ09TRS1ORUcgS0VUT05FLU5FRyBCSUxJUlVCSU4tTkVHIFVST0JJTE5HTi1ORUcgUEgtNy4wIExFVUstTkVHIFsqKjIxMDMtMTItOSoqXSAwOToyNFBNIFVSSU5FIFJCQy1bKioyLTI0KipdKiBXQkMtMCBCQUNURVJJQS1GRVcgWUVBU1QtTk9ORSBFUEktWyoqNi0xKipdIFsqKjIxMDMtMTItOSoqXSAwNjoyMFBNIEdMVUNPU0UtMTAyIFVSRUEgTi01MiogQ1JFQVQtNi4yKiMgU09ESVVNLTE0MSBQT1RBU1NJVU0tNC42IENITE9SSURFLTEwNCBUT1RBTCBDTzItMjEqIEFOSU9OIEdBUC0yMSogWyoqMjEwMy0xMi05KipdIDA2OjIwUE0gQ0FMQ0lVTS05LjMgUEhPU1BIQVRFLTUuNiogTUFHTkVTSVVNLTIuNCBbKioyMTAzLTEyLTkqKl0gMDY6MjBQTSBQTFQgQ09VTlQtMjYxIFsqKjIxMDMtMTItOSoqXSAwNjoyMFBNIFdCQy05LjYgUkJDLTUuMDIgSEdCLTE0LjYgSENULTQ0LjYgTUNWLTg5IE1DSC0yOS4xIE1DSEMtMzIuOCBSRFctMTguOCogWyoqMjEwMy0xMi05KipdIDA2OjIwUE0gUFQtMTkuMCogUFRULTMwLjAgSU5SKFBUKS0yLjUgQnJpZWYgSG9zcGl0YWwgQ291cnNlOiBQdCB3YXMgYWRtaXR0ZWQgWyoqMjEwMy0xMi05KipdIGZvciBlbGVjdGl2ZSBsaXZpbmcgZG9ub3Iga2lkbmV5IHRyYW5wbGFudC4gUHJvY2VkdXJlIHdhcyBwZXJmb3JtZWQgYnkgRHIuIFsqKkxhc3QgTmFtZSAoU1RpdGxlKSAqKl0uIFBsZWFzZSBzZWUgb3BlcmF0aXZlIG5vdGUgZm9yIGRldGFpbHMuIFBhdGllbnQgdG9sZXJhdGVkIHByb2NlZHVyZSB3ZWxsIGFuZCBoYWQgYW4gdW5ldmVudGZ1bCByZWNvdmVyeSBpbiBQQUNVLiBQYXRpZW50IHdhcyBzdWJzZXF1ZW50bHkgdHJhbmZlcmVkIHRvIHRoZSB0cmFuc3BsYW50IGZsb29yIG9uIFsqKldhcmRuYW1lIDEzNDg3KipdLiBIZXIgcG9zdG9wZXJhdGl2ZSBjb3Vyc2Ugd2VudCBhcyBleHBlY3QgYWNoZWl2aW5nIGdvYWxzIG9mIGFkZXF1YXRlIHVyaW5lIG91dHB1dCwgZ29vZCBQTyBpbnRha2UsIG91dCBvZiBiZWQgYW5kIGFtYnVsYXRpbmcgd2l0aCBnb29kIHBhaW4gY29udHJvbC4gT24gcG9zdG9wZXJhdGl2ZSBkYXkgNyBkaXNjaGFyZ2UgcGxhbnMgd2VyZSBkaXNjdXNzZWQgd2l0aCBwYXRpZW50IGFmdGVyIGFwcHJvcGlhdGUgZWR1Y2F0aW9uIGZvciB3b3VuZCBjYXJlIGFuZCBtZWRpY2F0aW9uIGFkbWluaXN0cmF0aW9uIHdhcyBnaXZlbiBieSBudXJzaW5nIHN0YWZmLiBBZnRlciBzdGFibGUgcG9zdG9wZXJhdGl2ZSBjb3Vyc2UgaXQgd2FzIGFncmVlZCBieSBzdXBlcnZpc2luZyBhdHRlbmRpbmcgYW5kIHBhdGllbnQgdGhhdCBkaXNjaGFyZ2Ugd291bGQgdGFrZSBwbGFjZSBvbiB0aGUgWyoqMjEwMy0xMi0xNioqXSBwZW5kaW5nIGFwcHJvcGlhdGUgRksgbGV2ZWwuIFBhdGllbnQgd2FzIGRpc2NoYXJnZWQgd2l0aCBhIEZrIGxldmVsIDQuOSB1cCBmcm9tIDwxLjUgdGhlIHByZXZpdW9zIGRheS4gU2hlIGlzIGQvYyB3aXRoIGFwcHJvcGlhdGUgZm9sbG93dXAgYXBwb2ludG1lbnQgYW5kIG1lZGljYXRpb24uIERpc2NoYXJnZSBNZWRpY2F0aW9uczogMS4gVHJpbWV0aG9wcmltLVN1bGZhbWV0aG94YXpvbGUgODAtNDAwIG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIERpc3A6KjE0IFRhYmxldChzKSogUmVmaWxsczoqMiogMi4gVmFsZ2FuY2ljbG92aXIgNDUwIG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIERpc3A6KjcgVGFibGV0KHMpKiBSZWZpbGxzOioyKiAzLiBQYW50b3ByYXpvbGUgNDAgbWcgVGFibGV0LCBEZWxheWVkIFJlbGVhc2UgKEUuQy4pIFNpZzogT25lICgxKSBUYWJsZXQsIERlbGF5ZWQgUmVsZWFzZSAoRS5DLikgUE8gUTI0SCAoZXZlcnkgMjQgaG91cnMpLiBEaXNwOiozMCBUYWJsZXQsIERlbGF5ZWQgUmVsZWFzZSAoRS5DLikocykqIFJlZmlsbHM6KjIqIDQuIE55c3RhdGluIDEwMCwwMDAgdW5pdC9tTCBTdXNwZW5zaW9uIFNpZzogRml2ZSAoNSkgTUwgUE8gUUlEICg0IHRpbWVzIGEgZGF5KS4gRGlzcDoqNjAwIE1MKHMpKiBSZWZpbGxzOioyKiA1LiBEb2N1c2F0ZSBTb2RpdW0gMTAwIG1nIENhcHN1bGUgU2lnOiBPbmUgKDEpIENhcHN1bGUgUE8gQklEICgyIHRpbWVzIGEgZGF5KS4gRGlzcDoqNjAgQ2Fwc3VsZShzKSogUmVmaWxsczoqMiogNi4gTXljb3BoZW5vbGF0ZSBNb2ZldGlsIDUwMCBtZyBUYWJsZXQgU2lnOiBUd28gKDIpIFRhYmxldCBQTyBCSUQgKDIgdGltZXMgYSBkYXkpLiBEaXNwOioxMjAgVGFibGV0KHMpKiBSZWZpbGxzOioyKiA3LiBBbWlvZGFyb25lIDIwMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiBEaXNwOio3IFRhYmxldChzKSogUmVmaWxsczoqMiogOC4gSHlkcm9jb2RvbmUtQWNldGFtaW5vcGhlbiA1LTUwMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBRNC02SCAoZXZlcnkgNCB0byA2IGhvdXJzKSBhcyBuZWVkZWQgZm9yIHBhaW4uIERpc3A6KjE0IFRhYmxldChzKSogUmVmaWxsczoqMCogOS4gUHJlZG5pc29uZSA1IG1nIFRhYmxldCBTaWc6IEZpdmUgKDUpIFRhYmxldCBQTyBPTkNFIChvbmNlKSBmb3IgMSBkb3Nlcy4gMTAuIFByZWRuaXNvbmUgNSBtZyBUYWJsZXQgU2lnOiBGaXZlICg1KSBUYWJsZXQgUE8gT05DRSAob25jZSkgZm9yIDEgZG9zZXMuIDExLiBBY2V0YW1pbm9waGVuIDMyNSBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBRNC02SCAoZXZlcnkgNCB0byA2IGhvdXJzKSBhcyBuZWVkZWQuIDEyLiBEaXBoZW5oeWRyYW1pbmUgSENsIDI1IG1nIENhcHN1bGUgU2lnOiBPbmUgKDEpIENhcHN1bGUgUE8gUTZIIChldmVyeSA2IGhvdXJzKSBhcyBuZWVkZWQuIERpc3A6KjI1IENhcHN1bGUocykqIFJlZmlsbHM6KjAqIDEzLiBMYWJldGFsb2wgMTAwIG1nIFRhYmxldCBTaWc6IFRocmVlICgzKSBUYWJsZXQgUE8gVElEICgzIHRpbWVzIGEgZGF5KS4gRGlzcDoqMjcwIFRhYmxldChzKSogUmVmaWxsczoqMiogMTQuIFdhcmZhcmluIDEgbWcgVGFibGV0IFNpZzogT25lICgxKSBUYWJsZXQgUE8gSFMgKGF0IGJlZHRpbWUpLiAxNS4gVGFjcm9saW11cyAxIG1nIENhcHN1bGUgU2lnOiBUd28gKDIpIENhcHN1bGUgUE8gQklEICgyIHRpbWVzIGEgZGF5KSBmb3IgMiBkb3Nlcy4gRGlzY2hhcmdlIERpc3Bvc2l0aW9uOiBIb21lIERpc2NoYXJnZSBEaWFnbm9zaXM6IEVTUkQgRGlzY2hhcmdlIENvbmRpdGlvbjogc3RhYmxlIERpc2NoYXJnZSBJbnN0cnVjdGlvbnM6IENhbGwgRHIuWyoqTmFtZSAoTkkpIDQ4MzgqKl0gb2ZmaWNlIFsqKlRlbGVwaG9uZS9GYXggKDEpIDY3MyoqXSBpZiBmZXZlcnMsIGNoaWxscywgbmF1c2VhLCB2b21pdGluZywgaW5hYmlsaXR5IHRvIHRha2UgbWVkaWNhdGlvbiwgaW5jcmVhc2VkIGFiZG9taW5hbCBwYWluLCBpbmNyZWFzZWQgcmVkbmVzcywgZHJhaW5hZ2UsIG9yIGJsZWVkaW5nIGZyb20gaW5jaXNpb24uIFsqKk1vbnRoIChvbmx5KSAxMTYqKl0gc2hvd2VyIE5vIGRyaXZpbmcgd2hpbGUgdGFraW5nIHBhaW4gbWVkaWNhdGlvbiBObyBoZWF2eSBsaWZ0aW5nIEZvbGxvd3VwIEluc3RydWN0aW9uczogUHJvdmlkZXI6IFsqKk5hbWUxMCAoTmFtZUlzKSAxMzQ0KipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm40KSAzMTI1KipdLCBNRCBQaG9uZTpbKipUZWxlcGhvbmUvRmF4ICgxKSA2NzMqKl0gRGF0ZS9UaW1lOlsqKjIxMDMtMTItMjAqKl0gMTA6MTAgUHJvdmlkZXI6IFsqKkZpcnN0IE5hbWU0IChOYW1lUGF0dGVybjEpIDk3MSoqXSBbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgOTcwKipdLCBNRCBQaG9uZTpbKipUZWxlcGhvbmUvRmF4ICgxKSA2NzMqKl0gRGF0ZS9UaW1lOlsqKjIxMDMtMTItMjYqKl0gMTA6MDAgUHJvdmlkZXI6IFsqKk5hbWUxMCAoTmFtZUlzKSAxMzQ0KipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm40KSAzMTI1KipdLCBNRCBQaG9uZTpbKipUZWxlcGhvbmUvRmF4ICgxKSA2NzMqKl0gRGF0ZS9UaW1lOlsqKjIxMDMtMTItMzEqKl0gMTA6NTAgQ29tcGxldGVkIGJ5OlsqKjIxMDMtMTItMTcqKl0K'
b''
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxMjEtMy0yOCoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjEyMS00LTEqKl0gRGF0ZSBvZiBCaXJ0aDogU2V4OiBGIFNlcnZpY2U6IEdFTkVSQUwgU1VSR0VSWSBBRE1JVFRJTkcgRElBR05PU0lTOiBBYmRvbWluYWwgaW5jaXNpb25hbCBoZXJuaWEuIERJU0NIQVJHRSBESUFHTk9TSVM6IEFiZG9taW5hbCBpbmNpc2lvbmFsIGhlcm5pYS4gUFJPQ0VEVVJFOiBSZXBhaXIgb2YgaW5jaXNpb25hbCBoZXJuaWEgYWJkb21pbmFsIHdhbGwgd2l0aCBNYXJsZXggbWVzaC4gSElTVE9SWSBPRiBQUkVTRU5UIElMTE5FU1M6IFRoZSBwYXRpZW50IGlzIGFuIDgzIHllYXIgb2xkIGZlbWFsZSwgc3RhdHVzIHBvc3QgY29sZWN0b215IFsqKjUtMTIqKl0sIGZvciBjYW5jZXIgYW5kIGEgdmlsbG91cyBhZGVub21hLiBUaGUgcGF0aWVudCBwcmVzZW50cyBmb3IgcmVwYWlyIG9mIGFuIGluY2lzaW9uYWwgaGVybmlhIGluIGhlciBhYmRvbWluYWwgd2FsbC4gUEFTVCBNRURJQ0FMIEhJU1RPUlk6IDEuIEh5cGVydGVuc2lvbi4gMi4gQW5naW5hLiAzLiBPc3Rlb3Bvcm9zaXMuIDQuIExpdmVyIGN5c3RzLiA1LiBHbGF1Y29tYS4gUEFTVCBTVVJHSUNBTCBISVNUT1JZOiBDb2xlY3RvbXkgWyoqNS0xMioqXSwgZm9yIGNhbmNlciBhbmQgYSB2aWxsb3VzIGFkZW5vbWEuIEFMTEVSR0lFUzogTm8ga25vd24gZHJ1ZyBhbGxlcmdpZXMuIE1FRElDQVRJT05TIE9OIEFETUlTU0lPTjogMS4gTGlwaXRvciAxMCBtZyBwLm8uIHEuZC4gMi4gRW50ZXJpYyBDb2F0ZWQgQXNwaXJpbiAzMjUgbWcgcC5vLiBxLm8uZC4gMy4gWGFsYXRhbiBleWUgZHJvcHMsIG9uZSBkcm9wIE8uVS4gcS5kLiA0LiBNZXRvcHJvbG9sIDEyLjUgbWcgcC5vLiBiLmkuZC4gNS4gSXNvc29yYmlkZSA1IG1nIHAuby4gdC5pLmQuIFBIWVNJQ0FMIEVYQU1JTkFUSU9OOiBPbiBleGFtaW5hdGlvbiwgdGhlIHBhdGllbnQgaXMgYXdha2UsIGFsZXJ0IGFuZCBpbiBubyBhcHBhcmVudCBkaXN0cmVzcy4gSGVyIGhlYXJ0IGlzIHJlZ3VsYXIgcmF0ZSBhbmQgcmh5dGhtLCBTMSBhbmQgUzIuIEhlciBsdW5ncyBhcmUgY2xlYXIgdG8gYXVzY3VsdGF0aW9uIGJpbGF0ZXJhbGx5LiBIZXIgYWJkb21lbiBpcyBzb2Z0IHdpdGggYSBtaWRsaW5lIGluY2lzaW9uYWwgaGVybmlhIGRlZmVjdC4gSGVyIGV4dHJlbWl0aWVzIGFyZSBzb2Z0LCBub250ZW5kZXIsIG5vIGVkZW1hLiBIT1NQSVRBTCBDT1VSU0U6IFRoZSBwYXRpZW50IHdhcyBhZG1pdHRlZCBvbiBbKioyMTIxLTMtMjgqKl0sIGFuZCB0YWtlbiB0byB0aGUgb3BlcmF0aW5nIHJvb20gZm9yIGFuIGluY2lzaW9uYWwgaGVybmlhIHJlcGFpciB3aXRoIE1hcmxleCBtZXNoLiBUaGUgcGF0aWVudCB0b2xlcmF0ZWQgdGhlIHByb2NlZHVyZSB3ZWxsLCBob3dldmVyLCBwb3N0b3BlcmF0aXZlbHkgaW4gdGhlIG9wZXJhdGluZyByb29tLCB0aGUgcGF0aWVudCBoYWQgc29tZSByZXNwaXJhdG9yeSBkaXN0cmVzcyByZXF1aXJpbmcgYmFnIHZlbnRpbGF0aW9uLiBUaGUgcGF0aWVudCBzdGFiaWxpemVkIGFuZCB3YXMgdHJhbnNmZXJyZWQgdG8gdGhlIFBvc3QgQW5lc3RoZXNpYSBDYXJlIFVuaXQuIEluIHRoZSBQb3N0IEFuZXN0aGVzaWEgQ2FyZSBVbml0IGFnYWluLCBzaGUgaGFkIHJlc3BpcmF0b3J5IGRpc3RyZXNzIGFuZCByZXF1aXJlZCBiYWcgdmVudGlsYXRpb24uIFNoZSB0aGVuIHNob3dlZCBzaWducyBvZiBjYXJkaWFjIGlzY2hlbWlhIG9uIGhlciBlbGVjdHJvY2FyZGlvZ3JhbSwgYW5kIHRoZSBwYXRpZW50IGJlY2FtZSBoeXBlcnRlbnNpdmUgd2l0aCBzeXN0b2xpYyBibG9vZCBwcmVzc3VyZSBpbiB0aGUgMTkwcy4gQ2FyZGlvbG9neSB3YXMgbm90aWZpZWQgYW5kIHRoZSBwYXRpZW50IHdhcyBnaXZlbiBIeWRyYWxhemluZSBhbmQgd2FzIHN0YXJ0ZWQgb24gYSBOaXRyb2dseWNlcmluIGRyaXAuIEhlciByZXNwaXJhdG9yeSBzdGF0dXMgc3RhYmlsaXplZCBhbmQgc2hlIGRpZCBub3QgcmVxdWlyZSBpbnR1YmF0aW9uLiBJdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSBwYXRpZW50IHdvdWxkIGJlIG1vbml0b3JlZCBpbiB0aGUgSW50ZW5zaXZlIENhcmUgVW5pdCBnaXZlbiBoZXIgc2lnbnMgb2YgY2FyZGlhYyBpc2NoZW1pYSB3aGljaCBkaWQgcmVzb2x2ZSB3aXRoIHN0YWJpbGl6YXRpb24gb2YgaGVyIHJlc3BpcmF0b3J5IHN0YXR1cy4gSGVyIGVsZWN0cm9jYXJkaW9ncmFtIG5vcm1hbGl6ZWQuIFRoZSBwYXRpZW50IHdhcyBhZG1pdHRlZCB0byB0aGUgSW50ZW5zaXZlIENhcmUgVW5pdC4gSGVyIGNhcmRpYWMgZW56eW1lcyB3ZXJlIG5lZ2F0aXZlIGZvciBhIG15b2NhcmRpYWwgaW5mYXJjdGlvbi4gSGVyIGVsZWN0cm9jYXJkaW9ncmFtIHJldHVybmVkIHRvIGJhc2VsaW5lLiBTaGUgaGFkIG5vIGZ1cnRoZXIgcmVzcGlyYXRvcnkgZGlzdHJlc3Mgb3Zlcm5pZ2h0LiBIZXIgdXJpbmUgb3V0cHV0IHJlbWFpbmVkIGdvb2QuIEhlciBlbGVjdHJvbHl0ZXMgd2VyZSByZXBsZXRlZC4gT24gcG9zdG9wZXJhdGl2ZSBkYXkgb25lLCB0aGUgcGF0aWVudCB3YXMgdHJhbnNmZXJyZWQgZnJvbSB0aGUgSW50ZW5zaXZlIENhcmUgVW5pdCB0byB0aGUgZmxvb3Igb24gdGVsZW1ldHJ5LiBIZXIgZGlldCB3YXMgYWR2YW5jZWQgYW5kIHNoZSB3YXMgc3RhcnRlZCBvbiBoZXIgY2FyZGlhYyBtZWRpY2F0aW9ucyBieSBtb3V0aC4gVGhlIFsqKkhvc3BpdGFsIDIyOCoqXSBob3NwaXRhbCBjb3Vyc2Ugd2FzIGVzc2VudGlhbGx5IHVuZXZlbnRmdWwsIGhvd2V2ZXIsIHNoZSBkaWQgaGF2ZSBhIGRyb3AgaW4gaGVyIHJlc3BpcmF0b3J5IHNhdHVyYXRpb24gd2hpY2ggaXMgZmVsdCB0byBiZSBzZWNvbmRhcnkgdG8gZmx1aWQgb3ZlcmxvYWQuIFNoZSB3YXMgZ2l2ZW4gb25lIGRvc2Ugb2YgaW50cmF2ZW5vdXMgTGFzaXggYW5kIHRoaXMgcmVzb2x2ZWQuIFRoZSBwYXRpZW50IHdhcyBkaXNjaGFyZ2VkIHRvIHJlaGFiaWxpdGF0aW9uIGluIHN0YWJsZSBjb25kaXRpb24gb24gYSByZWd1bGFyIGRpZXQgb24gcG9zdG9wZXJhdGl2ZSBkYXkgZm91ciwgWyoqMjEyMS00LTEqKl0uIE1FRElDQVRJT05TIE9OIERJU0NIQVJHRTogMS4gTGlwaXRvciAxMCBtZyBwLm8uIHEuZC4gMi4gRW50ZXJpYyBDb2F0ZWQgQXNwaXJpbiAzMjUgbWcgcC5vLiBxLmQuIDMuIFhhbGF0YW4gZXllIGRyb3BzIG9uZSBkcm9wIE8uVS4gcS5kLiA0LiBNZXRvcHJvbG9sIDEyLjUgbWcgcC5vLiBiLmkuZC4gNS4gSXNvc29yYmlkZSA1IG1nIHAuby4gdC5pLmQuIFNoZSB3YXMgdG9sZCB0byBjYWxsIERyLlsqKk5hbWUgKE5JKSA5NTQ5NioqXSBvZmZpY2UgZm9yIGEgZm9sbG93LXVwIGFwcG9pbnRtZW50IGFuZCB0byBjYWxsIG9yIHJldHVybiBmb3IgYW55IHF1ZXN0aW9ucyBvciBwcm9ibGVtcy4gWyoqRmlyc3QgTmFtZTExIChOYW1lIFBhdHRlcm4xKSAqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDUwMTQqKl0sIE0uRC4gWyoqTUQgTnVtYmVyKDEpIDM1ODA0KipdIERpY3RhdGVkIEJ5OlsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSA0OTg1KipdIE1FRFFVSVNUMzYgRDogWyoqMjEyMS0zLTMxKipdIDE4OjE3IFQ6IFsqKjIxMjEtMy0zMSoqXSAxODoyNyBKT0IjOiBbKipKb2IgTnVtYmVyIDExMTYwMioqXSAK'
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxNTktMTItMzAqKl0gRGlzY2hhcmdlIERhdGU6IFsqKjIxNjAtMS04KipdIERhdGUgb2YgQmlydGg6IFsqKjIxMDktNy0xKipdIFNleDogRiBTZXJ2aWNlOiBTVVJHRVJZIEFsbGVyZ2llczogUGF0aWVudCByZWNvcmRlZCBhcyBoYXZpbmcgTm8gS25vd24gQWxsZXJnaWVzIHRvIERydWdzIEF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDU1NDcqKl0gQ2hpZWYgQ29tcGxhaW50OiBQZXJmb3JhdGVkIER1b2RlbmFsIFVsY2VyIE1ham9yIFN1cmdpY2FsIG9yIEludmFzaXZlIFByb2NlZHVyZTogWyoqMjE1OS0xMi0zMCoqXTogRXhwbG9yYXRvcnkgbGFwYXJvdG9teSwgT21lbnRhbCBbKipMb2NhdGlvbiAodW4pICoqXSBwYXRjaCByZXBhaXIgb2YgcGVyZm9yYXRlZCBkdW9kZW5hbCB1bGNlciAmIENvcmUgbmVlZGxlIGJpb3BzaWVzIG9mIGxlZnQgbG9iZSBvZiBsaXZlci4gSGlzdG9yeSBvZiBQcmVzZW50IElsbG5lc3M6IDUwRiB3aXRoIG11bHRpcGxlIG1lZGljYWwgcHJvYmxlbXMgcHJlc2VudGVkIHRvIHRoZSBbKipIb3NwaXRhbDEgMTgqKl0gWyoqTmFtZSAoTkkpICoqXSAxIGRheSBhZnRlciBhY3V0ZSBvbnNldCBvZiBlcGlnYXN0cmljIHBhaW4gcmFkaWF0aW5nIHRvIFJMUSwgWyoqMTAtMTEqKl0gaW4gc2V2ZXJpdHksIHdoaWNoIHRoZW4gYmVjYW1lIGRpZmZ1c2UuIFNoZSBhbHNvIHJlY2FsbGVkIG5hdXNlYSBhbmQgdm9taXRpbmcgYW5kIGRlbmllcyBhbnkgQk0geDJkYXlzLiBTaGUgaGFkIG9uZSBlcGlzb2RlIG9mIGZldmVyIGJ1dCBkZW5pZXMgY2hpbGxzLCBDUCwgU09CIG9yIGNoYW5nZXMgaW4gdXJpbmFyeSBoYWJpdHMuIFBhc3QgTWVkaWNhbCBIaXN0b3J5OiAxLiBhc3RobWEgLWRvZXMgbm90IHVzZSBpbmhhbGVycyAyLiBIVE4gLW9mZiBtZWRzIGZvciBzZXZlcmFsIHllYXJzIDMuIHJoZXVtYXRvaWQgYXJ0aHJpdGlzIC1zZXJvbmVnYXRpdmUgNC4gY2hyb25pYyBzZXZlcmUgYmFjayBwYWluIDUuIDQgQy1zZWN0aW9ucy4gNi4gSGlzdG9yeSBvZiBzZWNvbmRhcnkgc3lwaGlsaXMsIHRyZWF0ZWQuIDcuIFBvbHlzdWJzdGFuY2UgYWJ1c2UsIG5vdGFibHkgY29jYWluZSA4LiBEZXByZXNzaW9uIDkuIFB1bG1vbmFyeSBoeXBlcnRlbnNpb24gMTAuIFJlc3RyaWN0aXZlIGx1bmcgZGlzZWFzZSAxMS4gU2VpenVyZXMgaW4gY2hpbGRob29kIFNvY2lhbCBIaXN0b3J5OiBMaXZlcyB3aXRoIGJveWZyaWVuZC4gNCBjaGlsZHJlbi4gU21va2VzIFsqKjMtNSoqXSBjaWdhcmV0dGVzIHBlciBkYXkuIERyaW5rcyAzIGRyaW5rcyBtb3N0IG5pZ2h0cyBGYW1pbHkgSGlzdG9yeTogTm9uY29udHJpYnV0b3J5IFBoeXNpY2FsIEV4YW06IFZTOiBUOTguNiwgSFIxMzQsIEJQMTM5LzQ2LCBSUjMwLCBQT3g5NiVSQSBHRU46IGluIGFjdXRlIGRpc3RyZXNzLCB0YWNoeXBuaWMgWyoqMi00KipdIGFiZG9taW5hbCBwYWluIENWUzogUlJSLCBzaW51cyB0YWNoeWNhcmRpYSBSRVNQOiBDVEFCL0wgR0k6IFRUUCwgK3JlYm91bmQsICtndWFyZGluZyBSZWN0YWw6IHRlbmRlciBvbiBleGFtLCBjL3cgcGVyaXRvbmVhbCBpcnJpdGF0aW9uIFBlcnRpbmVudCBSZXN1bHRzOiBbKioyMTU5LTEyLTI5KipdIDA4OjQwUE0gQkxPT0QgV0JDLTE3LjAqIyBSQkMtMy44NyogSGdiLTEzLjEgSGN0LTQwLjIgTUNWLTEwNCojIE1DSC0zNC4wKiMgTUNIQy0zMi43IFJEVy0xOC4wKiBQbHQgQ3QtMzI1IFsqKjIxNTktMTItMzAqKl0gMDI6MzBBTSBCTE9PRCBXQkMtMTcuNyogUkJDLTIuNTUqIyBIZ2ItOC45KiMgSGN0LTI3LjEqIyBNQ1YtMTA2KiBNQ0gtMzUuMCogTUNIQy0zMi45IFJEVy0xNy43KiBQbHQgQ3QtMjQ1IFsqKjIxNTktMTItMzEqKl0gMDE6NTFBTSBCTE9PRCBXQkMtMTguMCogUkJDLTIuNDkqIEhnYi04LjUqIEhjdC0yNi4yKiBNQ1YtMTA1KiBNQ0gtMzQuNCogTUNIQy0zMi42IFJEVy0xNy43KiBQbHQgQ3QtMjE4IFsqKjIxNjAtMS0xKipdIDExOjUxUE0gQkxPT0QgV0JDLTEyLjAqIFJCQy0yLjQ3KiBIZ2ItOC40KiBIY3QtMjcuNCogTUNWLTExMSogTUNILTM0LjEqIE1DSEMtMzAuOCogUkRXLTE3LjIqIFBsdCBDdC0yMTUgWyoqMjE1OS0xMi0zMCoqXSAxMjowNUFNIEJMT09EIFBULTIxLjcqIFBUVC00NC4wKiBJTlIoUFQpLTIuMSogWyoqMjE2MC0xLTMqKl0gMDU6MTJBTSBCTE9PRCBQVC0yMi4yKiBQVFQtNDEuNiogSU5SKFBUKS0yLjEqIFsqKjIxNTktMTItMjkqKl0gMDg6NDBQTSBCTE9PRCBHbHVjb3NlLTkwIFVyZWFOLTEzIENyZWF0LTAuOSBOYS0xMzcgSy0zLjUgQ2wtMTEwKiBIQ08zLTE4KiBBbkdhcC0xMyBbKioyMTU5LTEyLTMwKipdIDAzOjQwQU0gQkxPT0QgR2x1Y29zZS0xMTQqIFVyZWFOLTEyIENyZWF0LTAuNiBOYS0xNDMgSy0zLjAqIENsLTExOSogSENPMy0xNyogQW5HYXAtMTAgWyoqMjE2MC0xLTEqKl0gMTE6NTFQTSBCTE9PRCBHbHVjb3NlLTk0IFVyZWFOLTE0IENyZWF0LTEuMCBOYS0xMzkgSy01LjAgQ2wtMTE0KiBIQ08zLTE0KiBBbkdhcC0xNiBbKioyMTYwLTEtNioqXSAwNzoyNUFNIEJMT09EIEdsdWNvc2UtNjgqIFVyZWFOLTcgQ3JlYXQtMC42IE5hLTEzNiBLLTMuMiogQ2wtMTA2IEhDTzMtMjIgQW5HYXAtMTEgWyoqMjE2MC0xLTcqKl0gMDc6MzVBTSBCTE9PRCBHbHVjb3NlLTExMyogVXJlYU4tNiBDcmVhdC0wLjcgTmEtMTMzIEstMy41IENsLTEwNSBIQ08zLTIyIEFuR2FwLTEwIFsqKjIxNTktMTItMjkqKl0gMDg6NDBQTSBCTE9PRCBBTFQtMTAgQVNULTE4IEFsa1Bob3MtMTAyIFRvdEJpbGktMS4yIFsqKjIxNTktMTItMzAqKl0gMDM6NDBBTSBCTE9PRCBBTFQtMTcgQVNULTU3KiBBbGtQaG9zLTYwIFRvdEJpbGktMS4yIFsqKjIxNjAtMS0zKipdIDA1OjEyQU0gQkxPT0QgQUxULTE5IEFTVC01NSogQWxrUGhvcy01OCBBbXlsYXNlLTE5IFRvdEJpbGktMS40IFsqKjIxNTktMTItMjkqKl0gMDg6NDBQTSBCTE9PRCBBbGJ1bWluLTIuNCogQ2FsY2l1bS05LjEgUGhvcy0zLjggTWctMS4zKiBbKioyMTYwLTEtNSoqXSAwODowMEFNIEJMT09EIEhCc0FnLU5FR0FUSVZFIEhCc0FiLUJPUkRFUkxJTkUgWyoqMjE2MC0xLTQqKl0gMDI6MzJBTSBCTE9PRCBDUlAtOTUuNyogWyoqMjE2MC0xLTEqKl0gMTE6NTFQTSBCTE9PRCBWYW5jby0xMi4yIFsqKjIxNjAtMS01KipdIDA4OjAwQU0gQkxPT0QgSENWIEFiLU5FR0FUSVZFIFsqKjIxNTktMTItMzAqKl0gMTI6NDBBTSBCTE9PRCBwTzItNjcqIHBDTzItMjcqIHBILTcuMzAqIGNhbFRDTzItMTQqIEJhc2UgWFMtLTExIENvbW1lbnQtR1JFRU4gVE9QIFsqKjIxNTktMTItMjkqKl0gMTA6MDlQTSBCTE9PRCBMYWN0YXRlLTIuNSogWyoqMjE1OS0xMi0zMCoqXSAwMjo0MkFNIEJMT09EIEdsdWNvc2UtMTM0KiBMYWN0YXRlLTIuOSogTmEtMTQyIEstMy4zKiBDbC0xMTcqIFsqKjIxNjAtMS0yKipdIDEyOjU5QU0gQkxPT0QgTGFjdGF0ZS02LjkqIFsqKjIxNjAtMS0yKipdIDA1OjEzQU0gQkxPT0QgTGFjdGF0ZS0yLjQqIFsqKjIxNTktMTItMzAqKl0gTmVlZGxlIEJpb3BzeSBMaXZlcjogMSkgRm9jYWwgbWlsZCB0byBtb2RlcmF0ZSBwb3J0YWwgY2hyb25pYyBpbmZsYW1tYXRpb24gaW5jbHVkaW5nIHBsYXNtYSBjZWxscyBhbmQgZW9zaW5vcGhpbHMgd2l0aCBmb2NhbCBwZXJpcG9ydGFsIGV4dGVuc2lvbiAoZ3JhZGUgWyoqMS00KipdKS4gMikgRm9jYWwgbWlsZCBwb3J0YWwvcGVyaXBvcnRhbCBhbmQgbG9idWxhciBmaWJyb3NpcyBvbiB0cmljaHJvbWUgc3RhaW4gKHN0YWdlIDIpLiAzKSBGb2NhbCBtaWxkIGZhdHR5IGNoYW5nZS4gNCkgRm9jYWxseSBwcm9taW5lbnQgaW5jcmVhc2VkIGlyb24gaW4gcGVyaXBvcnRhbCBoZXBhdG9jeXRlcyBvbiBpcm9uIHN0YWluLiA1KSBGb2NhbCBtaWxkIGNob2xlc3Rhc2lzLiBbKioyMTU5LTEyLTI5KipdIENUIEEvUDogMS4gTGFyZ2UgYW1vdW50IG9mIGludHJhcGVyaXRvbmVhbCBmcmVlIGFpciBpbmRpY2F0aW5nIGEgcGVyZm9yYXRlZCB2aXNjdXMuIEdpdmVuIHRoZSBkaXN0cmlidXRpb24gaW4gdGhlIHVwcGVyIGFiZG9tZW4gYW5kIHF1YW50aXR5LCBpdCBpcyBsaWtlbHkgcmVsYXRlZCB0byBwZXJmb3JhdGlvbiBvZiB0aGUgc3RvbWFjaCBvciBkdW9kZW51bSwgdGhlIGxhdHRlciBiZWluZyBzdGF0aXN0aWNhbGx5IGZhdm9yZWQuIE5vdGUgaXMgbWFkZSBvZiBhIGRlZmVjdCBpbiB0aGUgZ2FzdHJpYyBmdW5kdXMgYW5kIGR1b2RlbnVtLCB3aGljaCBtYXkgcmVwcmVzZW50IGZvY2FsIHVsY2VyYXRpb25zLiAyLiBHYWxsYmxhZGRlciB3YWxsIGVkZW1hLCB3aGljaCBpcyBhIG5vbnNwZWNpZmljIGZpbmRpbmcgaW4gdGhlIHNldHRpbmcgb2YgbGFyZ2UgYW1vdW50IG9mIGFzY2l0ZXMuIFJlY29tbWVuZCBjb3JyZWxhdGlvbiB3aXRoIHBoeXNpY2FsIGV4YW0gYW5kIGhpc3RvcnkuIDMuIFBhdGNoeSBvcGFjaXRpZXMgd2l0aGluIHRoZSBsdW5nIGJhc2VzLCB3aGljaCBsaWtlbHkgcmVwcmVzZW50cyBhdGVsZWN0YXNpczsgaG93ZXZlciwgYXNwaXJhdGlvbiBjYW4gaGF2ZSBhIHNpbWlsYXIgYXBwZWFyYW5jZSBbKioyMTU5LTEyLTMxKipdIENYUjogRklORElOR1M6IEFnYWluIG5vdGVkIGFyZSBiaWJhc2lsYXIgb3BhY2l0aWVzIHdoaWNoIG5vdyBhcHBlYXJzIHdvcnNlIG9uIHRoZSByaWdodCBhbmQgYmV0dGVyIG9uIHRoZSBsZWZ0LiBUaGVyZSBpcyBubyBldmlkZW5jZSBvZiBwdWxtb25hcnkgZWRlbWEuIFJpZ2h0IGFuZCBsZWZ0IGhpbGFyIGZ1bGxuZXNzIGNvcnJlc3BvbmRpbmcgd2l0aCBseW1waGFkZW5vcGF0aHkgYXMgc2VlbiBvbiBwcmlvciBjaGVzdCBDVCBpcyB1bmNoYW5nZWQuIFRoZSBjYXJkaW9tZWRpYXN0aW5hbCBzaWxob3VldHRlIGlzIHN0YWJsZS4gWyoqMjE1OS0xLTUqKl0gQ1hSOiBUaGVyZSBoYXMgYmVlbiBubyBzaWduaWZpY2FudCBjaGFuZ2Ugc2luY2UgdGhlIHByaW9yIGNoZXN0IHgtcmF5IG9mIFsqKjEtNSoqXSBvciBbKioxLTQqKl0uIERpZmZ1c2UgaW50ZXJzdGl0aWFsIG9wYWNpdGllcyBhcmUgYWdhaW4gc2VlbiwgcGFydGljdWxhcmx5IGluIHRoZSByaWdodCBsdW5nIGFuZCBzbWFsbCBwb3N0ZXJpb3IgZWZmdXNpb25zIGFyZSBwcmVzZW50IG9uIGJvdGggc2lkZXMuIFsqKjIxNjAtMS03KipdIEVDRzogU2ludXMgcmh5dGhtLiBSaWdodCB2ZW50cmljdWxhciBoeXBlcnRyb3BoeS4gTG93IFFSUyB2b2x0YWdlIGluIHRoZSBsaW1iIGxlYWRzLiBDb21wYXJlZCB0byB0aGUgcHJldmlvdXMgdHJhY2luZyBvZiBbKioyMTYwLTEtMyoqXSB0aGVyZSBpcyBubyBzaWduaWZpY2FudCBkaWFnbm9zdGljIGNoYW5nZS4gQ2xpbmljYWwgY29ycmVsYXRpb24gaXMgc3VnZ2VzdGVkLiBCcmllZiBIb3NwaXRhbCBDb3Vyc2U6IFsqKjEyLTI4KipdOiBQdCBwcmVzZW50ZWQgdG8gWyoqSG9zcGl0YWwxIDE4KipdIEVEIHdpdGggMTAvMTAgYWJkb21pbmFsIHBhaW4uIENUIHNjYW4gc2hvd2VkIGV4dGVuc2l2ZSBmcmVlIGFpciBpbiB0aGUgYWJkb21lbiwgZnJlZSBmbHVpZCBhbmQgZGVicmlzLiBbKioxMi0yOSoqXTogUHQgdGFrZW4gdXJnZW50bHkgdG8gdGhlIE9SIGZvciBhZm9yZW1lbnRpb25lZCBwcm9jZWR1cmUuIFBsZWFzZSBzZWUgZGljdGF0ZWQgb3BlcmF0aXZlIG5vdGUgaW4gT01SLiBbKipOYW1lIChOSSkgKipdLCBwdCBhZG1pdHRlZCB0byBTSUNVLCBpbnR1YmF0ZWQsIHNlZGF0ZWQuIFRURSBkb25lIGNvbmZpcm1pbmcgVFIgYW5kIHB1bG0gSFROLiBBbGJ1bWluIHgyIHRvIGhlbHAgVU9QLiBXZWVuaW5nIHZlbnQuIHNsaWdodCBsZWZ0IHRoaWdoIHN3ZWxsaW5nLiBbKioxMi0zMCoqXTogYXR0ZW1wdGluZyB0byB3ZWFuIHZlbnQsIGJlY2FtZSB2ZXJ5IHRhY2h5cG5pYyBvbiBDUEFQLCBwZXJzaXN0ZW50IGh5cGVyY2hsb3JlbWljIG1ldGFib2xpYyBhY2lkb3NpcywgY2VudHJhbCBsaW5lIHBsYWNlZC4gWyoqMTItMzEqKl06IGV4dHViYXRlZCwgTkdUIGQvYydkLCBzdGFydGVkIG9uIHNpcHMsIGxvcHJlc3NvciBkL2MnZCBkdWUgdG8gaHlwb3RlbnNpb24sIGNoYW5nZWQgdG8gRFBDQSwgQUJ4IGNvbnRpbnVlZCBmb3IgZmV2ZXIuIFVPUCBkZWNyLCBwcmVyZW5hbCwgZ2l2ZW4gM0wgZmx1aWQgYW5kIGFsYnVtaW4sIGxhc2l4IDIwIGFuZCBkaXVyZXNlcyB3ZWxsIFsqKjEtMSoqXTogQWRkZWQgZ2FiYXBlbnRpbiBhbmQgb3h5Y29kb25lOyB3ZWVuaW5nIG9mZiBOUkIgbWFzazsgbGFzaXggYWRkZWQgaW4gUE0gZm9yIFVPUCB0YXBlcmluZyBvZmY7IGRldmVsb3Agd2hlZXppbmcgaW4gQU0sIHhvcGVuaXggb3JkZXJlZC4gS1ZPIGZsdWlkLiBbKioxLTMqKl06IGxhc2l4IDIwIGJvbHVzLCBwcGkgY2hhbmdlZCB0byBoMiBibG9ja2VyLCBmZXZlciwgYmxvb2QgYW5kIHVyaW5lIHNlbnQgWyoqMS00KipdOiBDZW50cmFsIGxpbmUgcmVtb3ZlZCBhbmQgcHQgdHJhbnNmZXJlZCB0byBmbG9vciwgUENBIGQvY2UnZCBhbmQgcHQgdG9sZXJhdGluZyBwYWluIGNvbnRyb2wgdy9QTyBtZWRzIFsqKjEtNSoqXTogRGlldCBhZHZhbmNlZCB0byByZWd1bGFyLCBkaXVyZXNlZCB3aXRoIElWIExhc2l4IDQwIG1nLiBbKioxLTYqKl06IEpQIGRyYWluIHJlbW92ZWQsIHB0IE9PQiB0byBjaGFpciB3aXRoIG1heCBhc3Npc3QgWyoqMS04KipdOiBQdCBkaXNjaGFyZ2VkIHRvIHJlaGFiIGluIHN0YWJsZSBjb25kaXRpb24gTWVkaWNhdGlvbnMgb24gQWRtaXNzaW9uOiBHYWJhcGVudGluIDgwMG1nIFBPIFRJRCwgaWJ1cHJvZmVuIDgwMG1nIFRJRCwgb21lcHJhem9sZSAyMG1nIFBPIGRhaWx5LCBveHljb2RvbmUgNW1nIDEtMiB0YWJzIFBPIHE2aHJzLCB0cmF6YWRvbmUgNTBtZyBQTyBxaHMsIGNvbGFjZSAxMDBtZyBQTyBiaWQsIG1hZ25lc2l1bSBveGlkZSA4MDBtZyBQTyBiaWQgRGlzY2hhcmdlIE1lZGljYXRpb25zOiAxLiBBY2V0YW1pbm9waGVuIDMyNSBtZyBUYWJsZXQgU2lnOiAxLTIgVGFibGV0cyBQTyBRNkggKGV2ZXJ5IDYgaG91cnMpIGFzIG5lZWRlZCBmb3IgZmV2ZXIgb3IgcGFpbjogRG8gbm90IGV4Y2VlZCA0MDAwbWcgaW4gMjRocnMuIDIuIEdhYmFwZW50aW4gNDAwIG1nIENhcHN1bGUgU2lnOiBUd28gKDIpIENhcHN1bGUgUE8gVElEICgzIHRpbWVzIGEgZGF5KS4gMy4gTWFnbmVzaXVtIE94aWRlIDQwMCBtZyBUYWJsZXQgU2lnOiBUd28gKDIpIFRhYmxldCBQTyBCSUQgKDIgdGltZXMgYSBkYXkpLiA0LiBUcmF6b2RvbmUgNTAgbWcgVGFibGV0IFNpZzogT25lICgxKSBUYWJsZXQgUE8gSFMgKGF0IGJlZHRpbWUpIGFzIG5lZWRlZC4gNS4gRG9jdXNhdGUgU29kaXVtIDUwIG1nLzUgbUwgTGlxdWlkIFNpZzogWyoqMS00KipdIFBPIEJJRCAoMiB0aW1lcyBhIGRheSkgYXMgbmVlZGVkIGZvciBjb25zdGlwYXRpb24uIDYuIE9tZXByYXpvbGUgMjAgbWcgQ2Fwc3VsZSwgRGVsYXllZCBSZWxlYXNlKEUuQy4pIFNpZzogT25lICgxKSBDYXBzdWxlLCBEZWxheWVkIFJlbGVhc2UoRS5DLikgUE8gREFJTFkgKERhaWx5KS4gNy4gRnVyb3NlbWlkZSA0MCBtZyBUYWJsZXQgU2lnOiAwLjUgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIDguIE11bHRpdml0YW1pbiBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiA5LiBNZXRvcHJvbG9sIFRhcnRyYXRlIDI1IG1nIFRhYmxldCBTaWc6IDAuNSBUYWJsZXQgUE8gQklEICgyIHRpbWVzIGEgZGF5KS4gMTAuIE94eWNvZG9uZSA1IG1nIFRhYmxldCBTaWc6IDEtMiBUYWJsZXRzIFBPIFE0SCAoZXZlcnkgNCBob3VycykgYXMgbmVlZGVkIGZvciBwYWluIGZvciAyIHdlZWtzLiAxMS4gTGV2YWxidXRlcm9sIEhDbCAwLjYzIG1nLzMgbUwgU29sdXRpb24gZm9yIE5lYnVsaXphdGlvbiBTaWc6IE9uZSAoMSkgTUwgSW5oYWxhdGlvbiBxOCBQUk4gKCkgYXMgbmVlZGVkIGZvciBXaGVlemUuIDEyLiBEaXBoZW5oeWRyYW1pbmUgSENsIDEyLjUgbWcvNSBtTCBFbGl4aXIgU2lnOiBbKioxLTQqKl0gUE8gUTZIIChldmVyeSA2IGhvdXJzKSBhcyBuZWVkZWQgZm9yIGluc29tbmlhLiAxMy4gQ2xvYmV0YXNvbCAwLjA1ICUgT2ludG1lbnQgU2lnOiBPbmUgKDEpIEFwcGwgVG9waWNhbCBbKipIb3NwaXRhbDEgKipdICgyIHRpbWVzIGEgZGF5KTogdG8gc2tpbiBsZXNpb25zIG9uIG5lY2ssIGJhY2ssIGFiZG9tZW4gYW5kIGV4dHJlbWl0aWVzOyAqKmRvIG5vdCB1c2Ugb24gZmFjZSBvciBncm9pbioqIC4gRGlzY2hhcmdlIERpc3Bvc2l0aW9uOiBFeHRlbmRlZCBDYXJlIEZhY2lsaXR5OiBbKipIb3NwaXRhbDYgODUqKl0gLSBbKipMb2NhdGlvbiAodW4pIDg2KipdIERpc2NoYXJnZSBEaWFnbm9zaXM6IFByaW1hcnk6IFBlcmZvcmF0ZWQgRHVvZGVuYWwgVWxjZXIgTm9kdWxhciBhcHBlYXJpbmcgbGl2ZXIgKGxpa2VseSBjaXJyaG90aWMpLSBiaW9wc2llcyBvYnRhaW5lZCwgYW5kIGhlcGF0b2xvZ3kgc2Vyb2xnaWVzIGNvbGxlY3RlZCBUb3hpY29sb2d5IHNjcmVlbiBwb3NpdGl2ZSBmb3IgY29jYWluZSBQdWxtb25hcnkgaHlwZXJ0ZW5zaW9uIHBvc3Qtb3AgcG5ldW1vbmlhIHBvc3Qtb3AgYXRlbGVjdGFzaXMgcGVyc2lzdGVudCBoeXBlcmNobG9yZW1pYyBtZXRhYm9saWMgYWNpZG9zaXMtbWFuYWdlZCB3aXRoIENQQVAgaW4gSUNVLCB3ZWFuZWQgZnJvbSB2ZW50IGdyYWR1YWxseS4gUG9zdC1vcCBsb3cgdXJpbmUgb3V0cHV0LW1hbmFnZWQgd2l0aCBJViBhbGJ1bWluIGFuZCBJViBmbHVpZCBoeWRyYXRpb24gLiBTZWNvbmRhcnk6IFsqKkZpcnN0IE5hbWU5IChOYW1lUGF0dGVybjIpIDMwMDY1KipdIFsqKkxvY2F0aW9uICh1bikgKipdIHN5bmRyb21lLCBhc3RobWEsIEhUTiwgUkEsIGNocm9uaWMgYmFjayBwYWluLCBzZWNvbmRhcnkgc3lwaGlsaXMgKHRyZWF0ZWQpLCBjb2NhaW5lIGFidXNlLCBkZXByZXNzaW9uLCBwdWxtIEhUTiwgY2hpbGRob29kIHNlaXp1cmVzIERpc2NoYXJnZSBDb25kaXRpb246IFN0YWJsZSBUb2xlcmF0aW5nIGEgcmVndWxhcmRpZXQgQWRlcXVhdGUgcGFpbiBjb250cm9sIHdpdGggb3JhbCBtZWRpY2F0aW9uIERpc2NoYXJnZSBJbnN0cnVjdGlvbnM6IFBsZWFzZSBjYWxsIHlvdXIgZG9jdG9yIG9yIHJldHVybiB0byB0aGUgRVIgZm9yIGFueSBvZiB0aGUgZm9sbG93aW5nOiAqIFlvdSBleHBlcmllbmNlIG5ldyBjaGVzdCBwYWluLCBwcmVzc3VyZSwgc3F1ZWV6aW5nIG9yIHRpZ2h0bmVzcy4gKiBOZXcgb3Igd29yc2VuaW5nIGNvdWdoIG9yIHdoZWV6aW5nLiAqIElmIHlvdSBhcmUgdm9taXRpbmcgYW5kIGNhbm5vdCBrZWVwIGluIGZsdWlkcyBvciB5b3VyIG1lZGljYXRpb25zLiAqIFlvdSBhcmUgZ2V0dGluZyBkZWh5ZHJhdGVkIGR1ZSB0byBjb250aW51ZWQgdm9taXRpbmcsIGRpYXJyaGVhIG9yIG90aGVyIHJlYXNvbnMuIFNpZ25zIG9mIGRlaHlkcmF0aW9uIGluY2x1ZGUgZHJ5IG1vdXRoLCByYXBpZCBoZWFydGJlYXQgb3IgZmVlbGluZyBkaXp6eSBvciBmYWludCB3aGVuIHN0YW5kaW5nLiAqIFlvdSBzZWUgYmxvb2Qgb3IgZGFyay9ibGFjayBtYXRlcmlhbCB3aGVuIHlvdSB2b21pdCBvciBoYXZlIGEgYm93ZWwgbW92ZW1lbnQuICogWW91ciBwYWluIGlzIG5vdCBpbXByb3Zpbmcgd2l0aGluIDgtMTIgaG91cnMgb3Igbm90IGdvbmUgd2l0aGluIDI0IGhvdXJzLiBDYWxsIG9yIHJldHVybiBpbW1lZGlhdGVseSBpZiB5b3VyIHBhaW4gaXMgZ2V0dGluZyB3b3JzZSBvciBpcyBjaGFuZ2luZyBsb2NhdGlvbiBvciBtb3ZpbmcgdG8geW91ciBjaGVzdCBvciBiYWNrLiAqQXZvaWQgbGlmdGluZyBvYmplY3RzID4gNWxicyB1bnRpbCB5b3VyIGZvbGxvdy11cCBhcHBvaW50bWVudCB3aXRoIHRoZSBzdXJnZW9uLiAqQXZvaWQgZHJpdmluZyBvciBvcGVyYXRpbmcgaGVhdnkgbWFjaGluZXJ5IHdoaWxlIHRha2luZyBwYWluIG1lZGljYXRpb25zLiAqIFlvdSBoYXZlIHNoYWtpbmcgY2hpbGxzLCBvciBhIGZldmVyIGdyZWF0ZXIgdGhhbiAxMDEuNSAoRikgZGVncmVlcyBvciAzOChDKSBkZWdyZWVzLiAqIEFueSBzZXJpb3VzIGNoYW5nZSBpbiB5b3VyIHN5bXB0b21zLCBvciBhbnkgbmV3IHN5bXB0b21zIHRoYXQgY29uY2VybiB5b3UuICogUGxlYXNlIHJlc3VtZSBhbGwgcmVndWxhciBob21lIG1lZGljYXRpb25zIGFuZCB0YWtlIGFueSBuZXcgbWVkcyBhcyBvcmRlcmVkLiAqIENvbnRpbnVlIHRvIGFtYnVsYXRlIHNldmVyYWwgdGltZXMgcGVyIGRheS4gLiBJbmNpc2lvbiBDYXJlOiAtWW91ciBzdGFwbGVzIHdpbGwgYmUgcmVtb3ZlZCBhdCBbKipIb3NwaXRhbDMgKipdIG9uIFdlZCBbKioyMTYwLTEtMTYqKl0uIFN0ZXJpIFN0cmlwcyB3aWxsIGJlIGFwcGxpZWQuIC1Zb3VyIHN0ZXJpLXN0cmlwcyB3aWxsIGZhbGwgb2ZmIG9uIHRoZWlyIG93bi4gUGxlYXNlIHJlbW92ZSBhbnkgcmVtYWluaW5nIHN0cmlwcyA3LTEwIGRheXMgYWZ0ZXIgc3VyZ2VyeS4gLVlvdSBtYXkgc2hvd2VyLCBhbmQgd2FzaCBzdXJnaWNhbCBpbmNpc2lvbnMuIC1Bdm9pZCBzd2ltbWluZyBhbmQgYmF0aHMgdW50aWwgeW91ciBmb2xsb3ctdXAgYXBwb2ludG1lbnQuIC1QbGVhc2UgY2FsbCB0aGUgZG9jdG9yIGlmIHlvdSBoYXZlIGluY3JlYXNlZCBwYWluLCBzd2VsbGluZywgcmVkbmVzcywgb3IgZHJhaW5hZ2UgZnJvbSB0aGUgaW5jaXNpb24gc2l0ZXMuIC4gUmVzcCBzdGF0dXM6IC1XZWFuIG94eWdlbiBhcyB0b2xlcmF0ZWQuIFNhdHMgPjkwJSBpbiBhYnNlbmNlIG9mIFJlc3BpcmF0b3J5L05ldXJvbG9naWMgc3ltcHRvbXMgaXMgYWNjZXB0YWJsZS4gLU94eWdlbiBzZXQtdXAgYXQgaG9tZS4gUGF0aWVudCBkZW5pZXMgdXNpbmcgaG9tZSBveHlnZW4gZm9yIHllYXJzLiAuIEhlcGF0b2xvZ3kgKExpdmVyIGRvY3Rvcik6IC1QbGVhc2UgZm9sbG93LXVwIHdpdGggRHIuIFsqKkZpcnN0IE5hbWU4IChOYW1lUGF0dGVybjIpICoqXSBbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgKipdIGF0IFsqKkhvc3BpdGFsICoqXSBIZWFsdGggQ2VudGVyIHRvIGZvbGxvdy11cCByZXN1bHRzIG9mIGxpdmVyIGJpb3BzeSBhbmQgcmVtYWluaW5nIGhlcGF0aXRpcyBzZXJvbG9naWVzLiAoWyoqSG9zcGl0YWwxIDE4KipdIExpdmVyIGNlbnRlciBbKipUZWxlcGhvbmUvRmF4ICgxKSAyNDIyKipdIHdpbGwgY2FsbCB3aXRoIGFwcG9pbnRtZW50IGZvciBmb2xsb3ctdXAgaW4gWyoqMS00KipdIHdlZWtzKS4gLiBQdWxtb25vbG9neTogLUZvbGxvdy11cCB3aXRoIERyLiBbKipGaXJzdCBOYW1lIChTVGl0bGUpICoqXSAoWyoqVGVsZXBob25lL0ZheCAoMSkgNjEyKipdKSBGb2xsb3d1cCBJbnN0cnVjdGlvbnM6IDEuIFBsZWFzZSBmb2xsb3ctdXAgd2l0aCBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpIDE5MjQqKl0gWyoqVGVsZXBob25lL0ZheCAoMSkgNzUwOCoqXSBvbiBbKioyMTYwLTEtMjIqKl0gYXQgMTBhbS4gMi4gRm9sbG93LXVwIHdpdGggeW91ciBQQ1AsIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm40KSAqKl0uIFsqKkZpcnN0IE5hbWU4IChOYW1lUGF0dGVybjIpIDIwNDgqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjEpIDQyMjMqKl0gWyoqVGVsZXBob25lL0ZheCAoMSkgNzk3NioqXSBpbiAxIHdlZWsuIC4gUHJldmlvdXMgYXBwb2ludG1lbnRzOiAxLlByb3ZpZGVyOiBbKipOYW1lMTAgKE5hbWVJcykgMTU3MSoqXSBGVU5DVElPTiBMQUIgUGhvbmU6WyoqVGVsZXBob25lL0ZheCAoMSkgNjA5KipdIERhdGUvVGltZTpbKioyMTYwLTEtMTQqKl0gMTo0MCAyLiBQcm92aWRlcjogWyoqTmFtZTEwIChOYW1lSXMpIDE1NzAqKl0sSU5URVJQUkVUIFcvTEFCIE5PIENIRUNLLUlOIFsqKk5hbWUxMCAoTmFtZUlzKSAxNTcwKipdIElOVEVQUkVUQVRJT04gQklMTElORyBEYXRlL1RpbWU6WyoqMjE2MC0xLTE0KipdIDI6MDAgMy4gUHJvdmlkZXI6IFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm40KSAqKl0uIFsqKkZpcnN0IE5hbWUgKFNUaXRsZSkgKipdICYgRFIuIFsqKkxhc3QgTmFtZSAoU1RpdGxlKSAqKl0gUGhvbmU6WyoqVGVsZXBob25lL0ZheCAoMSkgNjEyKipdIERhdGUvVGltZTpbKioyMTYwLTEtMTQqKl0gMjowMCBDb21wbGV0ZWQgYnk6WyoqMjE2MC0xLTgqKl0K'
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxMzItNy0yKipdIERpc2NoYXJnZSBEYXRlOiBbKioyMTMyLTctOSoqXSBEYXRlIG9mIEJpcnRoOiBbKioyMDU4LTExLTQqKl0gU2V4OiBNIFNlcnZpY2U6IE5FVVJPU1VSR0VSWSBBbGxlcmdpZXM6IFBhdGllbnQgcmVjb3JkZWQgYXMgaGF2aW5nIE5vIEtub3duIEFsbGVyZ2llcyB0byBEcnVncyBBdHRlbmRpbmc6WyoqRmlyc3QgTmFtZTMgKExGKSAxMjcxKipdIENoaWVmIENvbXBsYWludDogZ2FpdCBpbnN0YWJpbGl0eSBNYWpvciBTdXJnaWNhbCBvciBJbnZhc2l2ZSBQcm9jZWR1cmU6IExlZnQgY3JhbmlvdG9teSBbKioyMTMyLTctNCoqXSBIaXN0b3J5IG9mIFByZXNlbnQgSWxsbmVzczogVGhpcyBpcyBhIDczIHllYXIgb2xkIG1hbiB3aXRoIGEgMSBtb250aCBoaXN0b3J5IG9mIGluY3JlYXNpbmcgZ2FpdCBpbnN0YWJpbGl0eS4gSGUgd2FzIHNlZW4gaW4gRUQgcmVjZW50bHkgYW5kIGhhZCB3aG9sZSBzcGluZSBNUkkgd2hpY2ggd2FzIHVucmVtYXJrYWJsZS4gSGUgd2FzIGJlaW5nIHdvcmtlZCB1cCBmb3IgcG9zc2libGUgUGFya2luc29uJ3MgRHMuIGFuZCBoYWQgTVJJIGJyYWluIHRoaXMgbW9ybmluZyBzaG93aW5nIGxhcmdlIEwgU0RIIGFuZCB0aGUgcGF0aWVudCB3YXMgYWR2aXNlZCB0byBjb21lIHRvIHRoZSBFRCBmb3IgZXZhbHVhdGlvbi4gVXBvbiBxdWVzdGlvbmluZyBwYXRpZW50IGRvZXMgYWRtaXQgdG8gc2xpcCBhbmQgZmFsbCBvbiBpY2UgaGl0dGluZyBoZWFkIGluIFsqKjIxMzItMy0xMCoqXSBmb2xsb3dlZCBieSBNVkEgMyBkYXlzIGxhdGVyIHdpdGggY2FyIGJlaW5nIHRvdGFsbGVkLiBIZSBkaWQgbm90IHNlZWsgbWVkaWNhbCBhdHRlbnRpb24gZm9yIGVpdGhlciBlcGlzb2RlLiBQYXN0IE1lZGljYWwgSGlzdG9yeTogUE1IeDpIVE4sIDMgc3RlbnRzIFsqKjUtMTIqKl0geXIgYWdvLCBzL3AgY29sZWN0b215IGZvciBmZWNhbGl0aCwgc3VidG90YWwgcHJvc3RhdGVjdG9teSBmb3IgQlBILCBtYWN1bGFyIGRlZ2VuZXJhdGlvbiwgcmVjZW50IGNhdGFyY3QgcmVtb3ZhbCBPUywgbmVlZHMgT0QgZG9uZSBTb2NpYWwgSGlzdG9yeTogU29jaWFsIEh4Om5vbnNtb2tlciwgbGl2ZXMgb24gWyoqSG9zcGl0YWwzIDQyOTgqKl0gYnV0IHJlbG9jYXRpbmcgdG8gWyoqTG9jYXRpb24gKHVuKSA4NioqXSBhcmVhLCBpbnZvdmxlZCBmYW1pbHksIHJldGlyZWQgUk4gRmFtaWx5IEhpc3Rvcnk6IG5jIFBoeXNpY2FsIEV4YW06IFBIWVNJQ0FMIEVYQU06IHVbcGluIGFkbWlzc2lvbiBPOiBUOjk3IEJQOiAxNDQvOTUgSFI6ODQgUiAxOCBPMlNhdHM5OSByYSBHZW46IFdEL1dOLCBjb21mb3J0YWJsZSwgTkFELiBIRUVOVDogUHVwaWxzOiBMIHN1cmdpY2FsIDRtbSByZWFjdGl2ZSwgUiAzbW0gcmVhY3RpdmUgRU9NcyBmdWxsIE5lY2s6IFN1cHBsZS4gRXh0cmVtOiBXYXJtIGFuZCB3ZWxsLXBlcmZ1c2VkLiBOZXVybzogTWVudGFsIHN0YXR1czogQXdha2UgYW5kIGFsZXJ0LCBjb29wZXJhdGl2ZSB3aXRoIGV4YW0sIG5vcm1hbCBhZmZlY3QuIE9yaWVudGF0aW9uOiBPcmllbnRlZCB0byBwZXJzb24sIHBsYWNlLCBhbmQgZGF0ZS4gUmVjYWxsOiBbKio0LTkqKl0gb2JqZWN0cyBhdCA1IG1pbnV0ZXMuIExhbmd1YWdlOiBTcGVlY2ggZmx1ZW50IHdpdGggZ29vZCBjb21wcmVoZW5zaW9uIGFuZCByZXBldGl0aW9uLkhhcyBzb21lIGRpZmZpY3VsdHkgd2l0aCB3b3JkIGZpbmRpbmcgd2hlbiBkZXNjcmliaW5nIGhpc3RvcnkuTmFtaW5nIGludGFjdC4gTm8gZHlzYXJ0aHJpYSBvciBwYXJhcGhhc2ljIGVycm9ycy4gQ3JhbmlhbCBOZXJ2ZXM6IEk6IE5vdCB0ZXN0ZWQgSUk6IFB1cGlscyBMIHN1cmdpY2FsIDRtbSByZWFjdGl2ZSwgUiAzbW0gcmVhY3RpdmUgdG8gbGlnaHQuIFZpc3VhbCBmaWVsZHMgYXJlIGZ1bGwuIElJSSwgSVYsIFZJOiBFeHRyYW9jdWxhciBtb3ZlbWVudHMgaW50YWN0IGJpbGF0ZXJhbGx5IHdpdGhvdXQgbnlzdGFnbXVzLiBWLCBWSUk6IEZhY2lhbCBzdHJlbmd0aCBhbmQgc2Vuc2F0aW9uIGludGFjdCBhbmQgc3ltbWV0cmljLiBWSUlJOiBIZWFyaW5nIGludGFjdCB0byB2b2ljZS4gSVgsIFg6IFBhbGF0YWwgZWxldmF0aW9uIHN5bW1ldHJpY2FsLiBbKipEb2N0b3IgRmlyc3QgTmFtZSA4MSoqXTogU3Rlcm5vY2xlaWRvbWFzdG9pZCBhbmQgdHJhcGV6aXVzIG5vcm1hbCBiaWxhdGVyYWxseS4gWElJOiBUb25ndWUgbWlkbGluZSB3aXRob3V0IGZhc2NpY3VsYXRpb25zLiBNb3RvcjogTm9ybWFsIGJ1bGsgYW5kIHRvbmUgYmlsYXRlcmFsbHkuIE5vIGFibm9ybWFsIG1vdmVtZW50cywgdHJlbW9ycy4gU3RyZW5ndGggZnVsbCBwb3dlciBbKio2LTExKipdIHRocm91Z2hvdXQuIE5vIHByb25hdG9yIGRyaWZ0IFNlbnNhdGlvbjogSW50YWN0IHRvIGxpZ2h0IHRvdWNoIGJpbGF0ZXJhbGx5LiBSZWZsZXhlczogVG9lcyBkb3duZ29pbmcgYmlsYXRlcmFsbHkgQ29vcmRpbmF0aW9uOiBub3JtYWwgb24gZmluZ2VyLW5vc2UtZmluZ2VyLiBFeGFtIGF0IERpc2NoYXJnZTogTm9uZm9jYWwuIFJpZ2h0IHB1cGlsIHN1cmdpY2FsIGFuZCBhc3ltbWV0cmljIHRvIGxlZnQsIGJ1dCByZWFjdGl2ZS4gTUFFIFsqKjYtMTEqKl0uIE5vIGRyaWZ0LiBBbWJ1bGF0aW5nIHdpdGggYSBjYW5lLiBIZWFkIGluY2lzaW9uIEMvRC9JIFBlcnRpbmVudCBSZXN1bHRzOiBNUkkgQnJhaW4gWyoqMjEzMi03LTIqKl06IExhcmdlIGV4dHJhLWF4aWFsIGhldGVyb2dlbmVvdXMgY29sbGVjdGlvbiBvdmVybHlpbmcgdGhlIGVudGlyZSBsZWZ0IGhlbWlzcGhlcmUgbGlrZWx5IHJlcHJlc2VudHMgYSBjb21wbGV4LCBtdWx0aS1hZ2VkIHN1YmR1cmFsIGhlbWF0b21hLCB3aXRoIGEgbGFyZ2UgbXVsdGlsb2N1bGF0ZWQgY29tcG9uZW50IGZpbGxpbmcgdGhlIGxlZnQgbWlkZGxlIGNyYW5pYWwgZm9zc2Egd2l0aCBwb3N0ZXJpb3IgYW5kIHN1cGVyaW9yIGRpc3BsYWNlbWVudCBvZiB0aGUgdGVtcG9yYWwgbG9iZSB3aXRoIG1hc3MgZWZmZWN0IGFzIGRldGFpbGVkIGFib3ZlLiBJdCBpcyB1bmNsZWFyIHRvIHdoYXQgZXh0ZW50IHRoZXJlIG1heSBiZSB1bmRlcmx5aW5nIGxlZnQgYW50ZXJpb3IgdGVtcG9yYWwgZW5jZXBoYWxvbWFsYWNpYS4gVGhlIG1ham9yaXR5IG9mIGVuaGFuY2VtZW50IGlzIHRoaW4gcGVyaXBoZXJhbCBhbmQgZHVyYWwtYmFzZWQsIHdpdGggYSBtb3JlIGZvY2FsIHBsYXF1ZS1saWtlIGFuZCBub2R1bGFyIGFyZWEgb2YgZW5oYW5jZW1lbnQgb3Zlcmx5aW5nIG9uZSBvZiB0aGUgY3lzdGljIGNhdml0aWVzIHdoaWNoIGlzIG1vc3QgbGlrZWx5IHJlYWN0aXZlLCBhbmQgYW4gdW5kZXJseWluZyBpcyB1bmxpa2VseS4gSG93ZXZlciwgbmV1cm9zdXJnaWNhbCBldmFsdWF0aW9uIGFuZCBjb250aW51ZWQgZm9sbG93dXAgaXMgcmVjb21tZW5kZWQuIFRoZXJlIGlzIHN1YmZhbGNpbmUgYW5kIHVuY2FsIGhlcm5haXRpb24gb24gdGhlIGxlZnQuIFByb21pbmVudCBjaXN0ZXJuYSBtYWduYSB3aXRoIGh5cG9wbGFzdGljIHZlcm1pcyBpbiB0aGUgc3BlY3RydW0gb2YgRGFuZHktV2Fsa2VyIHZhcmlhbnQgaXMgYWxzbyBub3RlZC4gVGhlIGZpbmRpbmdzIHdlcmUgZGlzY3Vzc2VkIHdpdGggdGhlIGVtZXJnZW5jeSBkZXBhcnRtZW50IGF0IHRoZSB0aW1lIG9mIGRpY3RhdGlvbiwgYXQgMDkzMCBob3VycyBvbiBbKioyMTMyLTctMioqXSwgYWxzbyBzdWJzZXF1ZW50bHkgZGlzY3Vzc2VkIHdpdGggdGhlIHBhdGllbnQncyBuZXVyb2xvZ2lzdCwgRHIuIFsqKkZpcnN0IE5hbWU4IChOYW1lUGF0dGVybjIpICoqXSBbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgKipdLiBMYWJzOiBDT01QTEVURSBCTE9PRCBDT1VOVCBXQkMgUkJDIEhnYiBIY3QgTUNWIE1DSCBNQ0hDIFJEVyBQbHQgQ3QgWyoqMjEzMi03LTIqKl0gMDk6MzAgNy4yIDUuMjggMTUuMyA0Ny4yIDkwIDI5LjEgMzIuNSAxMy43IDM2MSBESUZGRVJFTlRJQUwgTmV1dHMgQmFuZHMgTHltcGhzIE1vbm9zIEVvcyBCYXNvIEF0eXBzIE1ldGFzIFsqKjIxMzItNy0yKipdIDA5OjMwIDY1LjkgMjIuMyA3LjQgMy44IDAuNiBCQVNJQyBDT0FHVUxBVElPTiBQVCBQVFQgSU5SIFBsdCBDdCBbKioyMTMyLTctMioqXSAwOTozMCAxMi45IDI2LjkgMS4xIDM2MSBDaGVtaXN0cnkgUkVOQUwgJiBHTFVDT1NFIEdsdWNvc2UgVXJlYU4gQ3JlYXQgTmEgSyBDbCBIQ08zIEFuR2FwIFsqKjIxMzItNy0yKipdIDA5OjMwIDEwNiAyMCAwLjkgMTM5IDQuNiAxMDYgMjMgMTUgQ1QgaGVhZCBbKio3LTQqKl06IDEuIFN0YXR1cyBwb3N0IGxlZnQgZnJvbnRvdGVtcG9yYWwgY3JhbmlvdG9teSBmb3IgZXZhY3VhdGlvbiBvZiBsZWZ0IHN1YmR1cmFsIGNvbGxlY3Rpb24gd2l0aCBpbnRlcnZhbCBpbmNyZWFzZSBpbiBhY3V0ZSBzdWJkdXJhbCBibG9vZCB3aXRoaW4gdGhlIGxlZnQgdGVtcG9yYWwgY29udmV4aXR5IGFuZCB0ZW1wb3JhbCBmb3NzYSBjb21wYXJlZCB0byB0aGUgcHJpb3Igc3R1ZHkuIDIuIE1vZGVyYXRlIGFtb3VudCBvZiBwbmV1bW9jZXBoYWx1cyB3aXRoaW4gdGhlIGJpZnJvbnRhbCBhbmQgbGVmdCB0ZW1wb3JhbCByZWdpb25zIGNhdXNpbmcgc2xpZ2h0bHkgbW9yZSBwcm9taW5lbnQgZ3lyYWwgYW5kIHN1bGNhbCBlZmZhY2VtZW50LiBDVCBoZWFkIFsqKjctNSoqXTogVGhlIHBhdGllbnQgaXMgc3RhdHVzIHBvc3QgbGVmdCBjcmFuaW90b215LCB3aXRoIGEgZHJhaW4gY2F0aGV0ZXIgdHJhY2tpbmcgc3VwZXJpb3JseSBhbG9uZyB0aGUgY29udmV4aXR5IHRvIHRoZSB2ZXJ0ZXguIFVuY2hhbmdlZCBoeXBlcmRlbnNlIG1hdGVyaWFsIHBvb2xzIGFyb3VuZCB0aGUgY2F0aGV0ZXIsIGNvbXBhdGlibGUgd2l0aCBoZW1vcnJoYWdlIGZyb20gcHJvY2VkdXJlLiBUaGUgZGVncmVlIG9mIHBuZXVtb2NlcGhhbHVzIGlzIHNpbWlsYXIsIHNtYWxsIGluIHRoZSBsZWZ0IGZyb250YWwgcmVnaW9uIGFuZCBzbWFsbC10by1tb2RlcmF0ZSBpbiB0aGUgcmlnaHQgZnJvbnRhbCByZWdpb24uIFRoZSBwcmV2aW91c2x5IG5vdGVkICJbKipMb2NhdGlvbiA5NTg2NyoqXSIgc2lnbiAod2lkZW5pbmcgb2YgdGhlIGludGVyaGVtaXNwaGVyaWMgZmlzc3VyZSBhbmQgc3BhY2UgYXQgdGhlIHRpcHMgb2YgdGhlIGZyb250YWwgbG9iZXMpIGhhcyBzaWduaWZpY2FudGx5IGltcHJvdmVkLiBSZXNpZHVhbCBsZWZ0IHN1YmR1cmFsIGZsdWlkIGFuZCBibG9vZCBpcyBzdGFibGUgaW4gZXh0ZW50LiBUaGUgbGVmdCB0ZW1wb3JhbCBsb2JlIHJlbWFpbnMgZGlzcGxhY2VkIHBvc3Rlcmlvcmx5IHdpdGggc3VsY2FsIGVmZmFjZW1lbnQuIEVmZmFjZW1lbnQgb2YgdGhlIGZyb250YWwgWyoqRG9jdG9yIExhc3QgTmFtZSA1MzQqKl0gb2YgdGhlIGxlZnQgbGF0ZXJhbCB2ZW50cmljbGUgcmVtYWlucyBtaWxkLCBhbmQgaXRzIHRlbXBvcmFsIFsqKkRvY3RvciBMYXN0IE5hbWUgNTM0KipdIHJlbWFpbnMgY29tcHJlc3NlZC4gQSAzLW1tIHJpZ2h0d2FyZCBzaGlmdCBvZiBtaWRsaW5lIHN0cnVjdHVyZXMgaXMgdW5jaGFuZ2VkLiBDVCBoZWFkIFsqKjctNioqXTogTm8gc2lnbmlmaWNhbnQgaW50ZXJ2YWwgY2hhbmdlLiBCcmllZiBIb3NwaXRhbCBDb3Vyc2U6IFBhdGllbnQgd2FzIGFkbWl0dGVkIHRvIElDVSBmb3IgY2xvc2UgbW9uaXRvcmluZyB3aXRoIFExaHIgbmV1cm9sb2dpYyBldmFsdWF0aW9ucyBhbmQgd29yayB1cCBmb3IgdGhlIE9SIGluY2x1ZGluZyBwbGF0ZWxldCB0cmFuc2Z1c2lvbi4gSGUgd2FzIHRha2VuIHRvIHRoZSBPUiBvbiBbKio3LTQqKl0gZm9yIGEgbGVmdCBDcmFuaW90b215LiBIZSBoYWQgYSBzdWJkdXJhbCBkcmFpbiBpbiBwbGFjZSBwb3N0LW9wIGFuZCB3YXMgcmV0dXJuZWQgdG8gdGhlIElDVS4gSGlzIEtlcHByYSB3YXMgaW5jcmVhc2VkIHRvIDFnIFsqKkhvc3BpdGFsMSAqKl0uIFBsYXRlbGV0cyB3ZXJlIGdpdmVuLiBPbiBbKio3LTUqKl0gYSBwb3N0LW8gcENUIGhlYWQgd2FzIHN0YWJsZS4gU2Vyb3F1ZWwgd2FzIHN0YXJ0ZWQgZm9yIHN1bmRvd25pbmcgYmVoYXZpb3IuIE9uIFsqKjctNioqXSwgaGlzIGNvbmZ1c2lvbiBpbXByb3ZlZC4gSGlzIGRyYWluIHdhcyBkaXNjb250aW51ZWQuIFJlcGVhdCBDVCB3YXMgYWdhaW4gc3RhYmxlLiBIZSB3YXMgdHJhbnNmZXJyZWQgdG8gdGhlIGZsb29yIHdpdGggdGVsZW1ldHJ5LiBUaGUgR2VyaWF0cmljIHNlcnZpY2Ugd2FzIGNvbnN1bHRlZCBvbiBbKio3LTYqKl0uIFNlcm9xdWVsIHdhcyByZXN0YXJ0ZWQsIGFuZCB0aGUgUGVwY2lkIGFuZCBGb2xleSB3ZXJlIHJlbW92ZWQuIFBUIGFuZCBPVCB3ZXJlIGNvbnN1bHRlZC4gSXQgd2FzIGZlbHQgdGhhdCBoZSB3b3VsZCBiZW5lZml0IGZyb20gcmVoYWIgc2VydmljZXMuIFBlciB0aGUgZmFtaWx5LCBoZSB3YXMgc3RhcnRpbmcgdG8gZXhoaWJpdCBzaWducyBvZiBkZW1lbnRpYSBwcmlvciB0byB0aGlzIG1lZGljYWwgZXZlbnQvYWRtaXNzaW9uLiBIZSB3YXMgY2xlYXJlZCBmb3IgaG9tZSBieSBQVCBvbiBbKioyMTMyLTctOCoqXS4gQSBWTkEgaG9tZSBzYWZldHkgZXZhbHVhdGlvbiB3YXMgb3JkZXJlZC4gSGUgd2FzIGRpc2NoYXJnZWQgaG9tZSBbKioyMTMyLTctOSoqXS4gTWVkaWNhdGlvbnMgb24gQWRtaXNzaW9uOiBNZWRpY2F0aW9ucyBwcmlvciB0byBhZG1pc3Npb246bGlzaW5vcHJpbCwgYXNhLCBwbGF2aXgsIHNlcm9xdWVsKHNlbGYgZGMnZCAxIG1vbnRoIGFnbyksIHNpbXZhc3RhdGlvbiAoc2VsZiBkYydkKSwgTVZJIERpc2NoYXJnZSBNZWRpY2F0aW9uczogMS4gQXRlbm9sb2wgMjUgbWcgVGFibGV0IFNpZzogT25lICgxKSBUYWJsZXQgUE8gREFJTFkgKERhaWx5KS4gMi4gSGVwYXJpbiAoUG9yY2luZSkgNSwwMDAgdW5pdC9tTCBTb2x1dGlvbiBTaWc6IE9uZSAoMSkgSW5qZWN0aW9uIFRJRCAoMyB0aW1lcyBhIGRheSkuIDMuIE11bHRpdml0YW1pbiBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiA0LiBUaGlhbWluZSBIQ2wgMTAwIG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIDUuIFNlbm5hIDguNiBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBCSUQgKDIgdGltZXMgYSBkYXkpLiA2LiBBY2V0YW1pbm9waGVuIDUwMCBtZyBUYWJsZXQgU2lnOiAxLTIgVGFibGV0cyBQTyBRNkggKGV2ZXJ5IDYgaG91cnMpIGFzIG5lZWRlZCBmb3IgcGFpbixmZXZlcjogbWF4IDRnLzI0aHJzLiA3LiBEb2N1c2F0ZSBTb2RpdW0gMTAwIG1nIENhcHN1bGUgU2lnOiBPbmUgKDEpIENhcHN1bGUgUE8gQklEICgyIHRpbWVzIGEgZGF5KS4gOC4gTGlzaW5vcHJpbCAzMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiA5LiBCdXByb3Bpb24gSENsIDE1MCBtZyBUYWJsZXQgU3VzdGFpbmVkIFJlbGVhc2UgU2lnOiBPbmUgKDEpIFRhYmxldCBTdXN0YWluZWQgUmVsZWFzZSBQTyBCSUQgKDIgdGltZXMgYSBkYXkpLiAxMC4gTGV2ZXRpcmFjZXRhbSA1MDAgbWcgVGFibGV0IFNpZzogVHdvICgyKSBUYWJsZXQgUE8gQklEICgyIHRpbWVzIGEgZGF5KS4gMTEuIENsb3BpZG9ncmVsIDc1IG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIDEyLiBRdWV0aWFwaW5lIDI1IG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIFEgUE0gKCkuIDEzLiBBc3BpcmluIDMyNSBtZyBUYWJsZXQsIERlbGF5ZWQgUmVsZWFzZSAoRS5DLikgU2lnOiBPbmUgKDEpIFRhYmxldCwgRGVsYXllZCBSZWxlYXNlIChFLkMuKSBQTyBEQUlMWSAoRGFpbHkpLiBEaXNjaGFyZ2UgRGlzcG9zaXRpb246IEhvbWUgd2l0aCBTZXJ2aWNlIERpc2NoYXJnZSBEaWFnbm9zaXM6IExlZnQgU0RIIGFuZCBjeXN0IERpc2NoYXJnZSBDb25kaXRpb246IE1lbnRhbCBTdGF0dXM6IENvbmZ1c2VkIC0gc29tZXRpbWVzLiBMZXZlbCBvZiBDb25zY2lvdXNuZXNzOiBBbGVydCBhbmQgaW50ZXJhY3RpdmUuIEFjdGl2aXR5IFN0YXR1czogQW1idWxhdG9yeSAtIEluZGVwZW5kZW50LiBEaXNjaGFyZ2UgSW5zdHJ1Y3Rpb25zOiBHZW5lcmFsIEluc3RydWN0aW9ucyA_Pz8_Pz8gSGF2ZSBhIGZyaWVuZC9mYW1pbHkgbWVtYmVyIGNoZWNrIHlvdXIgaW5jaXNpb24gZGFpbHkgZm9yIHNpZ25zIG9mIGluZmVjdGlvbi4gPz8_Pz8_IFRha2UgeW91ciBwYWluIG1lZGljaW5lIGFzIHByZXNjcmliZWQuID8_Pz8_PyBFeGVyY2lzZSBzaG91bGQgYmUgbGltaXRlZCB0byB3YWxraW5nOyBubyBsaWZ0aW5nLCBzdHJhaW5pbmcsIG9yIGV4Y2Vzc2l2ZSBiZW5kaW5nLiA_Pz8_Pz8gWW91IG1heSB3YXNoIHlvdXIgaGFpciBvbmx5IGFmdGVyIHN1dHVyZXMgYW5kL29yIHN0YXBsZXMgaGF2ZSBiZWVuIHJlbW92ZWQuID8_Pz8_PyBZb3UgbWF5IHNob3dlciBiZWZvcmUgdGhpcyB0aW1lIHVzaW5nIGEgc2hvd2VyIGNhcCB0byBjb3ZlciB5b3VyIGhlYWQuID8_Pz8_PyBJbmNyZWFzZSB5b3VyIGludGFrZSBvZiBmbHVpZHMgYW5kIGZpYmVyLCBhcyBuYXJjb3RpYyBwYWluIG1lZGljaW5lIGNhbiBjYXVzZSBjb25zdGlwYXRpb24uIFdlIGdlbmVyYWxseSByZWNvbW1lbmQgdGFraW5nIGFuIG92ZXIgdGhlIGNvdW50ZXIgc3Rvb2wgc29mdGVuZXIsIHN1Y2ggYXMgRG9jdXNhdGUgKENvbGFjZSkgd2hpbGUgdGFraW5nIG5hcmNvdGljIHBhaW4gbWVkaWNhdGlvbi4gPz8_Pz8_IFlvdSBhcmUgb2sgdG8gcmVzdW1lIHRha2luZyB5b3VyIFBsYXZpeCBhbmQgQXNwaXJpbi4gUGxlYXNlIGNvbnRhY3QgdXMgd2l0aCBhbnkgY2hhbmdlIGluIGhlYWRhY2hlcyBvciBtZW50YWwgc3RhdHVzID8_Pz8_PyBZb3UgaGF2ZSBiZWVuIHByZXNjcmliZWQgYW4gYW50aS1zZWl6dXJlIG1lZGljaW5lLCBLZXBwcmEsIHRha2UgaXQgYXMgcHJlc2NyaWJlZC4gPz8_Pz8_IENsZWFyYW5jZSB0byBkcml2ZSBhbmQgcmV0dXJuIHRvIHdvcmsgd2lsbCBiZSBhZGRyZXNzZWQgYXQgeW91ciBwb3N0LW9wZXJhdGl2ZSBvZmZpY2UgdmlzaXQuIENBTEwgWU9VUiBTVVJHRU9OIElNTUVESUFURUxZIElGIFlPVSBFWFBFUklFTkNFIEFOWSBPRiBUSEUgRk9MTE9XSU5HID8_Pz8_PyBOZXcgb25zZXQgb2YgdHJlbW9ycyBvciBzZWl6dXJlcy4gPz8_Pz8_IEFueSBjb25mdXNpb24gb3IgY2hhbmdlIGluIG1lbnRhbCBzdGF0dXMuID8_Pz8_PyBBbnkgbnVtYm5lc3MsIHRpbmdsaW5nLCB3ZWFrbmVzcyBpbiB5b3VyIGV4dHJlbWl0aWVzLiA_Pz8_Pz8gUGFpbiBvciBoZWFkYWNoZSB0aGF0IGlzIGNvbnRpbnVhbGx5IGluY3JlYXNpbmcsIG9yIG5vdCByZWxpZXZlZCBieSBwYWluIG1lZGljYXRpb24uID8_Pz8_PyBBbnkgc2lnbnMgb2YgaW5mZWN0aW9uIGF0IHRoZSB3b3VuZCBzaXRlOiByZWRuZXNzLCBzd2VsbGluZywgdGVuZGVybmVzcywgb3IgZHJhaW5hZ2UuID8_Pz8_PyBGZXZlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMTAxPz8_Pz8_IEYuIEZvbGxvd3VwIEluc3RydWN0aW9uczogRm9sbG93LVVwIEFwcG9pbnRtZW50IEluc3RydWN0aW9ucyA_Pz8_Pz9QbGVhc2UgY2FsbCBmb3IgYW4gYXBwb2ludG1lbnQgZm9yIHJlbW92YWwgb2YgeW91ciBzdGFwbGVzIGR1ZSBbKio3LTE2KipdLiA_Pz8_Pz9QbGVhc2UgY2FsbCAoWyoqVGVsZXBob25lL0ZheCAoMSkgNDY3NioqXSB0byBzY2hlZHVsZSBhbiBhcHBvaW50bWVudCB3aXRoIERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgNzM5KipdLCB0byBiZSBzZWVuIGluIDYgd2Vla3MuID8_Pz8_P1lvdSB3aWxsIG5lZWQgYSBDVCBzY2FuIG9mIHRoZSBicmFpbiB3aXRob3V0IGNvbnRyYXN0LiBbKipOYW1lNiAoTUQpIDc0MioqXSBbKipOYW1lOCAoTUQpICoqXSBNRCBbKipNRCBOdW1iZXIoMikgMTI3MyoqXSBDb21wbGV0ZWQgYnk6WyoqMjEzMi03LTkqKl0K'
b''
b''
b'TmFtZTogWyoqS25vd24gbGFzdG5hbWUgNjY0KipdLVsqKktub3duIGxhc3RuYW1lIDc2KipdLFsqKktub3duIGZpcnN0bmFtZSA2NjUqKl0gVW5pdCBObzogWyoqTnVtZXJpYyBJZGVudGlmaWVyIDY2NioqXSBBZG1pc3Npb24gRGF0ZTogWyoqMjE2Mi05LTIwKipdIERpc2NoYXJnZSBEYXRlOiBbKioyMTYyLTktMjcqKl0gRGF0ZSBvZiBCaXJ0aDogWyoqMjA4OS0xMi0yMSoqXSBTZXg6IEYgU2VydmljZTogTUVESUNJTkUgQWxsZXJnaWVzOiBQZW5pY2lsbGlucyAvIE5lb215Y2luIEF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDY2NyoqXSBBZGRlbmR1bTogVGhlIHBhdGllbnQgcmVtYWluZWQgc3RhYmxlIHdoaWxlIGluIHRoZSBob3NwaXRhbCBvdmVybmlnaHQgZnJvbSBbKioyMTYyLTktMjYqKl0gdG8gWyoqMjE2Mi05LTI3KipdLiBEYXkgb2YgZGlzY2hhcmdlIGlzIFsqKjIxNjItOS0yNyoqXS4gU2hlIHdhcyBzZWVuIGJ5IERlcm1hdG9sb2d5IG9uIHRoaXMgZGF5IHdobyByZWNvbW1lbmVkIG91dHBhdGllbnQgZm9sbG93IHVwIGlmIGhlciBMIGFybSBidWxsb3VzIGxlc2lvbiAodGhvdWdodCB0byBiZSBwcmVzc3VyZSBpbmR1Y2VkKSBkb2VzIG5vdCBoZWFsIHdpdGhpbiAxLTIgd2Vla3MuIERpc2NoYXJnZSBEaXNwb3NpdGlvbjogRXh0ZW5kZWQgQ2FyZSBGYWNpbGl0eTogWyoqTG9jYXRpb24gKHVuKSA2NjgqKl0gTWFub3IgWyoqTmFtZTYgKE1EKSAxMTYqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDY2OSoqXSBNRCBbKipNRCBOdW1iZXIoMikgNjcwKipdIENvbXBsZXRlZCBieTpbKioyMTYyLTktMjcqKl0K'
b''
b''
b'TmFtZTogWyoqS25vd24gbGFzdG5hbWUgMTA4OCoqXSxbKipLbm93biBmaXJzdG5hbWUgKipdIEEuIFVuaXQgTm86IFsqKk51bWVyaWMgSWRlbnRpZmllciAxMDg5KipdIEFkbWlzc2lvbiBEYXRlOiBbKioyMTM4LTEtNSoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjEzOC0xLTkqKl0gRGF0ZSBvZiBCaXJ0aDogWyoqMjA3OC0xMC0yNSoqXSBTZXg6IE0gU2VydmljZTogTUVESUNJTkUgQWxsZXJnaWVzOiBQZXJjb2NldCAvIEVyeXRocm9teWNpbiBCYXNlIEF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDEwOTAqKl0gQWRkZW5kdW06IFBOQSAtIHBhdGllbnQgd2FzIGluaXRpYWxseSBnaXZlbiA3IGRheSBjb3Vyc2Ugb2YgbGV2b2Zsb3hhY2luIGZvciBDQVAgdHJlYXRtZW50LiBBZnRlciByZXZpZXdpbmcgRUtHIG9uIGhvc3BpdGFsaXphdGlvbiwgUHQgZGVtb25zdHJhdGVkIG9jY2FzaW9uYWwgbG9uZyBRVGMgaW50ZXJ2YWxzLiBBcyBhIHJlc3VsdCBsZXZvZmxveGFjaW4gd2FzIGNoYW5nZWQgdG8gMTAgZGF5IGNvdXJzZSBvZiBheml0aHJvbXljaW4uIERpc2NoYXJnZSBEaXNwb3NpdGlvbjogSG9tZSBEaXNjaGFyZ2UgRGlhZ25vc2lzOiBJbmZlcmlvciBteW9jYXJkaWFsIGluZmFyY3Rpb24gRGlzY2hhcmdlIENvbmRpdGlvbjogSGVtb2R5bmFtaWNhbGx5IHN0YWJsZSwgc2ludXMgcmh5dGhtLCBwdCBhbWJ1bGF0aW5nIG9uIHJvb20gYWlyLiBEaXNjaGFyZ2UgSW5zdHJ1Y3Rpb25zOiBQdCB3YXMgaW5zdHJ1Y3RlZCB0byB0YWtlIGFsbCBvZiB0aGUgbWVkaWNhdGlvbnMgYXMgaW5zdHJ1Y3RlZC4gUHQgd2FzIGludHJ1Y3RlZCB0byBzZWVrIG1lZGljYWwgYXR0ZW50aW9uIGlmIGhlIGRldmVsb3BzIGNoZXN0IHBhaW4sIFNPQiwgd29yc2VuaW5nIGNvdWdoLCBmZXZlciwgY2hpbGxzLCBuYXVzZWEvdm9taXRpbmcsIGRpenppbmVzcywgb3IgYW55IG90aGVyIGNvbmNlcm5pbmcgc3ltcHRvbXMuIFB0IG5lZWRzIHRvIGZvbGxvdyB1cCB3aXRoIGhpcyBQQ1AgWyoqTmFtZSBJbml0aWFsIChQUkUpIDEwOTEqKl0gMS0yIHdlZWtzLiBBbHNvLCBoZSBuZWVkcyB0byBoYXZlIGhpcyBQQ1AgYXJyYW5nZSBmb3IgWyoqTmFtZSBJbml0aWFsIChQUkUpICoqXSBjYXJkaW9sb2d5IGZvbGxvd3VwIGFwcG9pbnRtZW50IHdpdGhpbiAxIHdlZWsuIFB0IHdhcyBpbnRydWN0ZWQgdG8gY2FycnkgdGhlIFsqKkRvY3RvciBMYXN0IE5hbWUgKipdIG9mIEhlYXJ0cyBtb25pdG9yIGFzIGluc3RydWN0ZWQuIEZvbGxvd3VwIEluc3RydWN0aW9uczogUHJvdmlkZXI6IFsqKk5hbWUxMCAoTmFtZUlzKSAxMDkyKipdIFsqKk5hbWUxMSAoTmFtZUlzKSAqKl0gYXBwb2ludG1lbnQgc2hvdWxkIGJlIGluIDEgd2VlayBQcm92aWRlcjogWyoqTmFtZTEwIChOYW1lSXMpIDEwOTMqKl0gWyoqTmFtZTExIChOYW1lSXMpICoqXSBQcm92aWRlciBbKipOYW1lOSAoUFJFKSAqKl0gYXBwb2ludG1lbnQgc2hvdWxkIGJlIGluIDIgd2Vla3MgWyoqRmlyc3QgTmFtZTExIChOYW1lIFBhdHRlcm4xKSAqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDEwOTQqKl0gTUQgWyoqTUQgTnVtYmVyKDEpIDEwOTUqKl0gQ29tcGxldGVkIGJ5OlsqKjIxMzgtMS0xMioqXQo='
b'TmFtZTogWyoqS25vd24gbGFzdG5hbWUgNjcxKipdLFsqKktub3duIGZpcnN0bmFtZSA2NzIqKl0gVW5pdCBObzogWyoqTnVtZXJpYyBJZGVudGlmaWVyIDY3MyoqXSBBZG1pc3Npb24gRGF0ZTogWyoqMjE5NS0zLTIzKipdIERpc2NoYXJnZSBEYXRlOiBbKioyMTk1LTQtMSoqXSBEYXRlIG9mIEJpcnRoOiBbKioyMTEyLTEyLTIxKipdIFNleDogTSBTZXJ2aWNlOiBDQVJESU9USE9SQUNJQyBBbGxlcmdpZXM6IFN1bGZhIChTdWxmb25hbWlkZXMpIEF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDY3NCoqXSBBZGRlbmR1bTogdGhlIHBhdGllbnQgd2FzIGFsc28gZGlzY2hhcmdlZCB3aXRoIHRoZSBmb2xsb3dpbmcgbWVkaWNhdGlvbjogV2FyZmFyaW4gNSBtZyBRRCBNZXRvcHJvbG9sIDI1IG1nIFsqKkhvc3BpdGFsMSAqKl0gTGFzaXggNDAgbWcgWyoqSG9zcGl0YWwxICoqXSBLQ0wgMjAgbWVxIFsqKkhvc3BpdGFsMSAqKl0gQ2hpZWYgQ29tcGxhaW50OiBwZXIgcHJldmlvdXMgZC9jIHN1bW1hcnkgTWFqb3IgU3VyZ2ljYWwgb3IgSW52YXNpdmUgUHJvY2VkdXJlOiBbKioyMTk1LTMtMjMqKl0gQW9ydGljIFZhbHZlIFJlcGxhY2VtZW50KDI1bW0gTW9zYWljIFBvcmNpbmUgVmFsdmUpLCBNaXRyYWwgVmFsdmUgUmVwbGFjZW1lbnQoMjltbSBNb3NhaWMgUG9yY2luZSBWYWx2ZSksIFJlcGxhY2VtZW50IG9mIEFzY2VuZGluZyBBb3J0YSgyNm1tIEdlbHdlYXZlKSBhbmQgQXRyaWFsIE15eG9tYSBSZW1vdmFsIEhpc3Rvcnkgb2YgUHJlc2VudCBJbGxuZXNzOiBhcyBwZXIgcHJldmlvdXMgZC9jIHN1bW1hcnkgUGFzdCBNZWRpY2FsIEhpc3Rvcnk6IENvbmdlc3RpdmUgSGVhcnQgRmFpbHVyZShkaWFzdG9saWMpLCBBb3J0aWMgSW5zdWZmaWNpZW5jeSwgTWl0cmFsIFJlZ3VyZ2l0YXRpb24sIEF0cmlhbCBNeXhvbWEsIERpbGF0ZWQgQXNjZW5kaW5nIEFvcnRhLCBBdHJpYWwgRmlicmlsbGF0aW9uLCBIeXBlcnRlbnNpb24sIEh5cGVybGlwaWRlbWlhLCBCZW5pZ24gUHJvc3RhdGljIEh5cGVydHJvcGh5LCBTbGVlcCBBcG5lYSAtIG9uIENQQVAsIE9iZXNpdHkgU29jaWFsIEhpc3Rvcnk6IFJldGlyZWQsIGxpdmVzIHdpdGggd2lmZSBpbiBbKipOYW1lIChOSSkgNjc1KipdLiBRdWl0IGNpZ2FycyBvdmVyIDEwIHllYXJzIGFnby4gQWRtaXRzIHRvIHNvY2lhbCBFVE9IIGNvbnN1bXB0aW9uLiBGYW1pbHkgSGlzdG9yeTogRGVuaWVzIHByZW1hdHVyZSBjb3JvbmFyeSBkaXNlYXNlKGJlZm9yZSBhZ2UgNTUpIFBoeXNpY2FsIEV4YW06IG5vbmUgUGVydGluZW50IFJlc3VsdHM6IG5vbmUgQnJpZWYgSG9zcGl0YWwgQ291cnNlOiBub25lIE1lZGljYXRpb25zIG9uIEFkbWlzc2lvbjogbm9uZSBEaXNjaGFyZ2UgTWVkaWNhdGlvbnM6IEluIGFkZGl0aW9uIHRvIGFib3ZlIG1lZGljYXRpb24gdGhlIHBhdGllbnQgd2FzIGFsc28gZGlzY2hhcmdlZCB3aXRoOiAxLiBXYXJmYXJpbiA1IG1nIGRhaWx5IDIuIE1ldG9wcm9sb2wgMjVtZyBUd2ljZSBhIGRheSAzLiBMYXNpeCA0MCBtZyBUd2ljZSBhIGRheSA0LiBQb3Rhc3NpdW0gQ2hsb3JpZGUgMjAgbWVxIHR3aWNlIGEgZGF5IERpc2NoYXJnZSBEaXNwb3NpdGlvbjogSG9tZSBXaXRoIFNlcnZpY2UgRmFjaWxpdHk6IFsqKkxvY2F0aW9uICh1bikgNDIqKl0gVk5BIERpc2NoYXJnZSBEaWFnbm9zaXM6IENvbmdlc3RpdmUgSGVhcnQgRmFpbHVyZShkaWFzdG9saWMpLCBBb3J0aWMgSW5zdWZmaWNpZW5jeSwgTWl0cmFsIFJlZ3VyZ2l0YXRpb24sIEF0cmlhbCBNeXhvbWEsIERpbGF0ZWQgQXNjZW5kaW5nIEFvcnRhIC0gcy9wIEFvcnRpYyBWYWx2ZSBSZXBsYWNlbWVudCwgTWl0cmFsIFZhbHZlIFJlcGxhY2VtZW50LCBSZXBsYWNlbWVudCBvZiBBc2NlbmRpbmcgQW9ydGEgYW5kIEF0cmlhbCBNeXhvbWEgUmVtb3ZhbCwgUG9zdG9wIEFjdXRlIFJlbmFsIEluc3VmZmljaWVuY3ksIEF0cmlhbCBGaWJyaWxsYXRpb24sIEh5cGVydGVuc2lvbiwgSHlwZXJsaXBpZGVtaWEsIEJlbmlnbiBQcm9zdGF0aWMgSHlwZXJ0cm9waHksIFNsZWVwIEFwbmVhIC0gb24gQ1BBUCBEaXNjaGFyZ2UgQ29uZGl0aW9uOiBHb29kIERpc2NoYXJnZSBJbnN0cnVjdGlvbnM6IFBhdGllbnQgbWF5IHNob3dlciwgbm8gYmF0aHMuIE5vIGNyZWFtcywgbG90aW9ucyBvciBvaW50bWVudHMgdG8gaW5jaXNpb25zLiBObyBkcml2aW5nIGZvciBhdCBsZWFzdCBvbmUgbW9udGguIE5vIGxpZnRpbmcgbW9yZSB0aGFuIDEwIGxicyBmb3IgYXQgbGVhc3QgMTAgd2Vla3MgZnJvbSB0aGUgZGF0ZSBvZiBzdXJnZXJ5LiBNb25pdG9yIHdvdW5kcyBmb3Igc2lnbnMgb2YgaW5mZWN0aW9uLiBQbGVhc2UgY2FsbCB3aXRoIGFueSBjb25jZXJucyBvciBxdWVzdGlvbnMuIEZvbGxvd3VwIEluc3RydWN0aW9uczogRHIuIFsqKkxhc3QgTmFtZSAoU1RpdGxlKSA2NzYqKl0gaW4gWyoqMy01KipdIHdlZWtzLCBjYWxsIGZvciBhcHB0IERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgNjc3KipdIGluIFsqKjEtMyoqXSB3ZWVrcywgY2FsbCBmb3IgYXBwdC4gUGxlYXNlIHNlbmQgSU5ScyB0byBEci4gWyoqTmFtZSAoTkkpIDY3OCoqXSBvZmZpY2UgYXQgRihbKipUZWxlcGhvbmUvRmF4ICgxKSA2NzkqKl0uIEhlIHdpbGwgbmVlZCBJTlIgY2hlY2sgRnJpZGF5LiBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpIDY4MCoqXSwgY2FsbCBmb3IgYXBwdCBbKipEb2N0b3IgTGFzdCBOYW1lICoqXSBbKipMYXN0IE5hbWUgKFByZWZpeGVzKSAqKl0gTUQgWyoqTUQgTnVtYmVyKDEpIDY4MSoqXSBDb21wbGV0ZWQgYnk6WyoqMjE5NS00LTIqKl0K'
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjEwNi00LTkqKl0gICAgICAgICAgICAgIERpc2NoYXJnZSBEYXRlOiAgIFsqKjIxMDYtNC0xOSoqXQoKRGF0ZSBvZiBCaXJ0aDogIFsqKjIwNDEtOC0yNCoqXSAgICAgICAgICAgICBTZXg6ICAgTQoKU2VydmljZTogTUVESUNJTkUKCkFsbGVyZ2llczoKU3VsZm9uYW1pZGVzIC8gV2VsbGJ1dHJpbiAvIFRhcGUgLyBMYXRleAoKQXR0ZW5kaW5nOlsqKkZpcnN0IE5hbWUzIChMRikgODAwKipdCkNoaWVmIENvbXBsYWludDoKU3luY29wZSwgbmF1c2VhLCB2b21pdGluZwoKTWFqb3IgU3VyZ2ljYWwgb3IgSW52YXNpdmUgUHJvY2VkdXJlOgpFUCBzdHVkeQoKSGlzdG9yeSBvZiBQcmVzZW50IElsbG5lc3M6ClRoaXMgaXMgYSA2NC15ZWFyLW9sZCBnZW50bGVtYW4gd2l0aCBhIGhpc3Rvcnkgb2YgbWV0YXN0YXRpYyBSQ0MKb24gQmV2YWNpenVtYWIvVGVtc2lyb2xpbXVzLCBzaWNrIHNpbnVzIHN5bmRyb21lIHMvcCBQUE0gaW4KWyoqMjA5MSoqXSwgSFROLCBhbmQgaHlwb3RoeXJvaWRpc20gd2hvIGlzIHRyYW5zZmVycmVkIGhlcmUgZnJvbSBbKipIb3NwaXRhbCA3OTEyKipdIGFmdGVyIHN5bmNvcGFsIGV2ZW50LiAgUGF0aWVudCByZXBvcnRzIHRoYXQgaGUKaGFkIGp1c3QgZmluaXNoZWQgc2hvd2VyaW5nIGFuZCBlbnRlcmVkIGhpcyB3YWxrLWluIGNsb3NldCB3aGVuCmV2ZXJ5dGhpbmcgd2VudCBibGFuay4gIEhpcyB3aWZlIGhlYXJkIGEgIiJ0aHVkIiIgYW5kIHdlbnQKdXBzdGFpcnMgdG8gZmluZCBoZXIgaHVzYmFuZCB1bmNvbnNjaW91cy4gIFdpZmUgY2FsbGVkIDkxMSBhbmQKYmVnYW4gYWRtaW5pc3RlcmluZyByZXNjdWUgYnJlYXRocy4gIEFjY29yZGluZyB0byB3aWZlLCBwYXRpZW50CndhcyBtYWtpbmcgZ3VyZ2xpbmcgbm9pc2VzIGFuZCB3YXMgY3lhbm90aWMuICBFTVMgYXJyaXZlZCBhbmQKdHJhbnNwb3J0ZWQgcGF0aWVudCB0byBbKipIb3NwaXRhbDEgMzQqKl0gKG5vIG5vdGUgb2YgQ1BSIG9yIHNob2NrLCBidXQgcGVyCnJlcG9ydCwgcGF0aWVudCB3YXMgYmFnZ2VkKS4gIFdpZmUgZGVuaWVzIHNlaXp1cmUtbGlrZSBhY3Rpdml0eQpvciBibGFkZGVyL2Jvd2VsIGluY29udGluZW5jZS4gIEF0IFsqKkhvc3BpdGFsMSAzNCoqXSwgQ1QgaGVhZCwgQ1Qgc3BpbmUsIGFuZApDWFIgd2VyZSBuZWdhdGl2ZS4gIFBhdGllbnQgd2FzIHRyYW5zcG9ydGVkIHRvIFsqKkhvc3BpdGFsMSAxOCoqXSB3aXRob3V0CmluY2lkZW50LgouCkluIFsqKkhvc3BpdGFsMSAxOCoqXSBFRCBWUyA5OCwgQlAgMTQwLzk4LCBIUiA3MCwgUlIgMTksIFNhdCA5OCUyTC4gKFAgMzYgdG8KNzIgaW4gRUQpLiBSZXBlYXQgQ1QgaGVhZCB3aXRob3V0IG5ldyBwYXRob2xvZ3kuIFNlZW4gYnkgRVAKZmVsbG93IGluIEVELCBpbnRlcnJvZ2F0aW9uIHNob3dlZCBub3JtYWxseSBmdW5jdGlvbmluZyBkdWVsCmNoYW1iZXIgUE0gd2l0aCBvY2Nhc2lvbmFsIHZlbnRyaWN1bGFyIGJpZ2VtaW55IHdpdGggbm9ybWFsIFBNCmluaGliaXRpb24uICBUaGVyZSBpcyBhbHNvIGEgcXVlc3Rpb24gb2YgdmVudHJpY3VsYXIgdGFjaHljYXJkaWEKYXQgdGhlIG9uc2V0IG9mIHRoZSBzeW5jb3BhbCBlcGlzb2RlLgouCkFkbWl0dGVkIHRvIG1lZGljaW5lIFsqKjItMTQqKl0gdG8gWyoqMi0xNSoqXSBhbmQgYWdhaW4gWyoqMi0xNioqXSB0byBbKioyMTA2LTItMTcqKl0gZm9yCmxpZ2h0aGVhZG5lc3MuIEF0dHJpYnVlZCB0byBkZWh5ZHJhdGlvbiBbKioyLTE2KipdIHBvb3IgUE8gaW50YWtlIGFuZApkaWFycmhlYSBpbiBzZXR0aW5nIG9mIGNoZW1vLiBPZiBub3RlIGF0IHRoYXQgdGltZSwgIiJIaXMgcGFjZXIKd2FzIGludGVycm9nYXRlZCB3aXRob3V0IGFueSBicmFkeSBvciB0YWNoeWFycmh5dGhtaWFzLiBIZSB3YXMKbm90ZWQgdG8gaGF2ZSBhIEhSIG9mIDMwIGJ1dCB0aGlzIHdhcyBmYWxzZSwgaXQgd2FzIHJlbGF0ZWQgdG8KUFZDcyBpbiBhIGJpZ2VteSBwYXR0ZXJuIHdoaWNoIHdvdWxkIGxlYWQgdG8gYSBwZXJpcGhlcmFsIHB1bHNlCm9yIHB1bHNlIG94aW1ldGVyIHJlY29yZGluZyBhIHB1bHNlIG9mIDMwLCBidXQgYW4gRUtHIHJldmVhbGVkIGEKcmF0ZSBvZiA2MC4iIgouClBUIGhhcyBoYWQgPiA1IGJvdXRzIG9mIG5vbi1ibG9vZHkgZGlhcnJoZWEgZm9yIGxhc3QgMyBkYXlzLiBEaWQKbm90ZSBzbWFsbCBibG9vZCBvbiBUUCB4IDEuIFBvb3IgUE8gaW50YWtlIGFzIHdlbGwgbGFzdCBmZXcKZGF5cy4gIEhlIFJlcG9ydHMgdGhhdCAzIG5pZ2h0cyBhZ28gaGUgaGFzIG11bHRpcGxlIGVwaXNvZGVzIG9mCnNlY29uZHMgbG9uZyBkdWxsIGNoZXN0cGFpbiByYWRpYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0IGNoZXN0Cm9jY3VyaW5nIGluIGJlZCB3aXRob3V0IFNPQiwgZGlhcGhvcmVzaXMgb3IgTi9WLiBObwpwYWxwYXRhdGlvbnMuICBST1M6ICsgY2hyb25pYyBmcm9udGFsIEhBLiBObyBjaGFuZ2UgaW4gdmlzaW9uIG9yCmhlYXJpbmcuIE5vIGZvY2FsIHdlYWtuZXNzIG9yIGxvc3Mgb2Ygc2Vuc2F0aW9uLiArIE4vViBhdCBbKipIb3NwaXRhbCAqKl0uICsgZGlhcnJoZWEgeCAzIGRheXMuIE5vIGR5c3VyaWEgb3IgaGVtYXR1cmlhLgoKUGFzdCBNZWRpY2FsIEhpc3Rvcnk6Ckh5cGVydGVuc2lvbgpNZXRhc3RhdGljIHBhcGlsbGFyeSByZW5hbCBjZWxsIGNhbmNlciBvbiBjaGVtbyAoaW5pdGlhbGx5CmRpYWdub3NlZCBbKioyMTAzKipdKQpzeW5jb3BlLCBTU1Mgcy9wIHBhY2VyIChEREQpIGluIFsqKjIwOTEqKl0sIGdlbmVyYXRvciBjaGFuZ2UgaW4gWyoqMjA5MioqXQpQQUYKQSBmbHV0dGVyIHMvcCBhYmxhdGlvbgpWRUEsID8_Pz8_P1RyaWdnZXJlZCB2ZW50cmljdWxhciB0YWNoeWNhcmRpYT8_Pz8_PwpSZW1vdGUgPz8_Pz8_c2VpenVyZT8_Pz8_Py0gdHJlYXRlZCBhdCBbKipIb3NwaXRhbDYgKipdLCBhdHRyaWJ1dGVkIHRvCiBXZWxsYnV0cmluClsqKjIxMDMtNi0xKipdOiBSZW1vdmFsIG9mIGNvbG9uIHBvbHlwcwpUb2JhY2NvIGFidXNlICgxcHBkIHggYXBwcm94aW1hdGVseSA0MCB5ZWFycykKSHlwb3RoeXJvaWQKcy9wIFRvbnNpbGxlY3RvbXkKClNvY2lhbCBIaXN0b3J5OgpQYXRpZW50IGhhcyBhIDQwLXBhY2steWVhciBoaXN0b3J5LCBxdWl0IGluIFsqKjIxMDMqKl0uICBPY2Nhc2lvbmFsCkVUT0gsIG5vbmUgaW4gbW9udGhzLiAgTGl2ZXMgd2l0aCB3aWZlIGFuZCB3b3JrcyBpbiBJVCBhdApbKipOYW1lIChOSSkgODI4ODIqKl0gcG93ZXIgcGxhbnQuCgpGYW1pbHkgSGlzdG9yeToKRmF0aGVyIGhhZCBzdHJva2UgaW4gNzBzLiBNb3RoZXIgaGFkIGNvbGl0aXMuICBTaXN0ZXIgaGFzClsqKk5hbWUyIChOSSkgKipdLXZhbHZ1bGFyIGRpc2Vhc2UuCgpQaHlzaWNhbCBFeGFtOgpWUyAtIDk4LjEsIDEyNS84MiwgNzgsIDE4LCA5NiUgUkEKT3J0aG9zdGF0aWNzCmx5aW5nIDk5LzcwLCA4MwpzaXR0aW5nIDEyMC84MywgODQKc3RhbmRpbmcgMTEyLzc4LCA0NgpHZW46IE5BRC4KSEVFTlQ6IG5vbiBpY3RlcmljLiBFT01JLCBQRVJSTCwgT1AgY2xlYXIuIE5vIHRyYXVtYQpOZWNrOiBubyBqdmQKQ1Y6IFJSUiwgbm8gbS9yL2cKQ2hlc3Q6IENUQQpBYmQ6IG1pbGQgVFRQIGluIGxscSwgcHQgc2F5cyBjaHJvbmljIHNpbmNlIG9wZXJhdGlvbgpFeHQ6IG5vIGVkZW1hClNraW46IG5vIHJhc2gKbmV1cm86IEErT3gzLCBDTiBpbnRhY3QsIFsqKjUtMTkqKl0gc3RyZW5naHQsIE5MIHNlbnNhdGlvbiwgTkwgRiB0byBOLgoyKyBEVFJzIHRocm91Z2hvdXQuIE5MIGJhYmluc2tpLgpQdWxzZXM6ClJpZ2h0OiBEUCAyKwpMZWZ0OiBEUCAyKwpSZWN0YWw6IGd1YWlhYyBuZWdhdGl2ZQoKUGVydGluZW50IFJlc3VsdHM6ClsqKjIxMDYtNC05KipdIDExOjM0UE0gICBDSyhDUEspLTE0MwpbKioyMTA2LTQtOSoqXSAxMTozNFBNICAgQ0stTUItMyBjVHJvcG5ULTAuMDEKWyoqMjEwNi00LTkqKl0gMDM6MThQTSAgIEsrLTQuOQpbKioyMTA2LTQtOSoqXSAwMzoxMFBNICAgR0xVQ09TRS0xMTYqIFVSRUEgTi0yMiogQ1JFQVQtMS4zKiBTT0RJVU0tMTQwClBPVEFTU0lVTS00LjkgQ0hMT1JJREUtMTA4IFRPVEFMIENPMi0yMiBBTklPTiBHQVAtMTUKWyoqMjEwNi00LTkqKl0gMDM6MTBQTSAgIENLKENQSyktMTM5ClsqKjIxMDYtNC05KipdIDAzOjEwUE0gICBjVHJvcG5ULTAuMDMqClsqKjIxMDYtNC05KipdIDAzOjEwUE0gICBDSy1NQi0zClsqKjIxMDYtNC05KipdIDAzOjEwUE0gICBXQkMtNi42IyBSQkMtNC40NyogSEdCLTEyLjEqIEhDVC0zNy4yKiBNQ1YtODMKTUNILTI3LjAgTUNIQy0zMi41IFJEVy0xNC42ClsqKjIxMDYtNC05KipdIDAzOjEwUE0gICBORVVUUy05MC4xKiBMWU1QSFMtNi43KiBNT05PUy0yLjYgRU9TLTAuNgpCQVNPUy0wLjIKWyoqMjEwNi00LTkqKl0gMDM6MTBQTSAgIFBMVCBDT1VOVC0xNDEqClsqKjIxMDYtNC05KipdIDAzOjEwUE0gICBQVC0yMi43KiBQVFQtMjQuOCBJTlIoUFQpLTIuMSoKLgpDVCBIRUFEIFsqKjQtOSoqXToKSU1QUkVTU0lPTjoKMS4gTm8gYWN1dGUgaW50cmFjcmFuaWFsIHByb2Nlc3MuIFN0YWJsZSBmaW5kaW5ncyBvZiBjaHJvbmljCnNtYWxsIHZlc3NlbCBpc2NoZW1pYyBjaGFuZ2VzIGFuZCBvbGQgcHJpb3IgcmlnaHQgY2VyZWJlbGxhcgppbmZhcmN0LgoyLiBTbGlnaHQgcHJvZ3Jlc3Npb24gb2YgcGFuc2ludXMgbXVjb3NhbCB0aGlja2VuaW5nLgpUaGUgc3R1ZHkgYW5kIHRoZSByZXBvcnQgd2VyZSByZXZpZXdlZCBieSB0aGUgc3RhZmYgcmFkaW9sb2dpc3QuCi4KQ1hSIFsqKjQtOSoqXToKT25lIHBvcnRhYmxlIHZpZXcuIFRoZSByaWdodCBjaGVzdCBpcyBub3QgZW50aXJlbHkgaW5jbHVkZWQuCkNvbXBhcmlzb24gaXMKbWFkZSB3aXRoIHRoZSBwcmV2aW91cyBzdHVkeSBvZiBbKioyMTA2LTItMTQqKl0uClRoZXJlIGlzIG1pbmltYWwgc3RyZWFreSBkZW5zaXR5IGF0IHRoZSBsdW5nIGJhc2VzIGNvbnNpc3RlbnQKd2l0aCBzdWJzZWdtZW50YWwgYXRlbGVjdGFzaXMgb3Igc2NhcnJpbmcsIGFzIGJlZm9yZS4gVGhlIGhlYXJ0CmFuZCBtZWRpYXN0aW5hbApzdHJ1Y3R1cmVzIGFyZSB1bmNoYW5nZWQuIFNwaW5hbCBmdXNpb24gaGFyZHdhcmUgcmVtYWlucyBpbgpwbGFjZS4gQSBiaXBvbGFyIHRyYW5zdmVub3VzIHBhY2VtYWtlciBpcyBwcmVzZW50IGFzCmRlbW9uc3RyYXRlZCBlYXJsaWVyLiBUaGVyZSBpcyBubyBhY3V0ZSBjaGFuZ2UuCklNUFJFU1NJT046IE5vIGFjdXRlIGNoYW5nZS4KLgpUVEUgWyoqMjEwNi00LTEyKipdOgpUaGUgbGVmdCBhdHJpdW0gaXMgZGlsYXRlZC4gVGhlcmUgaXMgbWlsZCBzeW1tZXRyaWMgbGVmdAp2ZW50cmljdWxhciBoeXBlcnRyb3BoeSB3aXRoIG5vcm1hbCBjYXZpdHkgc2l6ZS4gVGhlcmUgaXMgc2V2ZXJlCnJlZ2lvbmFsIGxlZnQgdmVudHJpY3VsYXIgc3lzdG9saWMgZHlzZnVuY3Rpb24gd2l0aCBuZWFyCmFraW5lc2lzIG9mIHRoZSBpbmZlcmlvciBhbmQgaW5mZXJvbGF0ZXJhbCB3YWxsIGFuZCBoeXBva2luZXNpcwpvZiB0aGUgbWlkIHRvIGRpc3RhbCBhbnRlcmlvciBzZXB0dW0gYW5kIGFudGVyaW9yIHdhbGwuIFRoZXJlIGlzCm5vIGxlZnQgdmVudHJpY3VsYXIgb3V0ZmxvdyBvYnN0cnVjdGlvbiBhdCByZXN0IG9yIHdpdGgKVmFsc2FsdmEuIFJpZ2h0IHZlbnRyaWN1bGFyIGNoYW1iZXIgc2l6ZSBhbmQgZnJlZSB3YWxsIG1vdGlvbgphcmUgbm9ybWFsLiBUaGVyZSBpcyBhYm5vcm1hbCBzZXB0YWwgbW90aW9uL3Bvc2l0aW9uLiBUaGUgYW9ydGljCnZhbHZlIGxlYWZsZXRzICgzKSBhcmUgbWlsZGx5IHRoaWNrZW5lZCBidXQgYW9ydGljIHN0ZW5vc2lzIGlzCm5vdCBwcmVzZW50LiBUaGUgbWl0cmFsIHZhbHZlIGxlYWZsZXRzIGFyZSBtaWxkbHkgdGhpY2tlbmVkLgpUcml2aWFsIG1pdHJhbCByZWd1cmdpdGF0aW9uIGlzIHNlZW4uIFRoZSB0cmljdXNwaWQgdmFsdmUKbGVhZmxldHMgYXJlIG1pbGRseSB0aGlja2VuZWQuIFRoZSBwdWxtb25hcnkgYXJ0ZXJ5IHN5c3RvbGljCnByZXNzdXJlIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLiBUaGVyZSBpcyBubyBwZXJpY2FyZGlhbAplZmZ1c2lvbi4KCkNvbXBhcmVkIHdpdGggdGhlIHByaW9yIHN0dWR5IChbKipNb250aC9EYXkvWWVhciAqKl0gZWNobyAtIGxpbWl0ZWQgaW1hZ2VzCnJldmlld2VkKSBvZiBbKioyMTA2LTItMTgqKl0sIHRoZSBhYm92ZSBtZW50aW9uZWQgd2FsbCBtb3Rpb24KYWJub3JtYWxpdGllcyB3ZXJlIHByZXNlbnQgaW4gYSBtaWxkZXIgZm9ybSBvbiB0aGUgcHJpb3IgZWNoby4KVGhlIGVqZWN0aW9uIGZyYWN0aW9uIGhhcyBkZWNyZWFzZWQuCi4KVEVFIFsqKjIxMDYtNC0xNCoqXToKTm8gYXRyaWFsIHNlcHRhbCBkZWZlY3QgaXMgc2VlbiBieSAyRCBvciBjb2xvciBEb3BwbGVyLiBUaGVyZSBpcwptaWxkIHJlZ2lvbmFsIGxlZnQgdmVudHJpY3VsYXIgc3lzdG9saWMgZHlzZnVuY3Rpb24gd2l0aCBiYXNhbAp0byBtaWQgaW5mZXJpb3IgaHlwb2tpbmVzaXMuIFJpZ2h0IHZlbnRyaWN1bGFyIGNoYW1iZXIgc2l6ZSBhbmQKZnJlZSB3YWxsIG1vdGlvbiBhcmUgbm9ybWFsLiBUaGVyZSBhcmUgY29tcGxleCAoPjRtbSkgYXRoZXJvbWEKaW4gdGhlIGFvcnRpYyBhcmNoLiBUaGVyZSBhcmUgY29tcGxleCAoPjRtbSkgYXRoZXJvbWEgaW4gdGhlCmRlc2NlbmRpbmcgdGhvcmFjaWMgYW9ydGEuIFRoZSBhb3J0aWMgdmFsdmUgbGVhZmxldHMgKDMpIGFwcGVhcgpzdHJ1Y3R1cmFsbHkgbm9ybWFsIHdpdGggZ29vZCBsZWFmbGV0IGV4Y3Vyc2lvbiBhbmQgbm8gYW9ydGljCnN0ZW5vc2lzLiBObyBtYXNzZXMgb3IgdmVnZXRhdGlvbnMgYXJlIHNlZW4gb24gdGhlIGFvcnRpYyB2YWx2ZS4KTm8gYW9ydGljIHZhbHZlIGFic2Nlc3MgaXMgc2Vlbi4gTm8gYW9ydGljIHJlZ3VyZ2l0YXRpb24gaXMKc2Vlbi4gVGhlIG1pdHJhbCB2YWx2ZSBsZWFmbGV0cyBhcmUgbWlsZGx5IHRoaWNrZW5lZC4gTm8gbWFzcyBvcgp2ZWdldGF0aW9uIGlzIHNlZW4gb24gdGhlIG1pdHJhbCB2YWx2ZS4gTWlsZCAoMSspIG1pdHJhbApyZWd1cmdpdGF0aW9uIGlzIHNlZW4uIE5vIHZlZ2V0YXRpb24vbWFzcyBpcyBzZWVuIG9uIHRoZQpwdWxtb25pYyB2YWx2ZS4gVGhlcmUgaXMgYSB0cml2aWFsL3BoeXNpb2xvZ2ljIHBlcmljYXJkaWFsCmVmZnVzaW9uLgoKSU1QUkVTU0lPTjogR29vZCBxdWFsaXR5IHN0dWR5LiBObyB2YWx2dWxhciB2ZWdldGF0aW9ucyBvcgpwZXJpdmF2bGFyIGFiY2Vzc2VzIHNlZW4uIE5vIHZlZ2V0YXRpb25zIHNlZW4gb24gUkEvUlYgcGFjZXIKbGVhZHMuIE1pbGQgbWl0cmFsIHJlZ3VyZ2l0YXRpb24uIE1pbGQgZm9jYWwgbGVmdCB2ZW50cmljdWxhcgpkeXNmdW5jdGlvbiB3aXRoIGJhc2FsIHRvIG1pZCB3YWxsIGh5cG9raW5lc2lzLiBDb21wYXJlZCB0byB0aGUKdHJhbnN0aG9yYWNpYyBlY2hvIG9mIFsqKjQtMTIqKl0vOSwgdGhlIGFudGVyaW9yIHdhbGwgbW90aW9uIGxvb2tzCm5vcm1hbCBhbmQgdGhlIGluZmVyaW9yIHdhbGwgaXMgbGVzcyBoeXBva2luZXRpYy4KCkJyaWVmIEhvc3BpdGFsIENvdXJzZToKVGhpcyBpcyBhIDY0LXllYXItb2xkIGdlbnRsZW1hbiB3aXRoIG1ldGFzdGF0aWMgUkNDLCBTU1Mgcy9wCnBhY2VtYWtlciwgaGlzdG9yeSBvZiBzZWl6dXJlIHggMSwgd2hvIGlzIHRyYW5zZmVycmVkIGhlcmUgZnJvbQpbKipIb3NwaXRhbDYgMzMqKl0gZm9yIGFuIGVwaXNvZGUgb2Ygc3luY29wZSwgYWdvbmFsCmJyZWF0aGluZywgYW5kIGN5YW5vc2lzLiAgVXBvbiBpbnRlcnJvZ2F0aW9uIG9mIFBQTSwgYXBwZWFycyBhcwp0aG91Z2ggcGF0aWVudCBoYWQgYW4gZXBpc29kZSBvZiBWLVRhY2ggYXQgc3ltcHRvbSBvbnNldC4KLgojKSBTeW5jb3BlL1ZlbnRyaWN1bGFyIFRhY2h5Y2FyZGlhOiBJbml0aWFsbHkgaGlzIHN5bXB0b21zCmFwcGVhcmVkIGNvbnNpc3RlbnQgd2l0aCBjYXJkaWFjIGV0aW9sb2d5IChoaXN0b3J5IG9mIHNpY2sgc2ludXMKc3luZHJvbWUsIG5vIHByb2Ryb21lLCAiImRyb3AgYXR0YWNrLCIiIGN5YW5vc2lzKS4gIEFjY29yZGluZyB0bwpFUCwgaGlzIHBhY2VybWFrZXIgd2FzIGZ1bmN0aW9uaW5nIG5vcm1hbGx5LCBidXQgdGhlcmUgd2FzCmNvbmNlcm4gdGhhdCBoZSBtYXkgaGF2ZSBhbiBhbiBlY3RvcGljIGZvY3VzIHBvc3NpYmx5IG5lYXIgbGVmdApjb3JvbmFyeSwgY2F1c2luZyBkeXNyaHl0aG1pYS4gIFRoZSBpbml0aWFsIHBsYW4gd2FzIGZvciBoaW0gdG8KdW5kZXJnbyBhbiBFUCBzdHVkeSwgaG93ZXZlciBvdmVyIHRoZSB3ZWVrZW5kIHByaW9yIHRvIGhpcyBFUApzdHVkeSwgaGUgZGV2ZWxvcGVkIGZldmVycywgcmlnb3JzLCBhbmQgYSBuZXcgcmFzaC4gSGUgd2FzCmZlYnJpbGUgdG8gMTA0LCB0YWNoeWNhcmRpYyB0byAxMjBzLCBhbmQgYmVjYW1lIGh5cG90ZW5zaXZlLiBUaGUKcmFzaCBvbiBoaXMgYXJtcyBhcHBlYXJlZCBhdCB0aGUgc2l0ZXMgb2YgdmVuaXB1bmN0dXJlLiAgVGhhdAphZnRlcm5vb24gaGUgd2FzIHRyYW5zZmVycmVkIHRvIHRoZSBJQ1UgZm9yIGZ1cnRoZXIgbWFuYWdlbWVudC4KSW4gdGhlIElDVSBoZSBpbml0aWFsbHkgcmVxdWlyZWQgcHJlc3NvcnMsIGFuZCBoaXMgYmxvb2QKY3VsdHVyZXMgYmVjYW1lIHBvc2l0aXZlIGZvciBbKipMYXN0IE5hbWUgKExGKSA4OTc0KipdLCBbKipGaXJzdCBOYW1lMyAoTEYpICoqXSBoaXMgYW50aWJpb3RpYyBjb3ZlcmFnZQp3YXMgY2hhbmdlZCB0byBuYWZjaWxsaW4uICBIb3dldmVyLCBkdXJpbmcgaGlzIHN0YXkgaW4gdGhlIElDVQp3aGVuIGhlIGJlY2FtZSBmZWJyaWxlLCBoZSB3b3VsZCBnbyBpbnRvIHZlbnRyaWN1bGFyCnRhY2h5Y2FyZGlhLCBiZWNvbWUgaHlwZXJ0ZW5zaXZlIGFuZCByZXF1aXJlZCBlc21vbG9sIGRyaXBzLgpBZnRlciB0aGUgcGF0aWVudCBkZWZlcnZlc2NlZCBpbiB0aGUgSUNVLCBoZSBoYWQgbm8gZnVydGhlcgplcGlzb2RlcyBvZiB2ZW50cmljdWxhciB0YWNoeWNhcmRpYS4gIEluIHRoZSBJQ1UgaGUgd2FzIGFsc28Kc3RhcnRlZCBvbiBhbWlvZGFyb25lIGFuZCBtZXRvcHJvbG9sIGZvciB0aGUgdmVudHJpY3VsYXIKdGFjaHljYXJkaWEuICBBZnRlciBoZSB3YXMgd2VsbCBlbm91Z2ggdG8gbGVhdmUgdGhlIElDVSwgRVAgZGlkCm5vdCBmZWVsIHRoYXQgaGUgbmVlZGVkIGFuIEVQLCBiZWNhdXNlIHRoZXkgYmVsaWV2ZWQgdGhhdCBoaXMKdmVudHJpY3VsYXIgdGFjaHljYXJkaWEgd2FzIGFsbCBpbiB0aGUgc2V0dGluZyBvZiBoaXMgc2Vwc2lzLgpBdCB0aGUgdGltZSBvZiBkaXNjaGFyZ2UgaGUgd2FzIHNlbnQgaG9tZSBvbiBhbiBvcmFsIGFtaW9kYXJvbmUKcmVnaW1lbiB0byBjb21wbGV0ZSBoaXMgbG9hZGluZywgYW5kIHRoZW4gb24gbWFpbnRlbmFuY2UKYW1pb2Rhcm9uZSwgY29udGludWVkIG9uIG1ldG9wcm9sb2wgYW5kIHdvdWxkIHNlZSBoaXMgb3V0cGF0aWVudApjYXJkaW9sb2dpc3QgYWJvdXQgYW4gSUNEIHBsYWNlbWVudCBzaXggd2Vla3MgYWZ0ZXIgZGlzY2hhcmdlLgouCiMgU2Vwc2lzL0NlbGx1bGl0aXM6IHdoZW4gaGUgYmVjYW1lIGZlYnJpbGUgYW5kIGh5cG90ZW5zaXZlLCBoZQphbHNvIGRldmVsb3BlZCBhcmVhcyBvZiBlcnl0aGVtYSBhbmQgaW5kdXJhdGlvbiBhcm91bmQgdGhlIHNpdGVzCm9mIHByaW9yIHZlbmlwdW5jdHVyZSwgYW5kIGhlIHdhcyB0cmFuc2ZlcnJlZCB0byB0aGUgSUNVIGZvcgpmdXJ0aGVyIG1hbmFnZW1lbnQuICBCbG9vZCBjdWx0dXJlcyB0aGVuIGJlY2FtZSBwb3NpdGl2ZSBpbiBbKioyLTE4KipdCmJvdHRsZXMgZm9yIFsqKkRhdGUgUmFuZ2UgODk3NCoqXS4gIEhlIHdhcyBzdGFydGVkIG9uIG5hZmNpbGxpbiBhZnRlciB0aGUKc2Vuc2l0aXZpdGllcyByZXR1cm5lZC4gIEluZmVjdGlvdXMgZGlzZWFzZSB3YXMgY29uc3VsdGVkIGFuZApyZWNvbW1lbmRlZCBhIDQgd2VlayBjb3Vyc2Ugb2YgSVYgYW50aWJpb3RpY3MgZHVlIHRvIGhpcwpiYWN0ZXJlbWlhIGNvbXBsaWNhdGVkIGJ5IHNlcHRpYyB0aHJvbWJvcGhsZWJpdGlzLiAgSGFuZCBzdXJnZXJ5CndhcyBjb25zdWx0ZWQgZm9yIGV2YWx1YXRpb24gb2YgdGhlIHNlcHRpYyB0aHJvbWJvcGhsZWJpdGlzIG9mCmhpcyBoYW5kLCBhbiB1bHRyYXNvdW5kIHdhcyBkb25lIHRoYXQgc2hvd2VkIG9ubHkgc3VwZXJmaWNpYWwKaW52b2x2ZW1lbnQsIGFuZCB0aGV5IHJlY29tbWVuZGVkIGNvbnNlcnZhdGl2ZSBtYW5hZ2VtZW50LgoKIyBSQ0M6ICBUaGUgcGF0aWVudCdzIHByaW1hcnkgb25jb2xvZ2lzdCB3YXMgY29udGFjdFsqKk5hbWUgKE5JKSAqKl0gd2hvCnN1Z2dlc3RlZCB0aGF0IHRoZSBwYXRpZW50J3Mgbm9ybWFsIGNoZW1vdGhlcmFweSBiZSBoZWxkIHVudGlsCmhlIHdhcyB3ZWxsIGVub3VnaCB0byByZXN0YXJ0IGFzIGFuIG91dHBhdGllbnQuCgojIEFGSUI6ICBQYXRpZW50IHdhcyBpbml0aWFsbHkgbWFpbnRhaW5lZCBvbiBhIEJCIChhdCBhCmRlY3JlYXNlZCBkb3NlKSBhbmQgY291bWFkaW4gd2hpbGUgb24gdGhlIGNhcmRpb2xvZ3kgc2VydmljZS4KSGlzIGNvdW1hZGluIHdhcyBzdG9wcGVkIGFuZCBoaXMgSU5SIHJldmVyc2VkIGluIGFudGljaXBhdGlvbiBvZgpoaXMgRVAgc3R1ZHksIHRoZW4gaGlzIGNvdW1hZGluIGNvbnRpbnVlZCB0byBiZSBoZWxkIHRocm91Z2ggaGlzCklDVSBjb3Vyc2UsIGhpcyBjb3VtYWRpbiB3YXMgcmVzdGFydGVkIHByaW9yIHRvIGRpc2NoYXJnZS4KLgojIEhUTjogIFBhdGllbnQgd2FzIGNvbnRpbnVlZCBvbiBsaXNpbm9wcmlsIGFuZCBtZXRvcHJvbG9sLAp0aG91Z2ggdGhpcyB3YXMgZGlzY29udGludWVkIHVwb24gYWRtaXNzaW9uIHRvIHRoZSBNSUNVLgpNZXRvcHJvbG9sIHdhcyByZXN0YXJ0ZWQgYXMgaGlzIGJsb29kIHByZXNzdXJlIHRvbGVyYXRlZC4KLgojIFRocm9tYm9jeXRvcGVuaWE6IER1cmluZyBoaXMgY291cnNlIGluIHRoZSBNSUNVLCB0aGUgcGF0aWVudCdzCnBsYXRlbGV0cyBncmFkdWFsbHkgdHJlbmRlZCBkb3duIHRvIGEgbmFkaXIgb2YgNjYgZnJvbSBhbgphZG1pc3Npb24gbGV2ZWwgb2YgMTQxLiAgQSBISVQgYW50aWJvZHkgd2FzIHNlbnQgdGhhdCB3YXMKbmVnYXRpdmUsIGFuZCBoZSBjbGluaWNhbGx5IGltcHJvdmVkIGhpcyBwbGF0ZWxldCBjb3VudAppbmNyZWFzZWQgYW5kIGhhZCByZXR1cm5lZCB0byB0aGUgbm9ybWFsIHJhbmdlIGJ5IHRoZSB0aW1lIG9mCmRpc2NoYXJnZS4KLgojIEh5cG90aHlyb2lkOiAgSG9tZSBzeW50aHJvaWQgd2FzIGNvbnRpbnVlZC4KLgoKTWVkaWNhdGlvbnMgb24gQWRtaXNzaW9uOgpCZXZhY2l6dW1hYiAoQXZhc3RpbikgMTBtZy9rZyBxMndrcy4KQ2l0YWxvcHJhbSAyMG1nIFBPIGRhaWx5CkZsdXRpY2Fzb25lIDUwbWNnIFsqKkhvc3BpdGFsMSAqKl0KR2VtZmlicm96aWwgNjAwbWcgUE8gZGFpbHkKTGV2b3RoeXJveGluZSA4OG1jZyBQbyBkYWlseQpsaXNpbm9wcmlsIDIwbWcgUE8gZGFpbGl5Ck1ldG9ycG9sb2wgc3VjY2luYXRlIDEwMG1nIFBPIGRhaWx5Ck1pcnRhemFwaW5lIDE1bWcgUE8gcXBtClRlbXNpcm9saW11cyAoVG9yaXNlbCkgMjVtZyBJViB3ZWVrbHkgKHJlc3VtZWQgWyoqMjEwNi0yLTIzKipdKQpXYXJmYXJpbiAzbWcgZGFpbHkgZXhjZXB0IGZvciA0bWcgTW9uZGF5LCBUaHJ1c2RheS4Kem9scGlkZW0gMTBtZyBQTyBxcG0KY29sYWNlCmdsdWNvc2FtaW5lIGNob25kcmlvdGluCmhleGV0aWRpbmUKaWJ1cHJvZmVuIDIwMG1nIFBPIHE2aCBwcm4KTGVjaXRoaW4gMTIwMG1nIFBPIGRhaWx5Cm9tZWdhIDMgZmF0dHkgYWNpZCAzNjBtZy0xMjAwbWcgUE8gZGFpbHkKUHJhc3Rlcm9uZSAoREhFQSkgNTBtZyBQTyBkYWlseQpTZWxlbml1bSAyMDBtY2cgUE8gZGFpbHkKVml0YW1pbiBFIDQwMCB1bml0IFBPIGRhaWx5CgoKRGlzY2hhcmdlIERpc3Bvc2l0aW9uOgpIb21lIFdpdGggU2VydmljZQoKRmFjaWxpdHk6ClsqKkhvc3BpdGFsMyAqKl0gVk5BCgpEaXNjaGFyZ2UgRGlhZ25vc2lzOgpQcmltYXJ5OgoxLiBbKipIb3NwaXRhbDMgODk3NCoqXSBCYWN0ZXJlbWlhIGNvbXBsaWNhdGVkIGJ5IHN1cGVyZmljaWFsIHRocm9tYm9waGxlYml0aXMKMi4gU3VzdGFpbmVkIHZlbnRyaWN1bGFyIHRhY2h5Y2FyZGlhCi4KU2Vjb25kYXJ5OgoxLiAgSHlwZXJ0ZW5zaW9uCjIuICBNZXRhc3RhdGljIHBhcGlsbGFyeSByZW5hbCBjZWxsIGNhbmNlciBvbiBjaGVtbyAoaW5pdGlhbGx5CmRpYWdub3NlZCBbKioyMTAzKipdKQozLiAgc3luY29wZSwgU1NTIHMvcCBwYWNlciAoREREKSBpbiBbKioyMDkxKipdLCBnZW5lcmF0b3IgY2hhbmdlIGluClsqKjIwOTIqKl0KNC4gIFBBRgo1LiAgQSBmbHV0dGVyIHMvcCBhYmxhdGlvbgoKCkRpc2NoYXJnZSBDb25kaXRpb246Ck1lbnRhbCBTdGF0dXM6IENsZWFyIGFuZCBjb2hlcmVudApMZXZlbCBvZiBDb25zY2lvdXNuZXNzOiBBbGVydCBhbmQgaW50ZXJhY3RpdmUKQWN0aXZpdHkgU3RhdHVzOiBBbWJ1bGF0b3J5IC0gSW5kZXBlbmRlbnQKCgpEaXNjaGFyZ2UgSW5zdHJ1Y3Rpb25zOgpEZWFyIE1yLiBbKipLbm93biBsYXN0bmFtZSA3MTQzMCoqXSwKSXQgd2FzIGEgcGxlYXN1cmUgdGFraW5nIGNhcmUgb2YgeW91IG9uIHRoaXMgYWRtaXNzaW9uLiAgWW91CndlcmUgdHJhbnNmZXJyZWQgdG8gWyoqSG9zcGl0YWwxIDE4KipdIGZyb20gYW4gb3V0c2lkZSBob3NwaXRhbCBiZWNhdXNlIG9mCnN5bmNvcGUgYW5kIG5hdXNlYS4gIFlvdSBtb3N0IGxpa2VseSBoYWQgYSBoZWFydCBhcnJ5dGhtaWEsCndoaWNoIGNhdXNlZCB5b3UgdG8gbG9zZSBjb25zY2lvdXNuZXNzLiAgU2hvcnRseSBhZnRlciB5b3VyCmFkbWlzc2lvbiB5b3Ugd2VyZSBmb3VuZCB0byBoYXZlIGEgZmV2ZXIsIGFyZWFzIG9mIHJlZG5lc3Mgb24KeW91ciByaWdodCBoYW5kL2xlZnQgYXJtIGFuZCB0aGVuIGhhZCBibG9vZCBjdWx0dXJlcyB0aGF0IHNob3dlZApiYWN0ZXJpYSBncm93aW5nIGluIHlvdXIgYmxvb2Qgc3RyZWFtLiAgWW91IHdlcmUgdGhhbgp0cmFuc2ZlcnJlZCB0byB0aGUgSUNVIGZvciBjbG9zZXIgbW9uaXRvcmluZywgYW5kIHlvdSBhbHNvCm5lZWRlZCBtZWRpY2F0aW9ucyB0byBoZWxwIGtlZXAgeW91ciBibG9vZCBwcmVzc3VyZSBpbiB0aGUKbm9ybWFsIHJhbmdlLiAgV2hpbGUgaW4gdGhlIElDVSB3aGVuIHlvdSBoYWQgYSBmZXZlciBpdCB3YXMKZm91bmQgdGhhdCB5b3VyIGhlYXJ0IHdlbnQgaW50byBhbiBhYm5vcm1hbCByaHl0aG0gY2FsbGVkCnZlbnRyaWN1bGFyIHRhY2h5Y2FyZGlhLiAgVG8gaGVscCB0cmVhdCB0aGlzIHJoeXRobSB5b3Ugd2VyZQpzdGFydGVkIG9uIHR3byBuZXcgbWVkaWNhdGlvbnMsIGFtaW9kYXJvbmUgYW5kIG1ldG9wcm9sb2wuICBUaGUKZWxlY3Ryb3BoeXNpb2xvZ2lzdHMgKGhlYXJ0IHJoeXRobSBkb2N0b3JzKSBzYXcgeW91IGFuZCBmZWx0CnRoYXQgdGhlIGFibm9ybWFsIGhlYXJ0IHJoeXRobSB3YXMgbGlrZWx5IHJlbGF0ZWQgdG8gdGhlCmluZmVjdGlvbi4gIEFmdGVyIHlvdSBmaW5pc2ggeW91ciBjb3Vyc2Ugb2YgYW50aWJpb3RpY3MgZm9yIHRoZQpiYWN0ZXJpYSBpbiB5b3VyIGJsb29kc3RyZWFtLCB5b3Ugd2lsbCBmb2xsb3cgdXAgd2l0aCBEci4KWyoqTGFzdCBOYW1lIChTVGl0bGUpIDEyMCoqXSB0byBkaXNjdXNzIHB1dHRpbmcgaW4gYSBkZWZpYnJpbGxhdG9yLgouClRoZSBmb2xsb3dpbmcgY2hhbmdlcyB3ZXJlIG1hZGUgdG8geW91ciBtZWRpY2F0aW9uczoKMS4gU1RBUlQgdGFraW5nIG1ldG9wcm9sb2wgMTIuNW1nIHRocmVlIHRpbWVzIHBlciBkYXkgaW5zdGVhZCBvZgpUb3Byb2wgWEwgMTAwbWcKMi4gU1RBUlQgYW1pb2Rhcm9uZSA0MDBtZyBhIGRheSBmb3Igb25lIHdlZWssIHRoZW4gY2hhbmdlIHRvCjIwMG1nIGEgZGF5IGZyb20gdGhlbiBvbgozLiBERUNSRUFTRUQgd2FyZmFyaW4gZG9zZSB0byAzbWcgZGFpbHkgYXMgeW91IGFyZSBvbiBuZXcKbWVkaWNhdGlvbnMgdGhhdCBjYW4gaW50ZXJhY3Qgd2l0aCB3YXJmYXJpbgo0LiBTVEFSVEVEIExvcGVyYW1pZGUgMm1nIGV2ZXJ5IDQgaG91cnMgYXMgbmVlZGVkIGZvciBkaWFycmhlYQouClBsZWFzZSB0YWtlIGFsbCBvZiB5b3VyIG1lZGljYXRpb25zIGFzIHByZXNjcmliZWQuICBQbGVhc2Uga2VlcAphbGwgb2YgeW91ciBmb2xsb3ctdXAgYXBwb2ludG1lbnRzLgouClJldHVybiB0byB0aGUgaG9zcGl0YWwgaWYgeW91IGRldmVsb3AgY2hlc3QgcGFpbiwgc2hvcnRuZXNzIG9mCmJyZWF0aCwgc3luY29wZSBvciBuZWFyIHN5bmNvcGUsIGhlYWRhY2hlLCBuYXVzZWEsIHZvbWl0aW5nLApkaWFycmhlYSwgYnJpZ2h0IHJlZCBibG9vZCBpbiB1cmluZSBvciBzdG9vbCwgZmV2ZXJzLCBjaGlsbHMsIG9yCmFueSBvdGhlciBjb25jZXJuaW5nIHNpZ25zIG9yIHN5bXB0b21zLgoKRm9sbG93dXAgSW5zdHJ1Y3Rpb25zOgpEZXBhcnRtZW50OiBJTkZFQ1RJT1VTIERJU0VBU0UKV2hlbjogRlJJREFZIFsqKjIxMDYtNS03KipdIGF0IDEwOjAwIEFNCldpdGg6IFsqKkZpcnN0IE5hbWUxMSAoTmFtZSBQYXR0ZXJuMSkgKipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm40KSAyODgqKl0sIE1EIFsqKlRlbGVwaG9uZS9GYXggKDEpIDQ1NyoqXQpCdWlsZGluZzogTE0gWyoqSG9zcGl0YWwgV2FyZCBOYW1lICoqXSBCbGRnIChbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgKipdKSBbKipIb3NwaXRhbCAxNDIyKipdCkNhbXB1czogV0VTVCAgICAgQmVzdCBQYXJraW5nOiBbKipIb3NwaXRhbCBXYXJkIE5hbWUgKipdIEdhcmFnZQoKRGVwYXJ0bWVudDogQ0FSRElBQyBTRVJWSUNFUwpXaGVuOiBUVUVTREFZIFsqKjIxMDYtNS0xOCoqXSBhdCAyOjMwIFBNCldpdGg6ICBERVZJQ0UgQ0xJTklDIFsqKlRlbGVwaG9uZS9GYXggKDEpIDYyKipdCkJ1aWxkaW5nOiBTQyBbKipIb3NwaXRhbCBXYXJkIE5hbWUgMjMqKl0gQ2xpbmljYWwgQ3RyIFsqKkxvY2F0aW9uICh1bikgKipdCkNhbXB1czogRUFTVCAgICAgQmVzdCBQYXJraW5nOiBbKipIb3NwaXRhbCBXYXJkIE5hbWUgMjMqKl0gR2FyYWdlCgpEZXBhcnRtZW50OiBDQVJESUFDIFNFUlZJQ0VTCldoZW46IFRVRVNEQVkgWyoqMjEwNi01LTE4KipdIGF0IDM6MDAgUE0KV2l0aDogWyoqRmlyc3QgTmFtZTExIChOYW1lIFBhdHRlcm4xKSAxMjUqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDEyNioqXSwgTS5ELiBbKipUZWxlcGhvbmUvRmF4ICgxKSA2MioqXQpCdWlsZGluZzogU0MgWyoqSG9zcGl0YWwgV2FyZCBOYW1lIDIzKipdIENsaW5pY2FsIEN0ciBbKipMb2NhdGlvbiAodW4pICoqXQpDYW1wdXM6IEVBU1QgICAgIEJlc3QgUGFya2luZzogWyoqSG9zcGl0YWwgV2FyZCBOYW1lIDIzKipdIEdhcmFnZQoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyoqRmlyc3QgTmFtZTExIChOYW1lIFBhdHRlcm4xKSAqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDgxMCoqXSBNRCwgWyoqTUQgTnVtYmVyKDMpIDgxMSoqXQoKIgo='
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxOTEtNy0xNSoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjE5MS03LTIyKipdIERhdGUgb2YgQmlydGg6IFsqKjIxMzYtOC0yMSoqXSBTZXg6IE0gU2VydmljZTogTUVESUNJTkUgQWxsZXJnaWVzOiBQYXRpZW50IHJlY29yZGVkIGFzIGhhdmluZyBObyBLbm93biBBbGxlcmdpZXMgdG8gRHJ1Z3MgQXR0ZW5kaW5nOlsqKkZpcnN0IE5hbWUzIChMRikgNDY1KipdIENoaWVmIENvbXBsYWludDogc2hvcnRuZXNzIG9mIGJyZWF0aCBNYWpvciBTdXJnaWNhbCBvciBJbnZhc2l2ZSBQcm9jZWR1cmU6IE5vbmUgSGlzdG9yeSBvZiBQcmVzZW50IElsbG5lc3M6IDU0IHkvbyBNIHdpdGggYSBQTUh4IG9mIENPUEQsIDYwIHBhY2sgeWVhciB0b2IgaHgsIGFuZCBzY2hpem9waHJlbmlhIHByZXNlbnRlZCB0byBbKipIb3NwaXRhbDEgMTgqKl0gd2l0aCBwcm9ncmVzc2l2ZSBTT0IgYW5kIGR5c3BuZWEuIFB0IHN0YXRlcyB0aGF0IGhpcyBzeCdzIGluaXRpYWxseSBiZWdhbiAyIHdlZWtzIGFnbyBhbmQgaGF2ZSBzdGVhZGlseSB3b3JzZW5lZC4gSGUgYWRtaXRzIHRvIGEgZHJ5IGNvdWdoLCB3aXRoIHN1YmplY3RpdmUgZmV2ZXJzLCBidXQgbm8gZG9jdW1lbnRlZCBlbGV2YXRlZCB0ZW1wZXJhdHVyZS4gTm8gcHJvZCBjb3VnaCBvciBzcHV0dW0gcHJvZHVjdGlvbi4gTm8gc2ljayBjb250YWN0cy4gWyoqTmFtZSAoTkkpICoqXSBkZW5pZXMgYW55IFBORCwgb3J0aG9wbmVhLCBvciBMRSBlZGVtYS4gSGlzIHN4J3Mgd29yc2VuZWQgdG8gdGhlIHBvaW50IHdoZXJlIGhlIHdhcyBoYXZpbmcgZGlmZmljdWx0eSBicmVhdGhpbmcgYXQgcmVzdCBhbmQgaGUgY2FsbGVkIEVNUy4gSGUgd2FzIGZvdW5kIHRvIGJlIGJyZWF0aGluZyBpbiB0aGUgNDBzIGFuZCA5MCUgb24gUkEuIEhlIHdhcyBnaXZlbiBhIENvbWJpdmVudCBuZWIgZW4gcm91dGUgYW5kIGJyb3VnaHQgdG8gWyoqSG9zcGl0YWwxICoqXS4gLiBJbiB0aGUgRUQsIGhlIHJlY2VpdmVkIFNvbHVtZWRyb2wgMTI1bWcgSVYgeDEsIExldmFxdWluIDc1MG1nIElWIHgxLCBBbGJ1dGVyb2wgbmVicyB4MiwgQ29tYml2ZW50IG5lYnMgeDEgYW5kIHdhcyBpbml0aWFsbHkgcGxhY2VkIG9uIEJpUGFQIGJ1dCBoZSBkaWQgbm90IHRvbGVyYXRlIHRoaXMgYW5kIHdhcyBwbGFjZWQgYmFjayBvbiBhIE5SQiBwcmlvciB0byBhcnJpdmFsIGluIHRoZSBNSUNVLiAuIE1JQ1UgY291cnNlIHNpZ25pZmljYW50IGZvciBwcm9ncmVzc2l2ZSB3ZWFuaW5nIG9mZiBCaVBhUC4gTmV2ZXIgaW50dWJhdGVkLiBDWFJzIGRpZCBub3QgZGVtb25zdHJhdGUgYW55IGNvbnNvbGlkYXRpb24gYnV0IGYvdSBDVCBkZW1vbnN0cmF0ZWQgZW1waHlzZW1hdG91cyBsdW5nIHdpdGggYXJlYXMgb2YgZ3JvdW5kIGdsYXNzIG9wYWNpdHkgYW5kIGZvY2FsIG5vZHVsYXJpdHkuIFBhc3QgTWVkaWNhbCBIaXN0b3J5OiAoMSkgQ09QRDsgbm8gaHggb2YgaW50dWJhdGlvbiBvciBob3NwaXRhbGl6YXRpb24gKDIpIFNjaGl6b3BocmVuaWEgKDMpIGh4IG9mIEV0b2ggYWJ1c2UsIHF1aXQgMyB5ZWFycyBhZ28gKDQpIDYwIHBhY2sgeWVhciBzbW9wa2luZyBoeCwgcXVpdCAzIHdlZWtzIGFnbyBTb2NpYWwgSGlzdG9yeTogNjAgcGFjayB5ZWFyIHRvYiBoeC4gSHggb2YgZXRvaCBhYnVzZSwgbm93IHNvYmVyLiBEZW5pZXMgYW55IElWRFUuIE9uIGRpc2FiaWxpdHkgZHVlIHRvIHNjaGl6b3BocmVuaWEuIExpdmVzIGFsb25nIGF0IGJvYXJkaW5nIGhvdXNlIG9uIEJlYWNvbiBTdC4gRmFtaWx5IEhpc3Rvcnk6IG5vIGZhbSBoeCBvZiBsdW5nIGRpc2Vhc2UsIG9yIENBIFBoeXNpY2FsIEV4YW06IFZTOiBUZW1wOiA5Ny4xIG9yYWwgQlA6MTc0Lzk0IEhSOjkwIFJSOjIyIE8yc2F0OiA5NiVSQSBHRU46IE9iZXNlIG1hbGUsIGluIG1pbGQgcmVzcCBkaXN0cmVzcywgYWJsZSB0byBzcGVhayBpbiBzaG9ydCBzZW50ZW5jZXMgd2l0aG91dCBkeXNwbmVhIEhFRU5UOiBQRVJSTEEsIEVPTUksIGFuaWN0ZXJpYywgTU1NLCBvcCB3aXRob3V0IGxlc2lvbnMgTkVDSzogRGlmZmljdWx0IHRvIGFzc2VzcywgYnV0IG5vIGFwcGFyZW50IEpWRCBSRVNQOiBTY2F0dGVyZWQgcmhvbmNoaSBkaWZmdXNlbHkgYnV0IG5vIHdoZWV6ZXMgb3IgcmFsZXMgYXBwcmVjaWF0ZWQgd2l0aCBtYXJnaW5hbCBpbnNwaXJhdG9yeSBlZmZvcnQuIE5vIHJldHJhY3Rpb25zLCBub3QgdXNpbmcgYWNjZXNzb3J5IG11c2NsZXMgdG8gaW5zcGlyZSwgbm8gYWJkIGJyZWF0aGluZy4gTm8gZHVsbG5lc3MgdG8gcGVyY3Vzc2lvbiBDVjogRGlzdGFudCBoZWFydCBzb3VuZHMsIGJ1dCBhcHBlYXJzIHJlZ3VsYXIgd2l0aG91dCBtdXJtdXJzLiBBQkQ6IE9iZXNlLCBuZCwgK2Ivcywgc29mdCwgbnQsIG5vIEhTTSBhcHByZWNpYXRlZCBFWFQ6IG5vIGMvYy9lIE5FVVJPOiBBQU94My4gTW92ZXMgYWxsIGV4dC4gUGVydGluZW50IFJlc3VsdHM6IFsqKjIxOTEtNy0xNSoqXSAuIFdCQy03LjggUkJDLTQuNzIgSGdiLTE1LjUgSGN0LTQwLjcgTUNWLTg2IE1DSC0zMi44KiBNQ0hDLTM4LjAqIFJEVy0xMi43IFBsdCBDdC0xODAgLiBHbHVjb3NlLTEzNSogVXJlYU4tMTcgQ3JlYXQtMC44IE5hLTEyMSogSy00LjAgQ2wtODgqIEhDTzMtMjUgQW5HYXAtMTIgLiBDSyhDUEspLTE3NDgqLCBNQiBJbmR4LTEuMSwgY1Ryb3BuVC08MC4wMSAuIFR5cGUtQVJUIEZpTzItOTggcE8yLTE2OSogcENPMi00NCBwSC03LjM1IGNhbFRDTzItMjUgQmFzZSBYUy0tMSBBQURPMi00ODMgUkVRIE8yLTgyIEludHViYXQtTk9UIElOVFVCQSBDb21tZW50LU5FQlVMSVpFUiAuIFsqKjIxOTEtNy0xOCoqXSAuIFdCQy0yMy40KiBSQkMtNC4wOSogSGdiLTEzLjIqIEhjdC0zNi41KiBNQ1YtODkgTUNILTMyLjIqIE1DSEMtMzYuMSogUkRXLTEzLjEgUGx0IEN0LTI1NCAuIFsqKjIxOTEtNy0yMioqXSAuIFdCQy0xNC41KiBSQkMtNC45MCBIZ2ItMTUuNyBIY3QtNDQuNCBNQ1YtOTEgTUNILTMyLjAgTUNIQy0zNS40KiBSRFctMTIuNCBQbHQgQ3QtMzU3IC4gR2x1Y29zZS04OSBVcmVhTi0xNyBDcmVhdC0wLjcgTmEtMTI2KiBLLTMuNyBDbC04OSogSENPMy0yOCBBbkdhcC0xMyAuIENLKENQSyktMTMwIC4gVFNILTAuMzMgRUtHIFsqKjctMTUqKl06IE5TUiA5Ny4gK0xBRCwgbm1sIGludGVydmFscy4gTm8gU1QgZWxldmF0aW9ucy8gZGVwcmVzc2lvbnMuIE5vIFRXSXMuIE5tbCBFS0cgLSBubyBwcmV2aW91cyB0byBjb21wYXJlLiAuIEltYWdpbmc6IC4gQ1RBIENoZXN0IFsqKjctMTgqKl06IDEpIE5vIHB1bG1vbmFyeSBlbWJvbGlzbSBpcyBpZGVudGlmaWVkLiBObyBwdWxtb25hcnkgaW5mYXJjdGlvbiBpcyBub3RlZC4gMikgTXVsdGlwbGUgbm9uLXBhdGhvbG9naWNhbGx5IGVubGFyZ2VkIG5vZGVzIGFyZSBub3RlZCB3aXRoaW4gdGhlIG1lZGlhc3RpbnVtLiAzKSBNdWx0aXBsZSBpbGxkZWZpbmVkIGFyZWFzIG9mIGdyb3VuZCBnbGFzcyBvcGFjaXR5IGFyZSBzY2F0dGVyZWQgaW4gYWxsIGxvYmVzIG9mIGJvdGggbHVuZ3MuIEFkZGl0aW9uYWwgc2NhdHRlcmVkIHNtYWxsIG5vZHVsYXIgZGVuc2l0aWVzIGFyZSBwcmVzZW50LiBPdmVyYWxsIGZpbmRpbmdzIGFyZSBub25zcGVjaWZpYy4gRGlmZmVyZW50aWFsIGRpYWdub3NlcyBpbmNsdWRlIGluZmxhbW1hdG9yeS9pbmZlY3Rpb3VzIHByb2Nlc3MsIENPUCAoY3J5cHRvZ2VuaWMgb3JnYW5pemluZyBwbmV1bW9uaWEpLCBlb3Npbm9waGlsaWMgcG5ldW1vbmlhcyAuIENvcnJlbGF0ZSBjbGluaWNhbGx5LCB3aXRoIGxhYiBkYXRhIGFuZCBmb2xsb3cgdXAgLiBMRSBWZW5vdXMgRG9wcGxlcnMgWyoqNy0xOCoqXSBGSU5ESU5HUzogR3JheXNjYWxlIGFuZCBEb3BwbGVyIHNvblsqKk5hbWUgKE5JKSAxNDE3KipdIG9mIGJpbGF0ZXJhbCBjb21tb24gZmVtb3JhbCwgc3VwZXJmaWNpYWwgZmVtb3JhbCwgcG9wbGl0ZWFsLCBhbmQgY2FsZiB2ZWlucyB3ZXJlIHBlcmZvcm1lZC4gVGhlcmUgaXMgbm9ybWFsIGNvbXByZXNzaWJpbGl0eSwgZmxvdywgYW5kIGF1Z21lbnRhdGlvbi4gLiBJTVBSRVNTSU9OOiBObyBldmlkZW5jZSBvZiBEVlQgYmlsYXRlcmFsbHkuIC4gQnJpZWYgSG9zcGl0YWwgQ291cnNlOiA1NCB5L28gTSB3aXRoIGEgUE1IeCBvZiBDT1BELCBzY2hpem9waHJlbmlhIHByZXNlbnRlZCB0byBbKipIb3NwaXRhbDEgMTgqKl0gd2l0aCBwcm9ncmVzc2l2ZSBTT0IgYW5kIGR5c3BuZWEgeCAyIHdlZWtzLCBhL3cgc3Viai4gZmV2ZXJzL3N3ZWF0cy9kaWFycmhlYS4gVGhpcyBpcyBsaWtlbHkgZHVlIGEgQ09QRCBleGFjZXJiYXRpb24gYnJvdWdodCBvbiBieSBhIG1pbGQgaW5mZWN0aW9uLiAuIDEuIENPUEQgZXhhY2VyYmF0aW9uIFRoZSBwYXRpZW50J3Mgc2hvcnRuZXNzIG9mIGJyZWF0aCBhbmQgZHlzcG5lYSB3ZXJlIGZlbHQgdG8gYmUgZHVlIHRvIGEgQ09QRCBleGFjZXJiYXRpb24sIGdpdmVuIHRoZSBoaXN0b3J5IG9mIHN1YmplY3RpdmUgZmV2ZXJzL2NoaWxscyBhbmQgZGlhcnJoZWEuIEluIHRoZSBNSUNVIGhlIHdhcyBwbGFjZWQgb24gc3Rlcm9pZHMgKHNvbHVtZWRyb2wpLCBhbnRpYmlvdGljcyAoYXppdGhybyksIG5lYnVsaXplcnMsIGFuZCBzdXBwbGVtZW50YWwgb3h5Z2VuLiBIZSByZXNwb25kZWQgcXVpdGUgd2VsbCBhbmQgbmV2ZXIgcmVxdWlyZWQgaW50dWJhdGlvbiwganVzdCBCSVBBUC4gT3ZlciB0aGUgY291cnNlIG9mIGhpcyBNSUNVIHN0YXkgaGUgd2FzIHdlYW5lZCBvZmYgb2YgQklQQVAgdW50aWwgc3RhYmxlIHRvIGNvbWUgdG8gdGhlIGZsb29yLCB3aGVyZSBoZSBjb250aW51ZWQgdG8gaW1wcm92ZSBvbiB0aGlzIHJlZ2ltZW4uIEhlIHdhcyBjb250aW51ZWQgb24gYXppdGhyb215Y2luIHRocm91Z2hvdXQgaGlzIHN0YXksIGFuZCB3ZSB3YXMgc3dpdGNoIHRvIHBvIHByZWRuaXNvbmUgd2l0aCBhbiBvdXBhdGllbnQgdGFwZXIgcGxhbm5lZC4gSGUgYmVuZWZpdHRlZCBmcm9tIG5lYnVsaXplciB0cmVhdG1lbnRzIGFuZCBhcyBzdWNoIGhlIHdhcyBwcm92aWRlZCB3aXRoIGEgbmVidWxpemVyIG1hY2hpbmUgZm9yIGhpcyBob21lLCBhcyB3ZWxsIGFzIGluc3RydWN0aW9uIG9uIGl0cyB1c2UgYW5kIHByZXNjcmlwdGlvbnMgZm9yIG5lYnMuIEhpcyBveHlnZW4gc2F0dXJhdGlvbiBvbiBSQSByYW5nZWQgaW4gdGhlIDkyJSByYW5nZSwgd2hpY2gsIGdpdmVuIGhpcyBleHRlbnNpdmUgc21va2luZyBoaXN0b3J5LCB3YXMgcHJlc3VtZWQgdG8gYmUgbmVhciBoaXMgYmFzZWxpbmUuIEhpcyBzeW1wdG9tcyBhbmQgcHVsbW9uYXJ5IGV4YW0gaW1wcm92ZWQgdGhyb3VnaG91dCBoaXMgc3RheSwgYW5kIGFmdGVyIHBhc3NpbmcgUFQgZXZhbHVhdGlvbiBmb3Igc3RhaXIgY2xpbWJpbmcgKGxpdmVzIGluIGEgd2Fsay11cCkgaGUgd2FzIGNsZWFyZWQgZm9yIGRpc2NoYXJnZS4gLiAyLiBFbGV2YXRlZCBDSyBQYXRpZW50IHByZXNlbnRlZCB3aXRoIGVsZXZhdGVkIENLLCB1bmNsZWFyIGV0aW9sb2d5LCB3YXMgbGlrZWx5IG1pbGQgcmhhYmRvLiBSZXNwb25kZWQgd2VsbCB0byBhZ2dyZXNzaXZlIElWRiwgYW5kIHRyZW5kZWQgZG93biBuaWNlbHkgb3ZlciBjb3Vyc2Ugb2YgYWRtaXNzaW9uLiBPbiBkaXNjaGFyZ2UgaXQgd2FzIGluIHRoZSAxMDBzLiBIZSBoYWQgYW4gRUtHIGFuZCBiaW9tYXJrZXJzIHdoaWNoIHdlcmUgbmVnYXRpdmUgZm9yIGNhcmRpYWMgaXNjaGVtaWEuIC4gMy4gSHlwb25hdHJlbWlhIFdhcyAxMjEgb24gYWRtaXNzaW9uLCByZXNvbHZlZCB0byAxMzYgYXQgYmVzdCBkdXJpbmcgaG9zcGl0YWxpemF0aW9uLCBidXQgZHJvcHBlZCBqdXN0IGJlZm9yZSBkaXNjaGFyZ2UgdG8gMTI2LiBFdXZvbGVtaWMgZXhhbS4gUHJvcG9zZWQgZXRpb2xvZ2llcyBpbmNsdWRlIFNJQURIIGdpdmVuIGhpcyBleHRlbnNpdmUgbHVuZyBkaXNlYXNlIGFuZCBDVCBmaW5kaW5ncywgaHlwb3RoeXJvaWQgKFRTSCB3YXMgbm9ybWFsKSwgSENUWiAoaGVsZCksIGFuZCBvdGhlciBtZWRpY2F0aW9uIHJlbGF0ZWQuIFBhdGllbnQgd2FzIGRpc2NoYXJnZWQgd2l0aCBpbnN0cnVjdGlvbnMgdG8gcmVwZWF0IGhpcyBzb2RpdW0gYXMgYW4gb3V0cGF0aWVudCBsYWIgMi0zIGRheXMgYWZ0ZXIgZGlzY2hhcmdlLiBUaGlzIGluZm9ybWF0aW9uIHdhcyBjb21tdW5pY2F0ZWQgdG8gaGlzIFBDUCBbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuNCkgKipdLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgKipdIHRvIGVuc3VyZSBwcm9wZXIgZm9sbG93LXVwLCB0aGUgcGF0aWVudCBoYXMgYW4gYXBwdCB3aXRoIGhpcyBQQ1Agc2NoZWR1bGVkIHdpdGhpbiAyIHdlZWtzIG9mIGRpc2NoYXJnZS4gLiA0LiBTY2hpem9waHJlbmlhIFdlIGNvbnRpbnVlZCBoaXMgQWJpbGlmeSBhbmQgUGF4aWwgaG9tZSByZWdpbWVuLiBSZW1haW5lZCB3ZWxsIGNvbnRyb2xsZWQgb24gbWVkcy4gTm8gQS9WIGhhbGx1Y2luYXRpb25zIGR1cmluZyBzdGF5LiAuIDUuIEdyb3VuZCBHbGFzcyBPcGFjaXRpZXMgb24gQ1QgVGhlIGRpZmZlcmVudGlhbCBkaWFnbm9zaXMgZm9yIHRoZXNlIGZpbmRpbmdzIG9uIENUIGlzIGJyb2FkIGFuZCBpbmNsdWRlcyBpbmZsYW1tYXRvcnkvaW5mZWN0aW91cyBwcm9jZXNzLCBDT1AgKGNyeXB0b2dlbmljIG9yZ2FuaXppbmcgcG5ldW1vbmlhKSwgZW9zaW5vcGhpbGljIHBuZXVtb25pYSAodW5saWtlbHkgZ2l2bmUgbGFjayBvZiBlb3MpLiBBcyB0aGUgdHJlYXRtZW50IGZvciBtYW55IG9mIHRoZXNlIGNvbmRpdGlvbnMgaXMgc3Rlcm9pZHMsIGhlIHdhcyBrZXB0IG9uIGEgc2xvdyBzdGVyb2lkIHRhcGVyIGFzIHBlciBwdWxtb25hcnkgZ3VpZGFuY2UgaW4gdGhlIElDVSBhbmQgaGFzIGEgZi91IGFwcHQgd2l0aCBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpICoqXSBmcm9tIHB1bG0gb24gWyoqOC0xOCoqXSBhdCA0UE0gLiA2LiBFbGV2YXRlZCBCbG9vZCBHbHVjb3NlICsgTGV1a29jeXRvc2lzIFRoZXNlIGVmZmVjdHMgd2VyZSBsaWtlbHkgWyoqMi0yNSoqXSBzdGVyb2lkcy4gSGUgZGlzcGxheWVkIG5vIGNsaW5pY2FsIHNpZ25zIG9mIGluZmVjdGlvbiBhbmQgaGFkIG5vIGhpc3Rvcnkgb2YgZGlhYmV0ZXMuIEhpcyBXQkMgY291bnQgd2FzIHRyZW5kaW5nIGJhY2sgdG93YXJkcyBuZWFyIG5vcm1hbCBieSBkaXNjaGFyZ2UuIEhpcyBmaW5zZ2Vyc3RpY2tzIHdlcmUgbWFuYWdlZCB3aXRoIHNsaWRpbmcgc2NhbGUgaW5zdWxpbi4gLiBIVE4gLSBubyBwcmlvciBkaWFnbm9zaXMsIGJ1dCB3YXMgaHlwZXJ0ZW5zaXZlIGluIHRoZSBNSUNVLiBIQ1RaIHdhcyBiZWd1biwgYnV0IEJQIHJlbWFpbmVkIHN0aWxsIGVsZXZhdGVkIG9uIGZsb29yLiBXZSBkL2MnZWQgaGlzIEhDVFogZ2l2ZW4gY29uY2VybnMgYWJvdXQgaHlwb25hdHJlbWlhLCBhbmQgYWRkZWQgYW1sb2RpcGluZSA1bWcgZGFpbHkgYW5kIGxpc2lub3ByaWwgMTAgbWcgZGFpbHkgd2l0aCBiZXR0ZXIgQlAgY29udHJvbC4gLiBGRU46IEhlIGF0ZSBhIGNhcmRpYWMgZGlldCBhbmQgZGlkIG5vdCByZXF1aXJlIGFkZGl0aW9uYWwgSVZGIG9uIHRoZSBmbG9vci4gSGlzIGVsZWN0cm9seXRlcyB3ZXJlIHJlcGxldGVkIHBybi4gRm9yIERWVCBwcm9waHlsYXhpcywgaGUgd2FzIGdpdmVuIEhlcGFyaW4gc1EuIEhlIHdhcyBtYWludGFpbmVkIGFzIGZ1bGwgY29kZS4gTWVkaWNhdGlvbnMgb24gQWRtaXNzaW9uOiBBYmlsaWZ5IDEwIHFEIFBheGlsIDIwIHFEIENvbWJpdmVudCAxIGluaGFsYXRpb24gWyoqSG9zcGl0YWwxICoqXSBEaXNjaGFyZ2UgTWVkaWNhdGlvbnM6IDEuIE5lYnVsaXplciBtYWNoaW5lIDIuIEFyaXBpcHJhem9sZSAxMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiAzLiBQYXJveGV0aW5lIEhDbCAxMCBtZyBUYWJsZXQgU2lnOiBUd28gKDIpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiA0LiBEZXh0cm9tZXRob3JwaGFuLUd1YWlmZW5lc2luIDEwLTEwMCBtZy81IG1MIFN5cnVwIFNpZzogRml2ZSAoNSkgTUwgUE8gUTZIIChldmVyeSA2IGhvdXJzKSBhcyBuZWVkZWQuIERpc3A6KnFzIE1MKHMpKiBSZWZpbGxzOiowKiA1LiBBbGJ1dGVyb2wgU3VsZmF0ZSAwLjA4MyAlICgwLjgzIG1nL21MKSBTb2x1dGlvbiBTaWc6IE9uZSAoMSkgbmViIEluaGFsYXRpb24gZXZlcnkgNC02IGhvdXJzIGFzIG5lZWRlZCBmb3Igc2hvcnRuZXNzIG9mIGJyZWF0aCBvciB3aGVlemluZy4gRGlzcDoqcXMgbmViKiBSZWZpbGxzOiowKiA2LiBCZW56b25hdGF0ZSAxMDAgbWcgQ2Fwc3VsZSBTaWc6IE9uZSAoMSkgQ2Fwc3VsZSBQTyBUSUQgKDMgdGltZXMgYSBkYXkpLiBEaXNwOio5MCBDYXBzdWxlKHMpKiBSZWZpbGxzOiowKiA3LiBQcmVkbmlzb25lIDIwIG1nIFRhYmxldCBTaWc6IFRocmVlICgzKSBUYWJsZXQgUE8gREFJTFkgKERhaWx5KTogVGFrZSAzIHRhYnMgZm9yIDcgZGF5cywgdGhlbiAyIHRhYnMgZm9yIDUgZGF5cywgdGhlbiAxIHRhYiBmb3IgMyBkYXlzLCB0aGVuIHN0b3AuIERpc3A6KjM0IFRhYmxldChzKSogUmVmaWxsczoqMCogOC4gQW1sb2RpcGluZSA1IG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIERBSUxZIChEYWlseSkuIERpc3A6KjMwIFRhYmxldChzKSogUmVmaWxsczoqMCogOS4gTGlzaW5vcHJpbCAxMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWSAoRGFpbHkpLiBEaXNwOiozMCBUYWJsZXQocykqIFJlZmlsbHM6KjAqIDEwLiBPdXRwYXRpZW50IExhYiBXb3JrIFBsZWFzZSBoYXZlIGEgc29kaXVtIGxldmVsIGNoZWNrZWQgb24gTW9uZGF5LCBbKio3LTI1KipdLiBZb3Ugc2hvdWxkIGdvIHRvIHlvdXIgUENQJ3Mgb2ZmaWNlIHRvIGhhdmUgdGhpcyBkb25lLiBEaXNjaGFyZ2UgRGlzcG9zaXRpb246IEhvbWUgRGlzY2hhcmdlIERpYWdub3NpczogQ2hyb25pYyBPYnN0cnVjdGl2ZSBQdWxtb25hcnkgRGlzZWFzZSBleGFjZXJiYXRpb24gRGlzY2hhcmdlIENvbmRpdGlvbjogR29vZC0gYW1idWxhdG9yeSBzYXRzIHN0YWJsZSB3aXRoIHdhbGtpbmcgYW5kIGNsaW1iaW5nIHN0YWlycyBEaXNjaGFyZ2UgSW5zdHJ1Y3Rpb25zOiBZb3Ugd2VyZSBob3NwaXRhbGl6ZWQgZm9yIGEgQ09QRCBleGFjZXJiYXRpb24uIFlvdSB3ZXJlIHRyZWF0ZWQgd2l0aCBhbnRpYmlvdGljcywgc3Rlcm9pZHMsIGFuZCBuZWJ1bGl6ZXJzLiBZb3Ugc2hvdWxkIGNvbnRpbnVlIHRvIHRha2UgdGhlIHN0ZXJvaWRzIGFzIGluc3RydWN0ZWQsIGFsb25nIHdpdGggYWxsIG9mIHlvdXIgb3RoZXIgbWVkaWNhdGlvbnMuIENvbnRpbnVlIHRvIGtlZXAgeW91cnNlbGYgd2VsbCBoeWRyYXRlZC4gTWFpbnRhaW4gYWxsIG9mIHlvdXIgZm9sbG93LXVwIGFwcG9pbnRtZW50cy4gWW91IHdpbGwgbmVlZCB0byBnbyB0byB5b3VyIFBDUCdzIG9mZmljZSBvbiBNb25kYXkgdG8gaGF2ZSB5b3VyIHNvZGl1bSBsZXZlbCBjaGVja2VkLiBZb3Ugc2hvdWxkIGNhbGwgeW91ciBkb2N0b3Igb3IgcmV0dXJuIHRvIHRoZSBlbWVyZ2VuY3kgcm9vbSBpZiB5b3UgZXhwZXJpZW5jZSBjaGVzdCBwYWluLCBzaG9ydG5lc3Mgb3IgYnJlYXRoLCBmZXZlcnMgb3IgY2hpbGxzLiBGb2xsb3d1cCBJbnN0cnVjdGlvbnM6IFlvdSBzaG91bGQga2VlcCB5b3VyIGFwcG9pbnRtZW50IHdpdGggRHIuIFsqKkxhc3QgTmFtZSAoU1RpdGxlKSAqKl0gb24gWyoqOC00KipdLiBZb3Ugc2hvdWxkIGdvIHRvIERyLlsqKk5hbWUgKE5JKSAxMTA3NjQqKl0gb2ZmaWNlIG9uIE1vbmRheSB3aXRoIHlvdXIgcHJlc2NyaXB0aW9uIHRvIGhhdmUgeW91ciBzb2RpdW0gbGV2ZWwgY2hlY2tlZC4gVGhlIGZvbGxvd2luZyBhcmUgeW91ciBhcHBvaW50bWVudHMgdG8gaGF2ZSB5b3VyIGx1bmdzIGV2YWx1YXRlZDogUHJvdmlkZXI6IFsqKk5hbWUxMCAoTmFtZUlzKSAxNTcxKipdIEJSRUFUSElORyBURVNUUyBQaG9uZTpbKipUZWxlcGhvbmUvRmF4ICgxKSA2MTIqKl0gRGF0ZS9UaW1lOlsqKjIxOTEtOC0xOCoqXSAzOjQwIFByb3ZpZGVyOiBbKipOYW1lMTAgKE5hbWVJcykgMTU3MCoqXSxbKipOYW1lMTEgKE5hbWVJcykgMjE2MioqXSBbKipOYW1lMTIgKE5hbWVJcykgMTU3MCoqXSBJTlRFUFJFVEFUSU9OIEJJTExJTkcgRGF0ZS9UaW1lOlsqKjIxOTEtOC0xOCoqXSA0OjAwIFByb3ZpZGVyOiBbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuNCkgKipdLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgKipdL0RSLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgKipdIFBob25lOlsqKlRlbGVwaG9uZS9GYXggKDEpIDYxMioqXSBEYXRlL1RpbWU6WyoqMjE5MS04LTE4KipdIDQ6MDAgWyoqRmlyc3QgTmFtZTQgKE5hbWVQYXR0ZXJuMSkgKipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSAqKl0gTUQgWyoqTUQgTnVtYmVyKDIpIDQ3MioqXSAK'
b''
b''
b''
b''
b''
b''
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxNDktMi0xMCoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjE0OS0yLTEyKipdIFNlcnZpY2U6IENDVSBISVNUT1JZIE9GIFRIRSBQUkVTRU5UIElMTE5FU1M6IFRoZSBwYXRpZW50IGlzIGFuIDgyLXllYXItb2xkIEFmcmljYW4tQW1lcmljYW4gZmVtYWxlIHdpdGggYSBoaXN0b3J5IG9mIGNvcm9uYXJ5IGFydGVyeSBkaXNlYXNlLCBjb25nZXN0aXZlIGhlYXJ0IGZhaWx1cmUsIGRpYWJldGVzIG1lbGxpdHVzLCBhbmQgaHlwZXJ0ZW5zaW9uLCB3aG8gcHJlc2VudGVkIHRvIGFuIG91dHNpZGUgaG9zcGl0YWwgd2l0aCBhIGNoaWVmIGNvbXBsYWludCBvZiBzaG9ydG5lc3Mgb2YgYnJlYXRoLiBBIGNoZXN0IHgtcmF5IGF0IHRoZSBvdXRzaWRlIGhvc3BpdGFsIHdhcyBjb25zaXN0ZW50IHdpdGggY29uZ2VzdGl2ZSBoZWFydCBmYWlsdXJlIHdpdGggY2VwaGFsaXphdGlvbiBvZiB0aGUgcHVsbW9uYXJ5IHZlc3NlbHMgYW5kIGJpbGF0ZXJhbCBpbmZpbHRyYXRlcy4gVGhlIHBhdGllbnQgd2FzIGFnZ3Jlc3NpdmVseSB0cmVhdGVkIHdpdGggTGFzaXgsIG1vcnBoaW5lLCBhbmQgbml0cmF0ZXMsIGFuZCBoZXIgc3ltcHRvbXMgaW1wcm92ZWQgYXQgdGhlIG91dHNpZGUgaG9zcGl0YWwuIE92ZXIgdGhlIG5leHQgZmV3IGRheXMsIHNoZSBjb250aW51ZWQgdG8gaGF2ZSBmbGFzaCBwdWxtb25hcnkgZWRlbWEgYW5kIGNvbXBsYWluZWQgb2YgamF3IHBhaW4gdGhhdCB3YXMgYnVybmluZyBpbiBuYXR1cmUgYW5kIHJhZGlhdGVkIGRvd24gaGVyIGxlZnQgdXBwZXIgZXh0cmVtaXR5LiBTaGUgd2FzIHRyYW5zZmVycmVkIHRvIHRoZSBbKipIb3NwaXRhbDYgMjU2KipdIGZvciBjYXRoZXRlcml6YXRpb24gdG8gZGV0ZXJtaW5lIGlmIGlzY2hlbWlhIGNvdWxkIGJlIHRoZSBwcmltYXJ5IGNhdXNlIG9mIGhlciBzeW1wdG9tcy4gRHVyaW5nIGNhdGhldGVyaXphdGlvbiBpdCB3YXMgbm90aWNlZCB0aGF0IHRoZSBwYXRpZW50IGhhZCBpbi1zdGVudCByZXN0ZW5vc2lzIG9mIGEgcHJldmlvdXMgbGVzaW9uLiBJbiBhbiBhdHRlbXB0IHRvIGNsZWFyIHRoZSBsZXNpb24sIHRoZSBwYXRpZW50IHdlbnQgaW50byBjYXJkaWFjIGFycmVzdCByZXF1aXJpbmcgQ1BSLCBlcGluZXBocmluZSwgYW5kIGF0cm9waW5lLiBMQUQgYmxvb2QgZmxvdyB3YXMgcmVlc3RhYmxpc2hlZCB3aXRoIGEgc3VjY2Vzc2Z1bCBwbGFjZW1lbnQgb2YgYSBzdGVudC4gVGhlIHBhdGllbnQgd2FzIGludHViYXRlZCBhbmQgcGxhY2VkIG9uIHByZXNzb3JzIGFuZCB0cmFuc2ZlcnJlZCB0byB0aGUgQ0NVIGZvciBmdXJ0aGVyIG1hbmFnZW1lbnQuIFBBU1QgTUVESUNBTCBISVNUT1JZOiAxLiBEaWFiZXRlcyBtZWxsaXR1cy4gMi4gRGlhc3RvbGljIGNvbmdlc3RpdmUgaGVhcnQgZmFpbHVyZS4gMy4gQ29yb25hcnkgYXJ0ZXJ5IGRpc2Vhc2UsIHN0YXR1cyBwb3N0IG11bHRpcGxlIE1JcyBhbG9uZyB3aXRoIG11bHRpcGxlIGludGVydmVudGlvbnMsIHRoZSByZWNvcmRzIG9mIHdoaWNoIHdlcmUgbm90IGF2YWlsYWJsZSBhdCB0aGUgdGltZS4gNC4gVElBcy4gNS4gUGVyaXBoZXJhbCB2YXNjdWxhciBkaXNlYXNlLiA2LiBDaHJvbmljIHJlbmFsIGluc3VmZmljaWVuY3kuIDcuIENvbmdlc3RpdmUgaGVhcnQgZmFpbHVyZS4gOC4gRGVtZW50aWEuIDkuIENPUEQuIDEwLiBIeXBlcnRlbnNpb24uIDExLiBIeXBvdGh5cm9pZGlzbS4gQUxMRVJHSUVTOiBUaGUgcGF0aWVudCBoYXMgYW4gYWxsZXJneSB0byBwZW5pY2lsbGluLCBtb3JwaGluZSwgcHJlZG5pc29uZSwgU3RlbGF6aW5lLiBTT0NJQUwgSElTVE9SWTogU2hlIGxpdmVzIHdpdGggaGVyIGRhdWdodGVyLiBbKipOYW1lIChOSSkgKipdIG1vdmVtZW50IGlzIGxpbWl0ZWQgZnJvbSBiZWQtdG8tY2hhaXIuIE1FRElDQVRJT05TIFVQT04gQURNSVNTSU9OOiAxLiBOb3J2YXNjIDEwIG1nIHEuZC4gMi4gTGFzaXggNjAgbWcgSVYgYi5pLmQuIDMuIEltZHVyIDYwIG1nIHEuZC4gNC4gTGV2YXF1aW4gMjUwIG1nIHEuZC4gNS4gTG9wcmVzc29yIDUwIG1nIGIuaS5kLiA2LiBFbGF2aWwgNzUgbWcgcS5kLiA3LiBFcG9nZW4gNSwwMDAgdW5pdHMgcS4gd2Vlay4gOC4gUGVwY2lkIDIwIG1nIHEuZC4gOS4gTXVjb215c3QgNjAwIG1nIGIuaS5kLiAxMC4gTGV2b3RoeXJveGluZSAxNzUgbWljcm9ncmFtcyBxLmQuIDExLiBDb2xhY2UgMTAwIG1nIGIuaS5kLiAxMi4gTlBIIGluc3VsaW4gNDQgdW5pdHMgaW4gdGhlIG1vcm5pbmcgYWxvbmcgd2l0aCA2IGFkZGl0aW9uYWwgdW5pdHMgaW4gdGhlIGV2ZW5pbmcuIExBQk9SQVRPUlkgREFUQSBVUE9OIEFETUlTU0lPTjogQmxvb2QgZ2FzIDcuMzEsIFBDMDIgNDksIFBBMDIgODYuIFNvZGl1bSAxNTEsIHBvdGFzc2l1bSA0LjAsIGNobG9yaWRlIDEwNSwgYmljYXJib25hdGUgMzEsIEJVTiA2NywgY3JlYXRpbmluZSAyLjcsIGdsdWNvc2UgMTI5LCBtYWduZXNpdW0gMS44LiBQSFlTSUNBTCBFWEFNSU5BVElPTiBPTiBBRE1JU1NJT046IEdlbmVyYWw6IFRoZSBwYXRpZW50IHdhcyBhIHdlbGwtZGV2ZWxvcGVkLCBvYmVzZSBBZnJpY2FuLUFtZXJpY2FuIGZlbWFsZSB3aG8gYXBwZWFyZWQgaGVyIHN0YXRlZCBhZ2UuIENhcmRpb3Zhc2N1bGFyOiBIZXIgaGVhcnQgc291bmRzIHdlcmUgZGlzdGFudC4gU2hlIGhhZCBhIHJlZ3VsYXIgcmF0ZSBhbmQgcmh5dGhtLCBTMyBhbmQgUzQgY291bGQgbm90IGJlIGFwcHJlY2lhdGVkLiBQdWxtb25hcnk6IENsZWFyIHRvIGF1c2N1bHRhdGlvbiBhbnRlcmlvcmx5LCBwb3N0ZXJpb3Igd2FzIG5vdCBleGFtaW5lZC4gSEVFTlQ6IFRoZSBwdXBpbHMgd2VyZSBlcXVhbGx5IHJvdW5kIGFuZCByZWFjdGl2ZSB0byBsaWdodC4gVGhlIG11Y291cyBtZW1icmFuZXMgd2VyZSBtb2lzdC4gRXh0cmVtaXRpZXM6IFRoZXJlIHdlcmUgKzEgRFBzIGJpbGF0ZXJhbGx5LiBTaGUgaGFkIHRyYWNlIGVkZW1hLiBObyBjeWFub3NpcyBvciBjbHViYmluZyB3YXMgbm90aWNlZC4gSGVyIGFiZG9tZW4gd2FzIHNvZnQsIG5vbnRlbmRlciwgbm9uZGlzdGVuZGVkIHdpdGggcG9zaXRpdmUgYm93ZWwgc291bmRzLiBIT1NQSVRBTCBDT1VSU0U6IFRoaXMgaXMgYW4gODIteWVhci1vbGQgQWZyaWNhbi1BbWVyaWNhbiBmZW1hbGUgd2l0aCBhIGNvbXBsaWNhdGVkIG1lZGljYWwgaGlzdG9yeSBhZG1pdHRlZCBmcm9tIGFuIG91dHNpZGUgaG9zcGl0YWwgZm9yIGZ1cnRoZXIgZXZhbHVhdGlvbiBvZiBoZXIgY29uZ2VzdGl2ZSBoZWFydCBmYWlsdXJlLiBIZXIgY2F0aGV0ZXJpemF0aW9uIHJldmVhbGVkIGFuIExBRCBsZXNpb24gZXN0aW1hdGVkIHRvIGJlIGFib3V0IDgwJSBpbiBzdGVudCByZS1zdGVub3NpcyBpbiB0aGUgbWlkIExBRCBhbG9uZyB3aXRoIGEgNDAlIG9zdGlhbCBsZXNpb24uIERpYWdvbmFsIDEgc2hvd2VkIHNldmVyZSBkaWZmdXNlIGRpc2Vhc2UuIEhlciBsZWZ0IGNpcmN1bWZsZXggc2hvd2VkIDcwJSBwcm94aW1hbCBsZXNpb24gYWxvbmcgd2l0aCBhIDUwJSBhbmQgODAlIGxlc2lvbiBmb3VuZCBpbiB0aGUgT00xLiBIZXIgcmlnaHQgY29yb25hcnkgc2hvd2VkIGRpZmZ1c2UgZGlzZWFzZSB0aHJvdWdob3V0LiBEdXJpbmcgYW4gYXR0ZW1wdCB0byBjb3JyZWN0IGhlciBMQUQgbGVzaW9uLCBpdCBhcHBlYXJzIHRoYXQgdGhlIExBRCB3YXMgZGlzc2VjdGVkIHdoaWNoIGxlZCB0byBubyBibG9vZCBmbG93IGluIHRoZSBMQUQuIFRoZSBwYXRpZW50IGhhZCBjYXJkaWFjIGFycmVzdCB3aGlsZSBpbiB0aGUgQ2F0aGV0ZXJpemF0aW9uIExhYm9yYXRvcnkuIFNoZSB3YXMgc3VjY2Vzc2Z1bGx5IHJlc3VzY2l0YXRlZCB3aXRoIGVwaW5lcGhyaW5lLCBhdHJvcGluZSwgYW5kIENQUi4gU2hlIHdhcyBpbnR1YmF0ZWQgYW5kIHBsYWNlZCBvbiBwcmVzc29ycyBhbmQgcmV0dXJuZWQgdG8gdGhlIGZsb29yIGZvciBmdXJ0aGVyIG1lZGljYWwgbWFuYWdlbWVudC4gT24gdGhlIHNlY29uZCBkYXkgb2YgYWRtaXNzaW9uLCB0aGUgcGF0aWVudCB3YXMgc3VjY2Vzc2Z1bGx5IHdlYW5lZCBvZmYgb2YgaGVyIHByZXNzb3JzIGFuZCBoZXIgaW50cmEtYW9ydGljIGJhbGxvb24gcHVtcCB3YXMgcmVtb3ZlZC4gTGF0ZXIgb24gdGhhdCBldmVuaW5nLCBob3dldmVyLCB0aGUgcGF0aWVudCBiZWNhbWUgaHlwb3RlbnNpdmUgd2l0aCBhIGJsb29kIHByZXNzdXJlIG9mIGFwcHJveGltYXRlbHkgNjAvNDAuIFNoZSBhbHNvIGRldmVsb3BlZCBhbiBhY2NlbGVyYXRlZCBqdW5jdGlvbmFsIHJoeXRobSB3aXRoIHJldHJvZ3JhZGUgYXRyaWFsIGNvbmR1Y3Rpb24uIFNoZSB3YXMgcGxhY2VkIG9uIGRvcGFtaW5lIGFuZCBOZW8gZm9yIHByZXNzb3Igc3VwcG9ydC4gTGFib3JhdG9yaWVzIHdlcmUgdGFrZW4gYW5kIGl0IHdhcyBmb3VuZCB0aGF0IHRoZSBwYXRpZW50J3MgY3JlYXRpbmluZSB3YXMgNC40LiBIZXIgcG90YXNzaXVtIHdhcyA3LjAuIFNoZSBoYWQgYW4gZWxldmF0ZWQgYW5pb24gZ2FwIG9mIGFwcHJveGltYXRlbHkgMjMgYW5kIGhlciBsYWN0aWMgYWNpZCBhdCB0aGF0IHRpbWUgd2FzIDExLiBJdCBpcyBiZWxpZXZlZCB0aGF0IHRoZSBwYXRpZW50IHdhcyBoYXZpbmcgaXNjaGVtaWMgYm93ZWwsIFN1cmdlcnkgYW5kIEdJIHdlcmUgYm90aCBjb25zdWx0ZWQgYW5kIGFmdGVyIGRpc2N1c3Npb24gd2l0aCB0aGUgZmFtaWx5IHRoZXkgZGVjaWRlZCB0aGF0IHRoZXkgd291bGQgbm90IHVuZGVyZ28gc3VyZ2VyeSBhdCB0aGF0IHRpbWUuIFRoZSBvcHRpb24gb2YgZGlhbHlzaXMgd2FzIGFsc28gb2ZmZXJlZCB0byB0aGUgZmFtaWx5IGFuZCB0aGUgZmFtaWx5IGNob3NlIG5vdCB0byBwdXJzdWUgZGlhbHlzaXMgYXQgdGhhdCBwb2ludC4gVGhlIGlzc3VlIG9mIEROUi9ETkkgd2FzIGRpc2N1c3NlZC4gVGhlIGZhbWlseSBhbHNvIG1hZGUgdGhlIHBhdGllbnQgRE5SL0ROSS4gVGhleSBmdXJ0aGVyIG1hZGUgdGhlIHBhdGllbnQgY29tZm9ydCBtZWFzdXJlcyBvbmx5LiBBcyB0aGUgcHJlc3NvcnMgd2VyZSB3ZWFuZWQgb2ZmIGFuZCB0aGUgcGF0aWVudCB3YXMgZXh0dWJhdGVkLCBzaGUgZXhwZXJpZW5jZWQgcmVzcGlyYXRvcnkgYXJyZXN0IGZvbGxvd2VkIGJ5IGNhcmRpYWMgYXJyZXN0IGFuZCB0aGUgcGF0aWVudCB3YXMgcHJvbm91bmNlZCBkZWFkIGF0IDQ6MTUgaW4gdGhlIGFmdGVybm9vbiBvZiBbKioyMTQ5LTEwLTEzKipdLiBUaGUgZmFtaWx5IHdhcyBhdCB0aGUgYmVkc2lkZSB0aHJvdWdob3V0IHRoZSB3aG9sZSBwcm9jZXNzLiBUaGUgYXBwcm9wcmlhdGUgYXV0aG9yaXRpZXMgd2VyZSBjb250YWN0WyoqTmFtZSAoTkkpICoqXS4gWyoqTmFtZTYgKE1EKSAyNTEqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDY3NyoqXSwgTS5ELiBbKipNRCBOdW1iZXIoMSkgMjU3NTUqKl0gRGljdGF0ZWQgQnk6WyoqTmFtZTggKE1EKSA2Mjg0KipdIE1FRFFVSVNUMzYgRDogWyoqMjE0OS0yLTEyKipdIDA0OjQ4IFQ6IFsqKjIxNDktMi0xNSoqXSAwOToyMCBKT0IjOiBbKipKb2IgTnVtYmVyICoqXSAK'
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxMDEtMTEtNCoqXSBEaXNjaGFyZ2UgRGF0ZTogWyoqMjEwMS0xMS0xMCoqXSBEYXRlIG9mIEJpcnRoOiBbKioyMDY2LTItMjYqKl0gU2V4OiBNIFNlcnZpY2U6IE1lZGljaW5lIEhJU1RPUlkgT0YgUFJFU0VOVCBJTExORVNTOiBUaGUgcGF0aWVudCBpcyBhIDM1IHllYXIgb2xkIG1hbGUgd2l0aCBhIGhpc3Rvcnkgb2YgYXN0aG1hIHdobyBwcmVzZW50ZWQgdG8gdGhlIEVtZXJnZW5jeSBSb29tIG9uIFsqKjIxMDEtMTEtNCoqXSB3aXRoIHNob3J0bmVzcyBvZiBicmVhdGguIEluIHRoZSBwYXN0LCB0aGUgcGF0aWVudCBoYWQgYmVlbiBob3NwaXRhbGl6ZWQgZm9yIGhpcyBhc3RobWEgb25lIHByZXZpb3VzIHRpbWUsIGR1cmluZyB3aGljaCBhZG1pc3Npb24gaGUgcmVxdWlyZWQgaW50dWJhdGlvbi4gVGhlIHBhdGllbnQgbm90ZXMgdGhhdCBoaXMgY3VycmVudCBzaG9ydG5lc3Mgb2YgYnJlYXRoIGJlZ2FuIHRoZSBwcmV2aW91cyBldmVuaW5nIHdoaWxlIGhlIHdhcyBhdCBob21lIHRlbGV2aXNpb24uIEhlIGZlbHQgYSBsaXR0bGUgdGlnaHQsIGhvd2V2ZXIsIGhpcyBhc3RobWEgd2FzIHVucmVzcG9uc2l2ZSB0byBtdWx0aXBsZSBhbGJ1dGVyb2wgbWV0ZXIgZG9zZSBpbmhhbGVycy4gVGhlIGZvbGxvd2luZyBtb3JuaW5nLCB3YXMgYnJvdWdodCBieSBhbWJ1bGFuY2UgdG8gdGhlIEVtZXJnZW5jeSBSb29tLiBUaGUgcGF0aWVudCB3YXMgYWRtaXR0ZWQgdG8gdGhlIE1lZGljYWwgSW50ZW5zaXZlIENhcmUgVW5pdCBob3VycyBhcyB3ZWxsIGFzIGFsYnV0ZXJvbCBuZWJ1bGl6ZXJzIGFzIG5lZWRlZCBmb3IgaGlzIGFzdGhtYS4gSGUgd2FzIGFsc28gZ2l2ZW4gbWFnbmVzaXVtIHN1bGZhdGUgYW5kIDAuMyBtZyBvZiBzdWJjdXRhbmVvdXMgZXBpbmVwaHJpbmUgYXMgd2VsbCBhcyBoeWRyb2NobG9yb3RoaWF6aWRlIGZvciBoaXMgaHlwZXJ0ZW5zaW9uLiBQQVNUIE1FRElDQUwgSElTVE9SWTogMS4gQXN0aG1hIHNpbmNlIGNoaWxkaG9vZDsgb24gcXVlc3Rpb25pbmcsIHBhdGllbnQgbm90ZXMgdGhhdCBoZSB3YXMgaG9zcGl0YWxpemVkIGluIFsqKjIwOTUqKl0gZm9yIGFuIGFzdGhtYSBleGFjZXJiYXRpb247IHByaW9yIHRvIHRoYXQsIGhlIHdhcyBub3Qgb24gYW55IG1lZGljYXRpb25zIGJ1dCwgZHVyaW5nIHRoYXQgaG9zcGl0YWxpemF0aW9uLCBoZSByZXF1aXJlZCBpbnR1YmF0aW9uOyB0aGUgYXR0YWNrIHdhcyBwcmVjaXBpdGF0ZWQgYnkgYW4gdXBwZXIgcmVzcGlyYXRvcnkgaW5mZWN0aW9uOyBiYXNlbGluZSBwZWFrIGZsb3cgaXMgNjUwLiAyLiBFY3plbWE7IGFwcHJveGltYXRlbHkgdHdvIG1vbnRocyBhZ28sIHJlcXVpcmVkIGEgb25lIG1vbnRoIGNvdXJzZSBvZiBvcmFsIFByZWRuaXNvbmUgZm9yIHRyZWF0bWVudCBvZiB0aGlzIGNvbmRpdGlvbi4gMy4gUGVyZm9yYXRlZCBhcHBlbmRpY2l0aXMuIDQuIE1pdHJhbCB2YWx2ZSBwcm9sYXBzZS4gNS4gU2Vhc29uYWwgYWxsZXJnaWVzLiA2LiBCb3JkZXJsaW5lIGh5cGVydGVuc2lvbi4gTUVESUNBVElPTlMgT04gQURNSVNTSU9OOiBBbGJ1dGVyb2wgbWV0ZXIgZG9zZSBpbmhhbGVyIHAuci5uLiBhbmQgVHlsZW5vbCBwLnIubi4gQUxMRVJHSUVTOiBUaGUgcGF0aWVudCBoYXMgbm8ga25vd24gZHJ1ZyBhbGxlcmdpZXMuIFNPQ0lBTCBISVNUT1JZOiBUaGUgcGF0aWVudCBkb2VzIG5vdCBzbW9rZSwgZHJpbmsgb3IgdXNlIGludHJhdmVub3VzIGRydWdzLiBIZSBpcyB1bmVtcGxveWVkIGFuZCBsaXZlcyB3aXRoIGhpcyBtb3RoZXIuIEZBTUlMWSBISVNUT1JZOiBUaGVyZSBpcyBubyBmYW1pbHkgaGlzdG9yeSBvZiBhc3RobWEgb3IgZWN6ZW1hLiBQSFlTSUNBTCBFWEFNSU5BVElPTjogT24gcGh5c2ljYWwgZXhhbWluYXRpb24gb24gdHJhbnNmZXIgZnJvbSB0aGUgTWVkaWNhbCBJbnRlbnNpdmUgQ2FyZSBVbml0LCB0aGUgcGF0aWVudCBoYWQgYSB0ZW1wZXJhdHVyZSBvZiA5Ny44LCBibG9vZCBwcmVzc3VyZSAxNDAvNzAsIHB1bHNlIDg0LCByZXNwaXJhdG9yeSByYXRlIDI0IGFuZCBveHlnZW4gc2F0dXJhdGlvbiA5OCUgb24gdHdvIGxpdGVycy4gR2VuZXJhbDogUGF0aWVudCB3YXMgaW4gbm8gYWN1dGUgZGlzdHJlc3Mgd2l0aCBvbmx5IHNsaWdodGx5IGxhYm9yZWQgYnJlYXRoaW5nLiBIZWFkLCBleWVzLCBlYXJzLCBub3NlIGFuZCB0aHJvYXQ6IE9yb3BoYXJ5bnggY2xlYXIsIG5vIGx5bXBoYWRlbm9wYXRoeS4gQ2hlc3Q6IERpZmZ1c2UgaW5zcGlyYXRvcnkgd2hlZXplcyBiaWxhdGVyYWxseSwgbm8gY3JhY2tsZXMsIGRlY3JlYXNlZCBicmVhdGggc291bmRzIGF0IGJhc2VzIGJpbGF0ZXJhbGx5LiBDYXJkaW92YXNjdWxhcjogUmVndWxhciByYXRlIGFuZCByaHl0aG0sIG5vIG11cm11cnMgYXBwcmVjaWF0ZWQuIEFiZG9tZW46IFNvZnQsIG5vbnRlbmRlciwgbm9uZGlzdGVuZGVkLiBFeHRyZW1pdGllczogTm8gZWRlbWEuIFNraW46IERpZmZ1c2VseSBoeXBlcnBpZ21lbnRlZCBvdmVyIHRoZSBmYWNlLCB1cHBlciBhbmQgbG93ZXIgZXh0cmVtaXRpZXMsIGFuZCBiYWNrLCBmbGF0IHRvcHBlZCBlcnl0aGVtYXRvdXMgcGFwdWxlcyBsb2NhbGl6ZWQgb3ZlciBlbGJvd3MgYmlsYXRlcmFsbHkgYW5kIGFua2xlcyBiaWxhdGVyYWxseS4gTEFCT1JBVE9SWSBEQVRBOiBBZG1pc3Npb24gd2hpdGUgYmxvb2QgY2VsbCBjb3VudCB3YXMgMTEuNSwgaGVtYXRvY3JpdCA0MC4yLCBwbGF0ZWxldCBjb3VudCAyNDgsMDAwLCBwb3Rhc3NpdW0gMy4zIGFuZCBtYWduZXNpdW0gMS44LiBBcnRlcmlhbCBibG9vZCBnYXNlczogNy4zOC80Ni8xNTMuIENoZXN0IHgtcmF5IHNob3dlZCBubyBpbmZpbHRyYXRlcywgbm8gZWRlbWEuIEJsb29kIGN1bHR1cmVzIHNob3dlZCBubyBncm93dGggdG8gZGF0ZS4gSE9TUElUQUwgQ09VUlNFOiBUaGUgcGF0aWVudCB3YXMgZ3JhZHVhbGx5IHdlYW5lZCBvZmYgb2YgYWxidXRlcm9sIG5lYnVsaXplcnMgZnJvbSBldmVyeSBoYWxmLWhvdXIsIGV2ZXJ5IGhvdXIsIGV2ZXJ5IHR3byBob3VycyB0byBldmVyeSBmb3VyIGhvdXJzLiBIaXMgaW50cmF2ZW5vdXMgc3Rlcm9pZHMgd2VyZSBjb252ZXJ0ZWQgdG8gb3JhbCBQcmVkbmlzb25lIGFuZCBoZSB3YXMgc3Vic2VxdWVudGx5IHRyZWF0ZWQgd2l0aCA2MCBtZyBvZiBQcmVkbmlzb25lLiBBdCB0aGlzIHRpbWUsIGhlIHdhcyB0cmFuc2ZlcnJlZCBmcm9tIHRoZSBNZWRpY2FsIEludGVuc2l2ZSBDYXJlIFVuaXQgdG8gdGhlIGZsb29yLiBXaGlsZSBvbiB0aGUgZmxvb3IsIHRoZSBwYXRpZW50IG1haW50YWluZWQgb3h5Z2VuIHNhdHVyYXRpb25zIGdyZWF0ZXIgdGhhbiA5NCUgaW4gcm9vbSBhaXIuIEhpcyBwZWFrIGZsb3cgb24gdHJhbnNmZXIgd2FzIGFwcHJveGltYXRlbHkgNDAwLCBkb3duIGZyb20gaGlzIGJhc2VsaW5lIG9mIDY1MC4gVGhlIHBhdGllbnQgd2FzIG1haW50YWluZWQgb24gaGlzIFByZWRuaXNvbmUgYXQgNjAgbWcgZGFpbHkgYXMgd2VsbCBhcyBhbGJ1dGVyb2wgbmVidWxpemVycyBldmVyeSBmb3VyIGhvdXJzLiBCZWNsb3ZlbnQgZm91ciBwdWZmcyB0d2ljZSBhIGRheSB3YXMgYWRkZWQgYXQgdGhpcyB0aW1lLiBIaXMgaHlkcm9jaGxvcm90aGlhemlkZSB3YXMgZGlzY29udGludWVkIGFuZCBEeWF6aWRlIHdhcyBhZGRlZCBhdCAyNSBtZyBkYWlseS4gVGhlIHBhdGllbnQgY29udGludWVkIHRvIGltcHJvdmUuIEhlIHJlY2VpdmVkIGFzdGhtYSB0ZWFjaGluZyBmcm9tIHRoZSBMZWFybmluZyBDZW50ZXIuIEhlIHJlbWFpbmVkIGFmZWJyaWxlIHdpdGggbm8gbmF1c2VhIG9yIHZvbWl0aW5nIGZvciB0aGUgZHVyYXRpb24gb2YgaGlzIHN0YXkuIEhlIG5vdGVkIHRoYXQgaGlzIGJyZWF0aGluZyBiZWNhbWUgc2lnbmlmaWNhbnRseSBtb3JlIGNvbWZvcnRhYmxlIGFuZCB0aGF0IGhlIHdhcyByZWFkeSB0byBnbyBob21lLiBUaGUgcGF0aWVudCB3YXMgZGlzY2hhcmdlZCBvbiBbKioyMTAxLTExLTEwKipdLCB3aXRoIHBlYWsgZmxvd3MgaW4gdGhlIDUwMCByYW5nZS4gRElTQ0hBUkdFIE1FRElDQVRJT05TOiBQcmVkbmlzb25lIHRhcGVyIG92ZXIgYSB0ZW4gZGF5IGNvdXJzZS4gQWxidXRlcm9sIG5lYnVsaXplcnMgZm91ciBwdWZmcyBxLjQtNmgucC5yLm4uIEJlY2xvdmVudCBmb3VyIHB1ZmZzIGIuaS5kLiBEeWF6aWRlIDI1IG1nIHAuby5xLmQuIEZPTExPVy1VUDogVGhlIHBhdGllbnQgd2FzIGluc3RydWN0ZWQgdG8gZm9sbG93IHVwIHdpdGggRHIuIFsqKkxhc3QgTmFtZSAoU1RpdGxlKSAqKl0gaW4gY2xpbmljIGluIHRoZSBuZXh0IHR3byB3ZWVrcy4gSGUgaGFzIGJlZW4gZ2l2ZW4gdGhlIG51bWJlciBhbmQgd2lsbCBtYWtlIGFuIGFwcG9pbnRtZW50IGF0IGhpcyBsZWlzdXJlLiBbKipOYW1lNiAoTUQpICoqXSBbKipOYW1lOCAoTUQpICoqXSwgTS5ELiBbKipNRCBOdW1iZXIoMSkgNDQ0NioqXSBEaWN0YXRlZCBCeTpbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgMTU2NzkqKl0gTUVEUVVJU1QzNiBEOiBbKioyMTAxLTExLTEwKipdIDE0OjI2IFQ6IFsqKjIxMDEtMTEtMTMqKl0gMTA6NTIgSk9CIzogWyoqSm9iIE51bWJlciAqKl0gCg=='
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjEyNS04LTMqKl0gICAgICAgICAgICAgIERpc2NoYXJnZSBEYXRlOiAgIFsqKjIxMjUtOC03KipdCgpEYXRlIG9mIEJpcnRoOiAgWyoqMjA3My0xLTI1KipdICAgICAgICAgICAgIFNleDogICBNCgpTZXJ2aWNlOiBNRURJQ0lORQoKQWxsZXJnaWVzOgpDb2RlaW5lIC8gQ29tcGF6aW5lIC8gUGVuaWNpbGxpbnMgLyBNZXRmb3JtaW4gLyBIZXBhcmluIEFnZW50cwoKQXR0ZW5kaW5nOlsqKkZpcnN0IE5hbWUzIChMRikgMjQ4NSoqXQpDaGllZiBDb21wbGFpbnQ6CkR5c3BuZWEKCk1ham9yIFN1cmdpY2FsIG9yIEludmFzaXZlIFByb2NlZHVyZToKTm9uZQoKCkhpc3Rvcnkgb2YgUHJlc2VudCBJbGxuZXNzOgpUaGlzIGlzIGEgNTIgeWVhciBvbGQgZXgtc21va2VyIGFuZCBleC1JVkRVIHdpdGggc2V2ZXJlIENPUEQgYW5kCm11bHRpcGxlIENPUEQgZXhhY2VyYmF0aW9ucyB3aXRoIHJlc3BpcmF0b3J5IGZhaWx1cmUgcmVxdWlyaW5nCmludHViYXRpb24sIGFzIHdlbGwgYXMgZXZpZGVuY2Ugb2YgcmlnaHQgaGVtaWRpYXBocmFnbQpkeXNmdW5jdGlvbiBhbmQgdHJhY2hlYWwgc3Rlbm9zaXMgcy9wIHRyYWNoZWFsIHN0ZW50IGluIFsqKjgtMTYqKl0uIEhlCndhcyBpbiBoaXMgVVNPSCBhdCBoaXMgcmVoYWIgZmFjaWxpdHksIHdlbnQgdG8gWyoqSG9zcGl0YWwgKipdIGNsaW5pYwp5ZXN0ZXJkYXkgZm9yIGNyeW8gb2YgZ3JhbnVsYXRpb24gdGlzc3VlIG9uIHRoZSBzdXBlcmlvciBlZGdlIG9mCnRoZSB0cmFjaGVvc3RvbXksIGF0IHdoaWNoIHBvaW50IGhlIGJlY2FtZSBhY3V0ZWx5CmJyb25jaG9zcGFzdGljLCBkZXNhdHRpbmcgdG8gbG93LW1pZCA4MCdzIChmcm9tIGxvdyA5MCdzKS4gSGUKd2FzIGdpdmVuIHNldmVyYWwgbmVidWxpemVyIHRyZWF0bWVudHMgYW5kIHRoZSB0cmFjaCB3YXMKcmVwbGFjZWQuIFRoZXkgc3VjdGlvbmVkIHVwIGEgbGl0dGxlIGJsb29kLiBQZXIgSVAsIHRoZSBmZWVsaW5nCndhcyB0aGF0IGhlIGxpa2VseSBiZWNhbWUgYnJvbmNob3NwYXN0aWMgaW4gdGhlIHNldHRpbmcgb2Ygc29tZQpjaGVtaWNhbCBpcnJpdGF0aW9uIGZyb20gbWlsZCBibGVlZGluZy4gV2l0aCBzb21lIHN1cHBsZW1lbnRhbApPMiwgaGlzIHNhdHMgY2FtZSBiYWNrIHVwLiBUaGV5IGNvbnRlbXBsYXRlZCBnaXZpbmcgaGltIHNvbWUKc29sdW1lZHJvbCBwcmlvciB0byBzZW5kaW5nIGhpbSBob21lLCBidXQgZmVsdCB0aGF0IGhpcyBjbGluaWNhbApzdGF0dXMgaGFkIGltcHJvdmVkLiBUb2RheSwgYXQgcmVoYWIsIGhlIGJlY2FtZSB2ZXJ5IGRpc3RyZXNzZWQKYW5kIGh5cG94aWMgb25jZSBhZ2FpbiwgYW5kIHdhcyB0cmFuc2ZlcnJlZCB0byB0aGUgWyoqSG9zcGl0YWwxIDE4KipdIEVELgouCkluIHRoZSBFRCwgaGlzIHRyYWNoIHdhcyBhZGp1c3RlZCBhbmQgaGUgd2FzIHBsYWNlZCBvbiB0aGUgdmVudCwKYW5kIGhpcyByZXNwaXJhdG9yeSBkaXN0cmVzcyBncmVhdGx5IGltcHJvdmVkLiBIZSB0aGVuCnRyYW5zaWVudGx5IGJlY2FtZSBoeXBvdGVuc2l2ZSB0byB0aGUgODAncyBmcm9tIHRoZSAxMTAncy4gSGUKd2FzIHVuaG9va2VkIGZyb20gdGhlIHZlbnQgdGVtcG9yYXJpbHkgb3V0IG9mIGNvbmNlcm4gZm9yCmF1dG8tcGVlcCwgYnV0IHRoaXMgZGlkIG5vdCBtYWtlIGFueSBkaWZmZXJlbmNlIHRvIGhpcwpwcmVzc3VyZXMuIEhlIHJlY2VpdmVkIGEgc21hbGwgTlMgYm9sdXMsIGFuZCBoaXMgbmV4dCBibG9vZApwcmVzc3VyZSB3YXMgYmFjayB1cCB0byB0aGUgMTAwJ3MuIEhlIGFsc28gcmVjZWl2ZWQgc3Rlcm9pZHMgYW5kCmFudGliaW90aWNzIHByaW9yIHRvIHRyYW5zZmVyLgouCk9uIGFycml2YWwgdG8gdGhlIFsqKkhvc3BpdGFsIFVuaXQgTmFtZSAxNTMqKl0sIHRoZSBwYXRpZW50IHdhcyBjb21wbGFpbmluZyBtYWlubHkgb2YKYmFjayBwYWluIGFuZCB3YXMgcmVxdWVzdGluZyBkaWxhdWRpZC4gSGUgYWxzbyBjb21wbGFpbmVkIG9mCnNob3J0bmVzcyBvZiBicmVhdGgsIGFuZCBmZWx0IHRoYXQgaGUgd2Fzbid0IGFibGUgdG8gZ2V0IGEgZ29vZApicmVhdGggaW4gZnJvbSB0aGUgdmVudC4gQmV0d2VlbiB0aW1lcyBvZiBzdGltdWx1cywgaGUgZmVsbAphc2xlZXAgYW5kIGxvb2tlZCBtdWNoIG1vcmUgY29tZm9ydGFibGUsIGJ1dCB3YXMgYWxzbyBub3QKZHJhd2luZyBmcmVxdWVudCBlbm91Z2ggYnJlYXRocywgc28gaGUgd2FzIHN3aXRjaGVkIHRvIE1NVi4gSGUKbm90ZWQgdGhhdCBoaXMgcmlnaHQgbGVnIHdhcyBtb3JlIGVyeXRoZW1hdG91cyB0aGFuIGl0IHVzdWFsbHkKaXMsIGJ1dCBkZW5pZWQgcGFpbi4KCgpQYXN0IE1lZGljYWwgSGlzdG9yeToKMSkgU2V2ZXJlIE8yLWRlcGVuZGVudCBDT1BECjIpIFRyYWNoZWFsIHN0ZW5vc2lzIHMvcCBzdGVudCwgc3RlbnQgcmVtb3ZhbCwgZGlsYXRhdGlvbiwgYW5kCnRyYWNoZW9zdG9teSBpbnNlcnRpb24gWyoqTW9udGggKG9ubHkpIDIwNSoqXS1bKioyMTI0LTgtOSoqXSAoSW50ZXJ2ZW50aW9uYWwgcHVsbW9ub2xvZ3kKbm90ZXMgcmVwb3J0IGFuICIiQSIiLXNoYXBlZCBzdGVub3NpcyB3aXRoIHRyYWNoZW9tYWxhY2lhIGF0IHRoZQpsZXZlbCBvZiB0aGUgMXN0IGFuZCAybmQgdHJhY2hlYWwgcmluZ3MuIFRoZSBzdGVub3NpcyB3YXMKZGlsYXRlZCB3aXRoIGEgcmlnaWQgYnJvbmNob3Njb3BlKQozKSBEaWFiZXRlcyBtZWxsaXR1cyB0eXBlIDIuCjQpIE9zdGVvcG9yb3Npcy4KNSkgSGVwYXRpdGlzIEIuCjYpIENocm9uaWMgbG93ZXIgYmFjayBwYWluLCBhc3NvY2lhdGVkIHdpdGggbWlkLXRob3JhY2ljCnZlcnRlYnJhbCBjb21wcmVzc2lvbiBmcmFjdHVyZXMgZnJvbSBvc3Rlb3Bvcm9zaXMoZGV0YWlscwp1bmtub3duKS4KNykgTGVmdCAzcmQgZmluZ2VyIGFtcHV0YXRpb24uCjgpIEhpc3Rvcnkgb2YgaW50cmF2ZW5vdXMgZHJ1ZyB1c2UuCjkpIG11bHRpLWRydWcgcmVzaXN0YW50IHBzZXVkb21vbmFzIGluZmVjdGlvbiwgKyBNUlNBIHNwdXR1bS8KbmFzYWwgc3dhYgoxMCkgUFVEIGh4IG9mIHVsY2VycyAoZ2FzdHJpYy9kdW9kZW5hbCkKMTEpIGNocm9uaWMgcmlnaHQgaGVtaWRpYXBocmFnbSBlbGV2YXRpb24gLSBwaHJlbmljIG4uCmR5c2Z1bmN0aW9uCgoKU29jaWFsIEhpc3Rvcnk6CkxpdmVzIGF0IFsqKkxvY2F0aW9uICoqXSBbKipMb2NhdGlvbiAqKl0gcmVoYWIsIGV4dGVuc2l2ZSBzbW9raW5nIGhpc3RvcnkgYnV0CmRlbmllcyBjdXJyZW50IHNtb2tpbmcuICBEcmFuayBoZWF2aWx5IGluIHBhc3QsIGxhc3QgZHJpbmsgbG9uZwp0aW1lIGFnby4gIGgvbyBJVkRVIGJ1dCBoYXMgYmVlbiBjbGVhbiBmb3IgcGFzdCA3IHllYXJzLCBkb2VzCm5vdCBuZWVkIG1ldGhhZG9uZSBtYWludGVuYW5jZS4KCgpGYW1pbHkgSGlzdG9yeToKTkMKClBoeXNpY2FsIEV4YW06ClZpdGFsczogVDogOTkuNiBCUDogMTA0LzY4IEhSOiA3NiBSUjogMTkgTzJTYXQ6IDk1JSBvbiBNTVYKNTAweDEwICgrNiksIHBlZXAgMTAsIEk6RSAxOjYuNSwgUElQIDIyLCBhdXRvcGVlcCA1LgpHRU46IGNocm9uaWNhbGx5IGlsbC1hcHBlYXJpbmcsIG5vIGFjdXRlIGRpc3RyZXNzIHdoaWxlIGFzbGVlcCwKbWlsZCByZXNwaXJhdG9yeSBkaXN0cmVzcyBvbmNlIGF3YWtlCkhFRU5UOiBFT01JLCBQRVJSTCwgc2NsZXJhZSBhbmljdGVyaWMsIG5vIGVwaXN0YXhpcyBvcgpyaGlub3JyaGVhLCBNTU0sIE9QIENsZWFyLCBlZGVudHVsb3VzCk5FQ0s6IE5vIEpWRCwgbm8gYnJ1aXRzLCBubyBjZXJ2aWNhbCBseW1waGFkZW5vcGF0aHksIHRyYWNoIGluCnBsYWNlCkNPUjogUlJSLCBubyBNL0cvUiwgbm9ybWFsIFMxIFMyLCByYWRpYWwgcHVsc2VzICsyClBVTE06IEx1bmdzIHdpdGggcG9vciBhaXJmbG93LCBsb3cgbHVuZyB2b2x1bWVzLCBvYnZpb3VzCmh5cGVyaW5mbGF0aW9uIHdpdGggYmFycmVsIGNoZXN0LiBQcm9sb25nZWQgZXhwaXJhdG9yeSBwaGFzZQp3aXRoIHdoZWV6ZS4KQUJEOiBTb2Z0LCBOVCwgTkQsICtCUywgbm8gSFNNLCBubyBtYXNzZXMKRVhUOiBSTEUgd2l0aCBlcnl0aGVtYSBhbmQgcGl0dGluZyBlZGVtYSwgbm8gcGFscGFibGUgY29yZHMsIE5UCgpORVVSTzogYWxlcnQsIG9yaWVudGVkIHRvIHBlcnNvbiwgcGxhY2UsIGFuZCB0aW1lLiBDTiBJSSA_Pz8_Pz8gWElJCmdyb3NzbHkgaW50YWN0LiBNb3ZlcyBhbGwgNCBleHRyZW1pdGllcy4gU3RyZW5ndGggNS81IGluIHVwcGVyCmFuZCBsb3dlciBleHRyZW1pdGllcy4gUGF0ZWxsYXIgRFRSICsxLiBQbGFudGFyIHJlZmxleApkb3duZ29pbmcuIE5vIGdhaXQgZGlzdHVyYmFuY2UuIE5vIGNlcmViZWxsYXIgZHlzZnVuY3Rpb24uClNLSU46IE5vIGphdW5kaWNlLCByYXNoIG9yIGVjY2h5bW9zZXMuIEV2aWRlbmNlIG9mIGNlbGx1bGl0aXMgaW4KUkxFIGFzIGFib3ZlLgoKClBlcnRpbmVudCBSZXN1bHRzOgo9PT09PUFETUlTU0lPTiBMQUJTPT09PT0KWyoqMjEyNS04LTMqKl0gMDc6NTJQTSAgIFRZUEUtQVJUIFRFTVAtMzcuMyBQTzItMTA4KiBQQ08yLTc2KiBQSC03LjI5KgpUT1RBTCBDTzItMzgqIEJBU0UgWFMtNiBJTlRVQkFURUQtTk9UIElOVFVCQQpbKioyMTI1LTgtMyoqXSAwNzoyNEFNICAgTEFDVEFURS0xLjYKWyoqMjEyNS04LTMqKl0gMDc6MDBBTSAgIEdMVUNPU0UtMTIxKiBVUkVBIE4tOSBDUkVBVC0wLjYgU09ESVVNLTE0NQpQT1RBU1NJVU0tNC4yIENITE9SSURFLTk3IFRPVEFMIENPMi00MCogQU5JT04gR0FQLTEyClsqKjIxMjUtOC0zKipdIDA3OjAwQU0gICBXQkMtMTIuOSogUkJDLTQuODcgSEdCLTExLjkqIEhDVC00MC40IE1DVi04MwpNQ0gtMjQuNCogTUNIQy0yOS40KiBSRFctMTIuMwpbKioyMTI1LTgtMyoqXSAwNzowMEFNICAgTkVVVFMtODMuNCogTFlNUEhTLTguOCogTU9OT1MtNi41IEVPUy0xLjAKQkFTT1MtMC4zClsqKjIxMjUtOC0zKipdIDA3OjAwQU0gICBQTFQgQ09VTlQtMzAwCgpDWFIgWyoqMjEyNS04LTMqKl0KCjEuIE5vIHNpZ25pZmljYW50IGNoYW5nZSB3aXRoIGxvdyBsdW5nIHZvbHVtZXMgc29tZXdoYXQgbGltaXRpbmcKZXZhbHVhdGlvbi4KMi4gQmliYXNpbGFyIGF0ZWxlY3Rhc2lzIHdpdGggY3Jvd2Rpbmcgb2YgYnJvbmNob3Zhc2N1bGF0dXJlIGFuZApzbWFsbCByaWdodApwbGV1cmFsIGVmZnVzaW9uLgozLiBJbnRlcnZhbCByZW1vdmFsIG9mIFBJQ0MgbGluZS4KCkxFIFUvUyBbKioyMTI1LTgtMyoqXQoKSU1QUkVTU0lPTjogTm8gZXZpZGVuY2Ugb2YgRFZUIGludm9sdmluZyB0aGUgcmlnaHQgbG93ZXIKZXh0cmVtaXR5LgoKCkJyaWVmIEhvc3BpdGFsIENvdXJzZToKQXNzZXNzbWVudDogNTIgeS9vIE0gd2l0aCBzZXZlcmUgQ09QRCBvbiBob21lIE8yIHMvcCB0cmFjaCwKdHJhY2hlb21hbGFjaWEgcy9wIHRyYWNoZWFsIHN0ZW50IHRoZW4gZGlsYXRhdGlvbiwgYW5kIHJpZ2h0CnBocmVuaWMgbmVydmUgZHlzZnVuY3Rpb24gcHJlc2VudGVkIHdpdGggYWN1dGUgcmVzcGlyYXRvcnkKZGlzdHJlc3MuCi4KIyBSZXNwaXJhdG9yeSBGYWlsdXJlOiBUaGUgcGF0aWVudCBwcmVzZW50ZWQgdG8gdGhlIEVEIGFmdGVyCmluY3JlYXNlZCByZXNwaXJhdG9yeSBkaXN0cmVzcyBhbmQgaHlwb3hpYS4gVGhlIHBhdGllbnQgaGFkIGhhZAphbiBJUCBwcm9jZWR1cmUgdGhlIHByZXZpb3VzIGRheSBhbmQgbGlrZWx5IGhhZCBzb21lIG1pbGQKY2hlbWljYWwgaXJyaXRhdGlvbiBmcm9tIGJsb29kIGluaGFsYXRpb24gYW5kIG1hbmlwdWxhdGlvbiBvZgpoaXMgdHJhY2hlb3N0b215LCByZXN1bHRpbmcgaW4gZWFzaWx5IHRyaWdnZXJlZCBicm9uY2hvc3Bhc20uClRob3VnaCBoZSByZXNwb25kZWQgdGhlbiB0byBuZWJ1bGl6ZXJzLCBzdWN0aW9uIG9mIGxpdHRsZSBibG9vZCwKYW5kIE8yLCBoZSBjb250aW51ZWQgdG8gZXhwZXJpZW5jZSByZXNwaXJhdG9yeSBkaXN0cmVzcyB0aGUgbmV4dApkYXksIGFuZCB3YXMgdGFrZW4gdG8gdGhlIEVELiBIZSBoYXMgdmVyeSBsaXR0bGUgcmVzZXJ2ZSBzbyBpdAppcyBsaWtlbHkgdGhhdCB2ZXJ5IHNtYWxsIGRpc3J1cHRpb25zIGNhbiBpbml0aWF0ZSBhbgpleGFjZXJiYXRpb24uCiAgIFBsZWFzZSBzZWUgSFBJIGZvciBkZXRhaWxzIG9mIGhpcyBjb3Vyc2UgaW4gdGhlIEVELiBBZnRlcgp0cmFuc2ZlciB0byB0aGUgZmxvb3IsIHRoZSBwYXRpZW50IG9jY2FzaW9uYWxseSBjb21wbGFpbmVkIG9mCnNob3J0bmVzcyBvZiBicmVhdGguIEhlIHdhcyBjb250aW51ZWQgb24gTU1WLCB3aGljaCB3YXMKYXBwcm9wcmlhdGUgZ2l2ZW4gaGlzIHBlcmlvZHMgb2YgYXBuZWEgKGxpa2VseSBkdWUgdG8gaGlzIHBhaW4KbWVkcy4pIFRoZSBwYXRpZW50IGhhZCBhIHNpZ25pZmljYW50IGxldmVsIG9mIGFueGlldHksIGFuZApjb25zdGFudGx5IHJlcXVlc3RlZCBJViBEaWxhdWRpZCBmb3IgYmFjayBwYWluLiBUaGVyZSB3YXMgYQpjb25jZXJuIGZvciBhdXRvLXBlZXAgZ2l2ZW4gdGhlIGVmZmVjdCBvZiBhbnhpZXR5IG9uIGhpcwpicmVhdGhpbmcgcmF0ZS9kZXB0aCwgdGh1cyBhbnhpZXR5IG1lZGljYXRpb25zIHdlcmUgcHJvdmlkZWQgYXMKbmVlZGVkLiBEdXJpbmcgaGlzIHN0YXksIG5vIGluZmVjdGlvdXMgZXRpb2xvZ3kgd2FzIGZvdW5kIGZvcgpoaXMgZXhhY2VyYmF0aW9uLiBIZSB3YXMgdHJlYXRlZCBpbml0aWFsbHkgd2l0aCBJViBzdGVyb2lkcyBmb3IKQ09QRCBleGFjZXJiYXRpb24sIGFuZCB0cmFuc2l0aW9uZWQgdG8gUE8gUHJlZG5pc29uZSBwcmlvciB0bwpkaXNjaGFyZ2UuIEhlIHdhcyBtYWludGFpbmVkIG9uIHNjaGVkdWxlZCBuZWJzLCBhbmQgcmVjZWl2ZWQKQXppdGhyb215Y2luIGluIHRoZSBFRCwgYnV0IGl0IHdhcyBkaXNjb250aW51ZWQgZWFybHkgYWZ0ZXIgYW4KaW5mZWN0aW91cyB0cmlnZ2VyIHdhcyBydWxlZCBvdXQuICBUaGUgcHQgd2FzIHdlYW5lZCBvZmYgdGhlCnZlbnQgd2l0aCBubyBjb21wbGljYXRpb25zLCBhbmQgd2FzIG94eWdlbmF0aW5nIHdlbGwgKGJhc2VsaW5lCjkwcywgb2NjYXNpb25hbCB1cHBlciA4MHMpIHZpYSAyTCBuYXNhbCBjYW5udWxhIGFuZCB0cmFjaGVvc3RvbXkKbWFzayBvbiBkYXkgb2YgZGlzY2hhcmdlLiBIZSBoYXMgbm90IGJlZW4gZGlmZmljdWx0IHRvIGFyb3VzZQp0aHJvdWdob3V0IGhpcyBob3NwaXRhbGl6YXRpb24uCiAgSGUgd2lsbCBuZWVkIHRvIGZvbGxvdy11cCBpbiAxIHdlZWsgd2l0aCBoaXMgUENQIHRvIGRldGVybWluZQp0aGUgYXBwcm9wcmlhdGUgUHJlZG5pc29uZSB0YXBlciBnaXZlbiBoaXMgaHggb2YgZnJlcXVlbnQgQ09QRApleGFjZXJiYXRpb25zLiBIaXMgUENQIHdpbGwgYWxzbyBhZGp1c3QgaGlzIEZ1cm9zZW1pZGUgZG9zZSBhcwpuZWVkZWQuCi4KIyBDZWxsdWxpdGlzOiBUaGUgcGF0aWVudCBwcmVzZW50ZWQgd2l0aCBhIHBhdGNoIG9mCmVyeXRoZW1hL2VkZW1hIG9uIGhpcyByaWdodCBsb3dlciBleHRyZW1pdHkgd2hpY2ggaGUgZGVzY3JpYmVkCmFzIGNocm9uaWMsIGFuZCB1c3VhbGx5IG1vcmUgZWRlbWF0b3VzLiBUaGVyZSBpcyBldmlkZW5jZSBvZgpzdGFzaXMuIFRoZSBlcnl0aGVtYSBpcyB3b3JzZSBwZXIgdGhlIHBhdGllbnQsIGFuZCBoYXMgYmVlbgp0cmVhdGVkIGZvciBNUlNBIGNlbGx1bGl0aXMgaW4gdGhlIHBhc3QuIER1cmluZyBoaXMgc3RheSwgYW4KYWRkaXRpb25hbCBwYXRjaCBhcHBlYXJlZCBvbiBoaXMgbGVmdCBsb3dlciBleHRyZW1pdHksIHRob3VnaApsZXNzIGVyeXRoZW1hdG91cyBhbmQgZWRlbWF0b3VzIGluIGNvbXBhcmlzb24uIFRoZSBwYXRpZW50IHdhcwppbml0aWF0ZWQgb24gVmFuY29teWNpbiAxZyBJViBxMTIgeCA3IGRheXMgKGxhc3QgZGF5ID0gWyoqOC05KipdKSBmb3IKcHJlc3VtZWQgTVJTQSBjZWxsdWl0aXMsIGdpdmVuIGhpcyBoaXN0b3J5LiBPbiBkYXkgb2YgZGlzY2hhcmdlLAp0aGUgZWRlbWEgYW5kIGVyeXRoZW1hIGhhZCBpbXByb3ZlZCwgYW5kIHRoZSBsb3dlciBleHRyZW1pdGllcwp3ZXJlIG9ubHkgbWlsZGx5IHRlbmRlciB0byBwYWxwYXRpb24uIFRoZSBwYXRpZW50IGhhcyBhIFBJQ0MKbGluZSBpbiBwbGFjZS4gSGUgd2lsbCBiZSBjb21wbGV0aW5nIHRoZSBjb3Vyc2UgYXQgcmVoYWIuIFRoZXJlCm1heSBhbHNvIGJlIGEgY29tcG9uZW50IG9mIHZlbm91cyBzdGFzaXMgdG8gaGlzIGxvd2VyIGV4dHJlbWl0eQpjaGFuZ2VzLiBIZSB3YXMgcmUtc3RhcnRlZCBvbiBGdXJvc2VtaWRlIDIwbWcgUE8gYmlkLCB0byBiZQphZGp1c3RlZCBieSBoaXMgUENQIGFzIG5lZWRlZC4KLgojQ2hyb25pYyBiYWNrIHBhaW46IFRoZSBwYXRpZW50IGNvbnRpbnVlZCB0byBjb21wbGFpbiBvZiBjaHJvbmljCmJhY2sgcGFpbiwgd29yc2VuZWQgYWZ0ZXIgbGF5aW5nIHN1cGluZSB3aGlsZSBpbnR1YmF0ZWQsIHBlciBwdC4KSGUgaGFzIGEgaGlzdG9yeSBvZiBJViBkcnVnIGFidXNlLiBIaXMgYnJlYWt0aHJvdWdoIHBhaW4gd2FzCmluaXRpYWxseSBtYW5hZ2VkIHdpdGggSVYgRGlsYXVkaWQsIGFuZCBoZSB3YXMgdHJhbnNpdGlvbmVkIHRvClBPIE94eWNvZG9uZSAoaGlzIGhvbWUgcmVnaW1lbikgcHJpb3IgdG8gZGlzY2hhcmdlLiBQYWluIHdhcwp3ZWxsIGNvbnRyb2xsZWQgb24gT3h5Y29kb25lIG9uIGRheSBvZiB0cmFuc2ZlciB0byByZWhhYi4KLgojQW54aWV0eTogVGhlIHBhdGllbnQgYXBwZWFycyB0byBoYXZlIGEgYmFzZWxpbmUgbGV2ZWwgb2YKYW54aWV0eS4gSGUgd2FzIHJlLXN0YXJ0ZWQgb24gaGlzIGhvbWUgQ2VsZXhhLiBIZSB3YXMgYWxzbyBnaXZlbgphIGRvc2Ugb2YgQWxwcmF6b2xhbSBhdCBuaWdodCwgd2hpY2ggaGVscGVkIGhpcyBhbnhpZXR5LiBIZSBpcwp0byBmb2xsb3ctdXAgd2l0aCBoaXMgUENQIFsqKk5hbWUgSW5pdGlhbCAoUFJFKSAxNzYqKl0gMSB3ZWVrIHRvIHJlLWFzc2VzcyB0aGUgbmVlZApmb3IgYWRkaXRpb25hbCBhbnRpLWFueGlldHkgYWdlbnRzLgouCiMgRE0yOiBUaGUgcGF0aWVudCBpcyBvbiBhIGxpc3BybyBzbGlkaW5nIHNjYWxlIGFzIGFuCm91dHBhdGllbnQuIEhlIHdhcyBjb250aW51ZWQgb24gYSBzbGlkaW5nIHNjYWxlIGhlcmUgYW5kCm1vbml0b3JlZCB3aXRoIGZpbmdlcnN0aWNrcy4gSGUgZGlkIG5vdCBoYXZlIGFueSAgcHJvYmxlbXMgd2l0aApnbHVjb3NlIGNvbnRyb2wgZHVyaW5nIGhpcyBzdGF5LgoKCk1lZGljYXRpb25zIG9uIEFkbWlzc2lvbjoKTGlzcHJvIEluc3VsaW4gU0MgKHBlciBJbnN1bGluIEZsb3dzaGVldCkKQWNldGFtaW5vcGhlbiAzMjUtNjUwIG1nIFBPIFE2SDpQUk4KSXByYXRyb3BpdW0gQnJvbWlkZSBNREkgNiBQVUZGIElIIFE0SApBbGJ1dGVyb2wgTURJIDYgUFVGRiBJSCBRNEgKTGFjdHVsb3NlIDMwIG1MIFBPIFE4SDpQUk4KUGFudG9wcmF6b2xlIDQwIG1nIFBPIFEyNEgKUHJlZG5pU09ORSAxMCBtZyBQTyBEQUlMWQpDaXRhbG9wcmFtIEh5ZHJvYnJvbWlkZSAyMCBtZyBQTyBEQUlMWQpQcmVnYWJhbGluICpORiogNzUgbWcgT3JhbCBbKipIb3NwaXRhbDEgKipdCkZ1cm9zZW1pZGUgMjAgbWcgUE8gQklECk94eWNvZG9uZSA1LTIwbWcgcTNoIHBybgoKCkRpc2NoYXJnZSBNZWRpY2F0aW9uczoKMS4gSW5zdWxpbiBSZWd1bGFyIEh1bWFuIDEwMCB1bml0L21MIFNvbHV0aW9uIFNpZzogT25lICgxKQpJbmplY3Rpb24gQVNESVIgKEFTIERJUkVDVEVEKTogUGxlYXNlIGNvbnRpbnVlIEluc3VsaW4gTGlzcHJvIGFzCnByZXZpb3VzbHkgZGlyZWN0ZWQuCjIuIENpdGFsb3ByYW0gMjAgbWcgVGFibGV0IFNpZzogT25lICgxKSBUYWJsZXQgUE8gREFJTFkgKERhaWx5KS4KCjMuIExhY3R1bG9zZSAxMCBncmFtLzE1IG1MIFN5cnVwIFNpZzogVGhpcnR5ICgzMCkgTUwgUE8gUThICihldmVyeSA4IGhvdXJzKSBhcyBuZWVkZWQuCjQuIFBhbnRvcHJhem9sZSA0MCBtZyBUYWJsZXQsIERlbGF5ZWQgUmVsZWFzZSAoRS5DLikgU2lnOiBPbmUKKDEpIFRhYmxldCwgRGVsYXllZCBSZWxlYXNlIChFLkMuKSBQTyBRMjRIIChldmVyeSAyNCBob3VycykuCjUuIEFjZXRhbWlub3BoZW4gMzI1IG1nIFRhYmxldCBTaWc6IDEtMiBUYWJsZXRzIFBPIFE2SCAoZXZlcnkgNgpob3VycykgYXMgbmVlZGVkLgo2LiBQcmVnYWJhbGluIDc1IG1nIENhcHN1bGUgU2lnOiBPbmUgKDEpIENhcHN1bGUgUE8gYmlkICgpLgo3LiBDYW1waG9yLU1lbnRob2wgMC41LTAuNSAlIExvdGlvbiBTaWc6IE9uZSAoMSkgQXBwbCBUb3BpY2FsClsqKkhvc3BpdGFsMSAqKl0gKDIgdGltZXMgYSBkYXkpIGFzIG5lZWRlZC4KOC4gU29kaXVtIENobG9yaWRlIDAuOSAlIDAuOSAlIFBhcmVudGVyYWwgU29sdXRpb24gU2lnOiBUaHJlZQooMykgTUwgSW50cmF2ZW5vdXMgUFJOIChhcyBuZWVkZWQpIGFzIG5lZWRlZCBmb3IgbGluZSBmbHVzaDoKRmx1c2ggd2l0aCAzIG1MIE5vcm1hbCBTYWxpbmUgZXZlcnkgOCBob3VycyBhbmQgUFJOLiAuCjkuIFZhbmNvbXljaW4gaW4gRGV4dHJvc2UgMSBncmFtLzIwMCBtTCBQaWdneWJhY2sgU2lnOiBPbmUgKDEpCmRvc2UgSW50cmF2ZW5vdXMgUSAxMkggKEV2ZXJ5IDEyIEhvdXJzKTogR2l2ZSAxMDAwbWcgSVYgcTEyaHIgeAozIChsYXN0IGRvc2UgNy8zMS4pLgoxMC4gUHJlZG5pc29uZSAyMCBtZyBUYWJsZXQgU2lnOiBUd28gKDIpIFRhYmxldCBQTyBEQUlMWQooRGFpbHkpOiBGaXJzdCBkYXkgb24gUHJlZG5pc29uZSA0MG1nIGRhaWx5ID0gWyoqOC03KipdLgoxMS4gU29kaXVtIENobG9yaWRlIDAuOSAlIDAuOSAlIFBhcmVudGVyYWwgU29sdXRpb24gU2lnOiBUZW4KKDEwKSBNTCBJbnRyYXZlbm91cyBQUk4gKGFzIG5lZWRlZCkgYXMgbmVlZGVkIGZvciBsaW5lIGZsdXNoOgpQSUNDLCBub24taGVwYXJpbiBkZXBlbmRlbnQ6IEZsdXNoIHdpdGggMTAgbUwgTm9ybWFsIFNhbGluZQpkYWlseSBhbmQgUFJOIHBlciBsdW1lbi4gIC4KMTIuIFNvZGl1bSBDaGxvcmlkZSAwLjY1ICUgQWVyb3NvbCwgU3ByYXkgU2lnOiBbKioxLTEwKipdIFNwcmF5cyBOYXNhbApRSUQgKDQgdGltZXMgYSBkYXkpIGFzIG5lZWRlZC4KMTMuIE94eWNvZG9uZSA1IG1nIFRhYmxldCBTaWc6IDEtNCBUYWJsZXRzIFBPIFEzSCAoZXZlcnkgMwpob3VycykgYXMgbmVlZGVkIGZvciBwYWluLgoxNC4gQWxidXRlcm9sIFN1bGZhdGUgOTAgbWNnL0FjdHVhdGlvbiBIRkEgQWVyb3NvbCBJbmhhbGVyIFNpZzoKU2l4ICg2KSBwdWZmcyBJbmhhbGF0aW9uIGV2ZXJ5IGZvdXIgKDQpIGhvdXJzLgoxNS4gSXByYXRyb3BpdW0gQnJvbWlkZSAxNyBtY2cvQWN0dWF0aW9uIEFlcm9zb2wgU2lnOiBTaXggKDYpCnB1ZmZzIEluaGFsYXRpb24gZXZlcnkgZm91ciAoNCkgaG91cnMuCjE2LiBGdXJvc2VtaWRlIDIwIG1nIFRhYmxldCBTaWc6IE9uZSAoMSkgVGFibGV0IFBPIEJJRCAoMiB0aW1lcwphIGRheSkuCgoKRGlzY2hhcmdlIERpc3Bvc2l0aW9uOgpFeHRlbmRlZCBDYXJlCgpGYWNpbGl0eToKWyoqSG9zcGl0YWwxICoqXQoKRGlzY2hhcmdlIERpYWdub3NpczoKUHJpbWFyeToKQ09QRCBleGFjZXJiYXRpb24gc2Vjb25kYXJ5IHRvIGlycml0YXRpb24gcy9wIHRyYWNoZW9zdG9teQptYW5pcHVsYXRpb24KQ2VsbHVsaXRpcwpTZWNvbmRhcnk6CkNocm9uaWMgYmFjayBwYWluCkRpYWJldGVzIG1lbGxpdHVzCgoKRGlzY2hhcmdlIENvbmRpdGlvbjoKR29vZCwgcHQgaXMgaGVtb2R5bmFtaWNhbGx5IHN0YWJsZSwgc2F0dGluZyB3ZWxsIGluIHVwcGVyCjgwcy05MHMgd2l0aCAyTCBOQyBhbmQgdHJhY2hlb3N0b215IG1hc2ssIGJyZWF0aGluZyB1bmxhYm9yZWQsCndpdGggYmlsYXRlcmFsIGxvd2VyIGV4dHJlbWl0eSBlcnl0aGVtYSBhbmQgZWRlbWEgaW1wcm92aW5nLgpQYWluIGlzIGNvbnRyb2xsZWQgb24gb3JhbCBtZWRpY2F0aW9ucy4gUHQgaXMgYW54aW91cyBhYm91dCBoaXMKQ09QRCBhdCBiYXNlbGluZS4gUHQgaGFzIG5vdCBiZWVuIGRpZmZpY3VsdCB0byBhcm91c2UgZHVyaW5nIGhpcwpzdGF5LgoKCkRpc2NoYXJnZSBJbnN0cnVjdGlvbnM6CllvdSB3ZXJlIGFkbWl0dGVkIGZvciB0cmVhdG1lbnQgb2YgcmVzcGlyYXRvcnkgZGlzdHJlc3MsIGxpa2VseQpyZWxhdGVkIHRvIHRoZSBjcnlvIHByb2NlZHVyZSBmb3IgeW91ciB0cmFjaGVvc3RvbXkgc2l0ZSwgYXMKd2VsbCBhcyB5b3VyIGV4dGVuc2l2ZSBoaXN0b3J5IG9mIENPUEQgZXhhY2VyYmF0aW9ucy4gIFlvdSBoYXZlCmltcHJvdmVkIGFmdGVyIElWIHN0ZXJvaWQgdHJlYXRtZW50IGFuZCBicmVhdGhpbmcgdHJlYXRtZW50cywKYW5kIHdpbGwgYmUgZGlzY2hhcmdlZCBiYWNrIHRvIHJlaGFiLiBQbGVhc2UgY29udGludWUgdG8ga2VlcAp5b3VyIGxlZ3MgZWxldmF0ZWQuCgpUaGUgZm9sbG93aW5nIGNoYW5nZXMgd2VyZSBtYWRlIHRvIHlvdXIgbWVkaWNhdGlvbnM6Ci0gQ29udGludWUgUHJlZG5pc29uZSA0MG1nIFBPIGRhaWx5KHlvdXIgUENQIHdpbGwgYWRqdXN0IHRoZQpkb3NlKQotIFJlLXN0YXJ0IEZ1cm9zZW1pZGUgMjBtZyBQTyBiaWQKCklmIHlvdSBleHBlcmllbmNlIGFueSBpbmNyZWFzaW5nIFNPQiwgY2hlc3QgcGFpbiwgaW5jcmVhc2VkCnN3ZWxsaW5nIG9yIHBhaW4gaW4geW91ciBsb3dlciBsZWdzLCBvciBoYXZlIGFueSBvdGhlciBjb25jZXJucywKCkZvbGxvd3VwIEluc3RydWN0aW9uczoKUGxlYXNlIHNlZSB5b3VyIFBDUCwgWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpICoqXS4gWyoqTGFzdCBOYW1lIChTVGl0bGUpICoqXSxbKipGaXJzdCBOYW1lMyAoTEYpICoqXSBDLiBbKipUZWxlcGhvbmUvRmF4ICgxKSAzNzgyNCoqXSBpbiAxIHdlZWsKdG8gZm9sbG93LXVwIG9uIHlvdXIgQ09QRCBleGFjZXJiYXRpb24gYW5kIGFkanVzdCB5b3VyClByZWRuaXNvbmUgbWVkaWNhdGlvbiB0YXBlciBhbmQgRnVyb3NlbWlkZSBtZWRpY2F0aW9uLgoKCgpDb21wbGV0ZWQgYnk6WyoqMjEyNS04LTcqKl0iCg=='
b''
b''
b''
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjExMy01LTQqKl0gICAgICAgICAgICAgIERpc2NoYXJnZSBEYXRlOiAgIFsqKjIxMTMtNS02KipdCgpEYXRlIG9mIEJpcnRoOiAgWyoqMjA3Mi02LTEyKipdICAgICAgICAgICAgIFNleDogICBGCgpTZXJ2aWNlOiBNRURJQ0lORQoKQWxsZXJnaWVzOgpQYXRpZW50IHJlY29yZGVkIGFzIGhhdmluZyBObyBLbm93biBBbGxlcmdpZXMgdG8gRHJ1Z3MKCkF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDExNjIqKl0KQ2hpZWYgQ29tcGxhaW50OgpPdmVyZG9zZSBvbiBLbG9uaXBpbiBhbmQgQ2VsZXhhCgpNYWpvciBTdXJnaWNhbCBvciBJbnZhc2l2ZSBQcm9jZWR1cmU6CkludHViYXRpb24KCkhpc3Rvcnkgb2YgUHJlc2VudCBJbGxuZXNzOgo0MCB5L28gRiB3aXRoIGNpdGFsb3ByYW0gYW5kIGNsb25hemVwYW0gT0QganVzdCBwcmlvciB0byAxMXBtIG9uClsqKjIxMTMtNS0zKipdLCBxdWFudGl0eSB1bmtub3duLiBTaGUgd2FzIGZvdW5kIGJ5IGEgZnJpZW5kIHdobyBzcG9rZQp3aXRoIGhlciBhbmQgc2hlIG1lbnRpb25lZCBzaGUgdG9vayB0aGUgbWVkaWNhdGlvbnMuIEVNVHMgd2VyZQpjYWxsZWQgYW5kIGVucm91dGUgdG8gWyoqSG9zcGl0YWwxICoqXSwgc2hlIGJlY2FtZSBpbmNyZWFzaW5nbHkKbGV0aGFyZ2ljLiBQZXIgcmVwb3J0IGF0IE9TSCBzaGUgd2FzIGludHViYXRlZCBmb3IgbWVudGFsIHN0YXR1cwpjaGFuZ2UgYW5kIGFpcndheSBwcm90ZWN0aW9uLiBJbml0aWFsbHkgc3RhcnRlZAoocHJvcGh5bGFjdGljYWxseSkgb24gYmljYXJiIGdndCBhbmQgc2hlIHdhcyB0cmFuc2ZlcnJlZCB0bwpbKipIb3NwaXRhbDEgMTgqKl0uCi4KQXQgWyoqSG9zcGl0YWwxICoqXSwgaW5pdGlhbCB2aXRhbHMgSFIgOTAsIEJQIDEwMC82MywgUlIgMTcgTzIgMTAwJSBvbgo1MCVGSU8yLiBQZXIgcmVwb3J0IEVDRyB3aXRoIGluaXRpYWwgcXRjIG9mIDQxMCBub3cgNDc1LiwgUVJTIDgyCmluaXRpYWxseSwgbm93IDg2CnJhdGU9IDk1LiBUb3hpY29sb2d5IHdhcyBjb25zdWx0ZWQgYW5kIHJlY29tbWVuZGVkIGQvYydpbmcKYmljYXJiIGRyaXAuIFBhdGllbnQgZmlnaHRpbmcgdGhlIHZlbnQgaW4gdGhlIEVSIGdpdmVuIDggbWcgSVYKYXRpdmFuIGFuZCBzdGFydGVkIG9uIHZlcnNlZCBndHQuCi4KQXQgdGltZSBvZiB0cmFuc2ZlciB0byB0aGUgWyoqSG9zcGl0YWwgVW5pdCBOYW1lIDE1MyoqXSwgcGF0aWVudCB2ZXJ5IGFnaXRhdGVkLCBmaWdodGluZwp0aGUgdmVudCwgZ290IGFub3RoZXIgMTAgbWcgb2YgdmVyc2VkIChvbiA2LjVtZyBJViB2ZXJzZWQgZ3R0KS4KCgoKUGFzdCBNZWRpY2FsIEhpc3Rvcnk6Cj8gRGVwcmVzc2lvbi9hbnhpZXR5CmgvbyBPdmFyaWFuIEN5c3RzCgoKU29jaWFsIEhpc3Rvcnk6ClNpbmdsZSwgbGl2ZXMgaW4gYW4gYXBhcnRtZW50LiArdG9iYWNjbywgZXRvaC4gbm8gaWxsaWNpdHMKCkZhbWlseSBIaXN0b3J5OgpGSCBvZiBkZXByZXNzaW9uIChHRiwgR00sIFBhcmVudHMpIGRlbmllcyBmaCBvZiBDQUQgb3IgcHVsbW9uYXJ5CnByb2JsZW1zLiBNb3RoZXIgd2l0aCBbKipOYW1lIChOSSkgKipdIGNhIGF0IDY1LgoKUGh5c2ljYWwgRXhhbToKVG1heDogMzcuMyA_Pz8_Pz9DICg5OS4yID8_Pz8_P0YpCgpUY3VycmVudDogMzcuMyA_Pz8_Pz9DICg5OS4yID8_Pz8_P0YpCgpIUjogMTE1ICgxMTUgLSAxMTUpIGJwbQoKQlA6IDEwMi81OSg2OSkgezEwMi81OSg2OSkgLSAxMDIvNTkoNjkpfSBtbUhnCgpSUjogMjIgKDIyIC0gMjIpIGluc3AvbWluCgpTcE8yOiA5OCUKCkhlaWdodDogNjAgSW5jaAoKVmVudGlsYXRvciBtb2RlOiBDUEFQL1BTVgoKVnQgKFNwb250YW5lb3VzKTogNDc1ICg0NzUgLSA0NzUpIG1MCgpSUiAoU3BvbnRhbmVvdXMpOiAxNgoKUEVFUDogNSBjbUgyTwoKRmlPMjogNTAlCiBQSVA6IDExIGNtSDJPCgpTcE8yOiA5OCUKCkFCRzogNy40MC80Ni81Ny8yNi8yCgpWZTogMTIgTC9taW4KClBhTzIgLyBGaU8yOiAxMTQKCgoKClBoeXNpY2FsIEV4YW1pbmF0aW9uCgpHZW5lcmFsIEFwcGVhcmFuY2U6IFdlbGwgbm91cmlzaGVkCgpFeWVzIC8gQ29uanVuY3RpdmE6IFBFUlJMCgpIZWFkLCBFYXJzLCBOb3NlLCBUaHJvYXQ6IE5vcm1vY2VwaGFsaWMKCkx5bXBoYXRpYzogQ2VydmljYWwgV05MCgpDYXJkaW92YXNjdWxhcjogKFMxOiBOb3JtYWwpLCAoUzI6IE5vcm1hbCksIE5vKHQpIFMzLCBObyh0KSBTNCwKKE11cm11cjogTm8odCkgU3lzdG9saWMsIE5vKHQpIERpYXN0b2xpYykKClBlcmlwaGVyYWwgVmFzY3VsYXI6IChSaWdodCByYWRpYWwgcHVsc2U6IFByZXNlbnQpLCAoTGVmdCByYWRpYWwKcHVsc2U6IFByZXNlbnQpLCAoUmlnaHQgRFAgcHVsc2U6IFByZXNlbnQpLCAoTGVmdCBEUCBwdWxzZToKUHJlc2VudCkKClJlc3BpcmF0b3J5IC8gQ2hlc3Q6IChFeHBhbnNpb246IFN5bW1ldHJpYyksIChCcmVhdGggU291bmRzOgpDbGVhciA6ICwgTm8odCkgQ3JhY2tsZXMgOiAsIE5vKHQpIFdoZWV6ZXMgOiApCgpFeHRyZW1pdGllczogUmlnaHQ6IEFic2VudCwgTGVmdDogQWJzZW50CgpTa2luOiAgTm90IGFzc2Vzc2VkCgpOZXVyb2xvZ2ljOiBSZXNwb25kcyB0bzogTm90IGFzc2Vzc2VkLCBNb3ZlbWVudDogTm90IGFzc2Vzc2VkLApUb25lOiBOb3QgYXNzZXNzZWQKCgoKUGVydGluZW50IFJlc3VsdHM6ClsqKjIxMTMtNS00KipdIDAyOjI2UE0gICBXQkMtMTQuOSojIFJCQy0zLjQyKiBIR0ItMTEuNiogSENULTM0LjEqCk1DVi0xMDAqIE1DSC0zMy45KiBNQ0hDLTM0LjAgUkRXLTEyLjUKWyoqMjExMy01LTQqKl0gMDI6MjZQTSAgIFBMVCBDT1VOVC0yOTgKWyoqMjExMy01LTQqKl0gMDQ6NTdBTSAgIFRZUEUtQVJUIFBPMi01NyogUENPMi00NiogUEgtNy40MCBUT1RBTApDTzItMzAgQkFTRSBYUy0yClsqKjIxMTMtNS00KipdIDA0OjMwQU0gICBHTFVDT1NFLTkyIFVSRUEgTi04IENSRUFULTAuNSBTT0RJVU0tMTQ1ClBPVEFTU0lVTS0zLjQgQ0hMT1JJREUtMTEwKiBUT1RBTCBDTzItMjYgQU5JT04gR0FQLTEyClsqKjIxMTMtNS00KipdIDA0OjMwQU0gICBWSVQgQjEyLTIyMyogRk9MQVRFLTcuMgpbKioyMTEzLTUtNCoqXSAwNDozMEFNICAgT1NNT0xBTC0zMzQqClsqKjIxMTMtNS00KipdIDA0OjMwQU0gICBXQkMtNS45IFJCQy0zLjQ0KiBIR0ItMTEuMyogSENULTMyLjMqIE1DVi05NApNQ0gtMzIuOCogTUNIQy0zNC45IFJEVy0xMy4wClsqKjIxMTMtNS00KipdIDA0OjMwQU0gICBBU0EtTkVHIEVUSEFOT0wtMTUwKiBBQ0VUTU5QSE4tTkVHCmJuem9kenBuLU5FRyBiYXJiaXRydC1ORUcgdHJpY3ljbGljLU5FRwpbKioyMTEzLTUtNCoqXSAwNDozMEFNICAgUExUIENPVU5ULTMyNQouCk90aGVyIGxhYnM6IERpZmZlcmVudGlhbC1OZXV0czo1Ny43ICUsIEx5bXBoOjM1LjkgJSwgTW9ubzo1LjAgJSwKRW9zOjAuNyAlCgpGbHVpZCBhbmFseXNpcyAvIE90aGVyIGxhYnM6IFsqKkxvY2F0aW9uICh1bikgNjIwKipdIGxhYnM6CgpFdE9IIDI2NywgU2FsaWN5bGF0ZSA2LjMgKDIuOC0yMCByYW5nZSksIFR5bGVub2wgbmVnLgoKQ2hlbWlzdHJpZXMsIGluY2x1ZGluZyBNYWduZXNpdW0sIHdubCAobWFnID0gMi40IHdoaWNoIGlzIHVwcGVyCmxpbWl0IG5vcm1hbCBhdCBbKipIb3NwaXRhbDEgKipdLU4pLgoKSW1hZ2luZzogQ1hSIC0gcHJlbGltIHdpdGhvdXQgb2J2aW91cyBpbmZpbHRyYXRlCgoKCkJyaWVmIEhvc3BpdGFsIENvdXJzZToKNDAgeW9mIHdpdGggaGlzdG9yeSBvZiA_ZGVwcmVzc2lvbiB3ZW50IHRvIE9TSCBhZnRlciB1bmtub3duCnF1YW50aXR5IG9mIGtsb25pcGluIGFuZCBjZWxleGEgb3ZlcmRvc2UuCi4KIyBSZXNwaXJhdG9yeSBmYWlsdXJlIC0gaW50dWJhdGVkIGZvciBhaXJ3YXkgcHJvdGVjdGlvbi4gIENYUgp3aXRob3V0IG9idmlvdXMgaW5maWx0cmF0ZS4gIFN3aXRjaGVkIHRvIHByZXNzdXJlIHN1cHBvcnQgaW4gdGhlCm1vcm5pbmcgYW5kIHdhcyBleHR1YmF0ZWQgd2l0aG91dCBhbnkgY29tcGxpY2F0aW9ucy4gIEdpdmVuCmVtcGlyaWMgdHJlYXRtZW50IGZvciA_IGFzcGlyYXRpb24gYnV0IG5vIG9idmlvdXMgaW5maWx0cmF0ZSB3YXMKdmlzdWFsaXplZCBvbiBDWFIuICBUaGUgYW50aWJpb3RpY3Mgd2VyZSBzdG9wcGVkIG9uIGFycml2YWwgdG8KdGhlIGZsb29yLiAgU2hlIGhhcyBiZWVuIGFmZWJyaWxlIHdpdGggbm8gb3h5Z2VuIHJlcXVpcmVtZW50IG9yCmV2aWRlbmNlIG9mIHJlc3BpcmF0b3J5IGRpc3RyZXNzIHNpbmNlIHRoYXQgdGltZS4KLgojIERydWcgT3ZlcmRvc2UgLSBjZWxleGEgYW5kIGtsb25pcGluIG92ZXJkb3NlIGJ5IGhpc3RvcnkuIEFsc28KZXRvaCBpbnRveGljYXRpb24uICBUb3hpY29sb2d5IGNvbnN1bHRlZCBpbiBFUi4gIEluaXRpYWxseSBvbgpiaWNhcmIgZ3R0IGF0IE9TSCwgd2hpY2ggd2FzIGRpc2NvbnRpbnVlZCBpbiBFUiBhcyBjZWxleGEgYW5kCmtsb25pcGluIG5vdCBiZWxpZXZlZCB0byB3aWRlbiBxcnMuICBTZXJpYWwgRUNHIHNob3dlZCBzdGFibGUKUVRjIGFyb3VuZCA0NTBtc2VjLgouCgojIERlcHJlc3Npb24gLSBFdmFsdWF0ZWQgYnkgcHN5Y2gsIHdobyByZWNvbW1lbmRlZCBhZG1pc3Npb24gdG8KcHN5Y2ggZmFjaWxpdHkgb25jZSBtZWRpY2FsbHkgY2xlYXJlZC4KLgojIEFuZW1pYSAtIGhjdCAzMiBoZXJlLCBvdXRzaWRlIGhvc3AgSEN0IHdhcyA0MC4gIFVuY2xlYXIKZXRpb2xvZ3kgZm9yIGhjdCBkcm9wLiAgTm8gb2J2aW91cyBibGVlZGluZy4gIEhDVCByZW1haWVuZApzdGFibGUgdGhlcmUgYWZ0ZXIuICBUaGlzIGlzIGEgbWFjcm9jeXRpYyBhbmVtaWEgbGlrZWx5CnNlY29uZGFyeSB0byBFdG9oIGFidXNlLiAgV2UgcmVjb21tZW5kIGZvbGF0ZSBhbmQgdGhpYW1pbmUKc3VwcGxlbWVudGF0aW9uIGluIHRoZSBmdXR1cmUuCgojSHlwb2NhbGNlbWlhOiAgY29ycmVjdGVkIHRvIG5vcm1hbCB3aXRoIGhlciBjdXJyZW50IGFsYnVtaW4KbGV2ZWwuICBIYWQgbm8gc3ltcHRvbXMgb2YgaHlwb2NhbGNlbWlhLgoKUGF0aWVudCB3YXMgY2FsbGVkIG91dCB0byB0aGUgZmxvb3IgYW5kIHdhcyB0cmFuc2ZlcnJlZCB0byBwc3ljaApmYWNpbGl0eSB0aGUgZm9sbG93aW5nIGRheS4KCk1lZGljYXRpb25zIG9uIEFkbWlzc2lvbjoKY2VsZXhhLCBrbG9uaXBpbi4KCkRpc2NoYXJnZSBNZWRpY2F0aW9uczoKMS4gRG9jdXNhdGUgU29kaXVtIDUwIG1nLzUgbUwgTGlxdWlkIFNpZzogT25lICgxKSAgUE8gQklEICgyCnRpbWVzIGEgZGF5KS4KMi4gTWVudGhvbC1DZXR5bHB5cmlkaW5pdW0gMyBtZyBMb3plbmdlIFNpZzogT25lICgxKSBMb3plbmdlCk11Y291cyBtZW1icmFuZSBQUk4gKGFzIG5lZWRlZCkuCjMuICBGb2xhdGUgMW1nIHBvIGRhaWx5CjQuICBUaGlhbWluZSAxMDBtZyBwbyBkYWlseQoKRGlzY2hhcmdlIERpc3Bvc2l0aW9uOgpFeHRlbmRlZCBDYXJlCgpGYWNpbGl0eToKWyoqSG9zcGl0YWwxICoqXSA0IFsqKkhvc3BpdGFsMSAxOCoqXQoKRGlzY2hhcmdlIERpYWdub3NpczoKY2VsZXhhIG92ZXJkb3NlCnJlc3BpcmF0b3J5IGZhaWx1cmUKZGVwcmVzc2lvbgpoeXBvY2FsY2VtaWEKCgpEaXNjaGFyZ2UgQ29uZGl0aW9uOgpzdGFibGUKCgpEaXNjaGFyZ2UgSW5zdHJ1Y3Rpb25zOgpZb3Ugd2VyZSBhZG1pdHRlZCB3aXRoIGEgbWVkaWNpbmUgb3ZlcmRvc2UgdGhhdCByZXF1aXJlZAppbnR1YmF0aW9uLiAgWW91IHdpbGwgYmUgZGlzY2hhcmdlZCB0byBhIHBzeWNoaWF0cmljIGZhY2lsaXR5IHRvCmV2YWx1YXRlIGFuZCB0cmVhdCB5b3VyIHN1aWNpZGFsIGF0dGVtcHQuCgpGb2xsb3d1cCBJbnN0cnVjdGlvbnM6CllvdSB3aWxsIG5lZWQgdG8gZm9sbG93IHVwIHdpdGggeW91ciBQQ1AgYW5kIG91dHBhdGllbnQKcHN5Y2hpYXRyaXN0IHVwb24gZGlzY2hhcmdlIGZyb20gdGhlIHBzeWNoaWF0cmljIGZhY2lsaXR5LgoKCgoiCg=='
b''
b''
b''
b''
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjE0OC0xMi05KipdICAgICAgICAgICAgICBEaXNjaGFyZ2UgRGF0ZTogICBbKioyMTQ4LTEyLTE1KipdCgpEYXRlIG9mIEJpcnRoOiAgWyoqMjA5OC01LTI5KipdICAgICAgICAgICAgIFNleDogICBNCgpTZXJ2aWNlOiBDQVJESU9USE9SQUNJQwoKQWxsZXJnaWVzOgpQYXRpZW50IHJlY29yZGVkIGFzIGhhdmluZyBObyBLbm93biBBbGxlcmdpZXMgdG8gRHJ1Z3MKCkF0dGVuZGluZzpbKipGaXJzdCBOYW1lMyAoTEYpIDEyODMqKl0KQ2hpZWYgQ29tcGxhaW50Ogphc3ltcHRvbWF0aWMKCk1ham9yIFN1cmdpY2FsIG9yIEludmFzaXZlIFByb2NlZHVyZToKWyoqMTItOSoqXSBBVlIgKHRpc3N1ZSkvQXNjZW5kaW5nIEFvcnRpYyAmIEhlbWktQXJjaCBSZXBhaXIKCgpIaXN0b3J5IG9mIFByZXNlbnQgSWxsbmVzczoKNTAgeW8gTSB3aXRoIGtub3duIGJpY3VzcGlkIEFWIGFuZCBBUy4gU2VyaWFsIGVjaG9zIHdpdGggZGlsYXRlZAphc2NhbmVkaW5nIGFvcnRhIGFuZCB3b3JzZW5pbmcgQVMuCgpQYXN0IE1lZGljYWwgSGlzdG9yeToKSHlwZXJsaXBpZGVtaWEsIGFvcnRpYyBzdGVub3NpcywgZGlsYXRlZCBhc2NlbmRpbmcgYW9ydGEsCnZhcmljb3NpdGllcyBvZiByaWdodCBsZWcsIGhlcm5pYSByZXBhaXIKClNvY2lhbCBIaXN0b3J5Ogp3b3JrcyBhcyBjb2xsZWdlIHByb2Zlc3NvcgoxIGV0b2gvZGF5CmRlbmllcyB0b2JhY2NvCgpGYW1pbHkgSGlzdG9yeToKbm8gcHJlbWF0dXJlIENBRAoKUGh5c2ljYWwgRXhhbToKSFIgNjYgUlIgMTIgQlAgMTEyLzc4Ck5BRApMdW5ncyBDVEFCCmhlYXJ0IFJSUiA0LzYgU0VNCkFiZG9tZW4gYmVuaWduCkV4dHJlbSB3YXJtLCBubyBlZGVtYQpyaWdodCBsZWcgdmFyaWNvc2l0aWVzCgpQZXJ0aW5lbnQgUmVzdWx0czoKWyoqMjE0OC0xMi0xNCoqXSAwNjo1NUFNIEJMT09ECgpXQkMtOS42IFJCQy0yLjkzKiBIZ2ItOC44KiBIY3QtMjYuMCogTUNWLTg5IE1DSC0zMC4wIE1DSEMtMzMuOApSRFctMTQuMiBQbHQgQ3QtMzAzCgpbKioyMTQ4LTEyLTE1KipdIDA1OjM1QU0KCkJMT09EIFBULTIwLjgqIFBUVC0yOS4zIElOUihQVCktMi4wKgoKWyoqMjE0OC0xMi0xNCoqXSAwNjo1NUFNIEJMT09ECgpHbHVjb3NlLTk1IFVyZWFOLTE1IENyZWF0LTAuOSBOYS0xMzcgSy00LjQgQ2wtMTAzIEhDTzMtMjYKQW5HYXAtMTIKCkNIRVNUIChQQSAmIExBVCkgIFsqKjIxNDgtMTItMTMqKl0gMTI6NTQgUE0KCklORElDQVRJT046IEV2YWx1YXRpb24gZm9yIHBsZXVyYWwgZWZmdXNpb25zLgoKRklORElOR1M6IFRoZSByaWdodCBoZW1pZGlhcGhyYWdtIGlzIHdlbGwtZGVsaW5lYXRlZCwgbm8gcGxldXJhbAplZmZ1c2lvbi4gT24gdGhlIGxlZnQgc2lkZSwgYSBzbWFsbCBwbGV1cmFsIGVmZnVzaW9uIGlzIHNlZW4uCkl0cyBoZWlnaHQgaXMgYXJvdW5kIDIgY20gaW4gdGhlIGRvcnNhbCByZWdpb25zIG9mIHRoZSBzaW51cy4KQ29uc2VjdXRpdmUgaHlwb2luZmxhdGlvbiBvZiB0aGUgbGVmdCBzdXByYWJhc2FsIGx1bmcuIFRoZQpkaWFtZXRlciBvZiB0aGUgY2FyZGlhYyBzaWxob3VldHRlIGlzIGluIHRoZSB1cHBlciByYW5nZSBvZgpub3JtYWwuIE5vIGZsdWlkIG92ZXJsb2FkLCBubyBwbmV1bW90aG9yYXguCgpJTVBSRVNTSU9OOiBTbWFsbCBsZWZ0LXNpZGVkIHBsZXVyYWwgZWZmdXNpb24sIG5vIHJpZ2h0LXNpZGVkCnBsZXVyYWwgZWZmdXNpb24sIG5vIHBuZXVtb3Rob3JheC4KCkJyaWVmIEhvc3BpdGFsIENvdXJzZToKSGUgd2FzIHRha2VuIHRvIHRoZSBvcGVyYXRpbmcgcm9vbSBvbiBbKioxMi05KipdIHdoZXJlIGhlIHVuZGVyd2VudAphbiBBVlIsIGFzY2VuZGluZyBhb3J0YSBhbmQgaGVtaWFyY2ggcmVwbGFjZW1lbnQuIEhlIHdhcwp0cmFuc2ZlcnJlZCB0byB0aGUgSUNVIGluIHN0YWJsZSBjb25kaXRpb24uIEhlIGF3b2tlIGFuZCB3YXMKZXh0dWJhdGVkIGxhdGVyIHRoYXQgc2FtZSBkYXkuIEhlIHdhcyB0cmFuc2ZlcnJlZCB0byB0aGUgZmxvb3IKb24gUE9EICMxLiBPbmNlIG9uIHRoZSBmbG9vciBoZSB3ZW50IGludG8gcmFwaWQgYXRyaWFsCmZpYnJpbGxhdGlvbiwgZm9yIHdoaWNoIGhlIHdhcyBwbGFjZWQgb24gYW1pb2Rhcm9uZSBhbmQKY291bWFkaW4uICBIaXMgbG9wcmVzc29yIHdhcyBpbmNyZWFzZWQgYXMgbXVjaCBhcyB0b2xlcmF0ZWQuCkNoZXN0IHR1YmVzICBEQyBvbiBQT0QgICMgMi4gUGFjaW5nIHdpcmVzIERDIG9uIFBPRCAgIyAzLiBQVApjb25zdWx0LiBPbiBEYyBOU1Igb24gYW1pb2Rhcm9uZSAvIGNvdW1hZGluIChJTlIgMi4wKSBvbiBkYy4gUENQCnRvIFsqKk5hbWU5IChQUkUpIDg2Mjg0KipdIElOUiBhcyBvdXRwdC4KCk1lZGljYXRpb25zIG9uIEFkbWlzc2lvbjoKQXNhIDgxJywgTVZJLCBPbWVnYSAzIDEyMDBtZycKCkRpc2NoYXJnZSBNZWRpY2F0aW9uczoKMS4gRG9jdXNhdGUgU29kaXVtIDEwMCBtZyBDYXBzdWxlIFNpZzogT25lICgxKSBDYXBzdWxlIFBPIEJJRCAoMgp0aW1lcyBhIGRheSkuCkRpc3A6KjYwIENhcHN1bGUocykqIFJlZmlsbHM6KjAqCjIuIFJhbml0aWRpbmUgSENsIDE1MCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBCSUQgKDIKdGltZXMgYSBkYXkpLgpEaXNwOio2MCBUYWJsZXQocykqIFJlZmlsbHM6KjAqCjMuIEFzcGlyaW4gRUMgODEgbWcgVGFibGV0LCBEZWxheWVkIFJlbGVhc2UgKEUuQy4pIFNpZzogT25lICgxKQpUYWJsZXQsIERlbGF5ZWQgUmVsZWFzZSAoRS5DLikgUE8gREFJTFkgKERhaWx5KS4KRGlzcDoqMzAgVGFibGV0LCBEZWxheWVkIFJlbGVhc2UgKEUuQy4pKHMpKiBSZWZpbGxzOiowKgo0LiBPeHljb2RvbmUtQWNldGFtaW5vcGhlbiA1LTMyNSBtZyBUYWJsZXQgU2lnOiAxLTIgVGFibGV0cyBQTwpldmVyeSA0LTYgaG91cnMgYXMgbmVlZGVkIGZvciBwYWluLgpEaXNwOio1MCBUYWJsZXQocykqIFJlZmlsbHM6KjAqCjUuIEF0b3J2YXN0YXRpbiAxMCBtZyBUYWJsZXQgU2lnOiBPbmUgKDEpIFRhYmxldCBQTyBEQUlMWQooRGFpbHkpLgpEaXNwOiozMCBUYWJsZXQocykqIFJlZmlsbHM6KjAqCjYuIE91dHBhdGllbnQgTGFiIFdvcmsKV2lsbCBuZWVkIGFuIElOUiBjaGVjayBvbiBbKioxMi0xNioqXSBmYXhlZCB0byBbKipGaXJzdCBOYW1lOCAoTmFtZVBhdHRlcm4yKSAyMDQ4KipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSAqKl0gYXQgdGhlCm9mZmljZSBvZiBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpIDExMTU3NSoqXSBhdCAoWyoqVGVsZXBob25lL0ZheCAoMSkgMTExNTc2KipdLiAgVGhlaXIgcGhvbmUgaXMKKFsqKlRlbGVwaG9uZS9GYXggKDEpIDExMTU3NyoqXS4KNy4gSHlkcm9tb3JwaG9uZSAyIG1nIFRhYmxldCBTaWc6IDEtMiBUYWJsZXRzIFBPIFE0SCAoZXZlcnkgNApob3VycykgYXMgbmVlZGVkLgpEaXNwOiozMCBUYWJsZXQocykqIFJlZmlsbHM6KjAqCjguIEFtaW9kYXJvbmUgMjAwIG1nIFRhYmxldCBTaWc6IFR3byAoMikgVGFibGV0IFBPIHR3aWNlIGEgZGF5Ogp0YWtlIDQwMCBbKipIb3NwaXRhbDEgKipdIGZvciBvbmUgd2VlaywgdGhlbiA0MDAgZGFpbHkgZm9yIG9uZSB3ZWVrLCB0aGVuIDIwMApkYWlseSAuCkRpc3A6KjYwIFRhYmxldChzKSogUmVmaWxsczoqMCoKOS4gTWV0b3Byb2xvbCBUYXJ0cmF0ZSA1MCBtZyBUYWJsZXQgU2lnOiAxLjUgVGFibGV0cyBQTyBRIDhICihFdmVyeSA4IEhvdXJzKS4KRGlzcDoqMTM1IFRhYmxldChzKSogUmVmaWxsczoqMCoKMTAuIEZ1cm9zZW1pZGUgNDAgbWcgVGFibGV0IFNpZzogT25lICgxKSBUYWJsZXQgUE8gb25jZSBhIGRheQpmb3IgMTAgZGF5cy4KRGlzcDoqMTAgVGFibGV0KHMpKiBSZWZpbGxzOiowKgoxMS4gUG90YXNzaXVtIENobG9yaWRlIDIwIG1FcSBUYWIgU3VzdC5SZWwuIFBhcnRpY2xlL0NyeXN0YWwKU2lnOiBUd28gKDIpIFRhYiBTdXN0LlJlbC4gUGFydGljbGUvQ3J5c3RhbCBQTyBvbmNlIGEgZGF5IGZvciAxMApkYXlzLgpEaXNwOioyMCBUYWIgU3VzdC5SZWwuIFBhcnRpY2xlL0NyeXN0YWwocykqIFJlZmlsbHM6KjAqCjEyLiBXYXJmYXJpbiAyIG1nIFRhYmxldCBTaWc6IFR3byAoMikgVGFibGV0IFBPIE9OQ0UgKE9uY2UpIGZvcgoxIGRvc2VzOiBUYWtlIGZvdXIgbWcgKHR3byB0YWJsZXRzKSBvbiB0aGUgbmlnaHQgb2YgZGlzY2hhcmdlCmFuZCB0aGVuIGNvbnRpbnVlIGRvc2luZyBhcyBkaXJlY3RlZCBieSBEci5bKipOYW1lIChOSSkgMTExNTc4KipdIG9mZmljZS4KRGlzcDoqNjAgVGFibGV0KHMpKiBSZWZpbGxzOiowKgoKCkRpc2NoYXJnZSBEaXNwb3NpdGlvbjoKSG9tZSBXaXRoIFNlcnZpY2UKCkZhY2lsaXR5Ogpjb21tdW5pdHkgaGVhbHRoIGFuZCBob3NwaWNlCgpEaXNjaGFyZ2UgRGlhZ25vc2lzOgpiaWN1c3BpZCBhb3J0aWMgdmFsdmUgJiBhb3J0aWMgc3Rlbm9zaXMsIGRpbGF0ZWQgYXNjZW5kaW5nIGFvcnRhCm5vdyBzL3AgQVZSL2FzY2VuZGluZyBhb3J0aWMgcmVwbGFjZW1lbnQKUE1IOiBIeXBlcmxpcGlkZW1pYSwgdmFyaWNvc2l0aWVzIG9mIHJpZ2h0IGxlZywgaGVybmlhIHJlcGFpcgoKCkRpc2NoYXJnZSBDb25kaXRpb246Ckdvb2QuCgoKRGlzY2hhcmdlIEluc3RydWN0aW9uczoKQ2FsbCB3aXRoIGZldmVyLCByZWRuZXNzIG9mIGRyYWluYWdlIGZyb20gaW5jaXNpb24gb3Igd2VpZ2h0CmdhaW4gbW9yZSB0aGFuIDIgcG91bmRzIGluIG9uZSBkYXkgb3IgZml2ZSBpbiBvbmUgd2Vlay4KU2hvd2VyLCBubyBiYXRocywgbm8gbG90aW9ucywgY3JlYW1zIG9yIHBvd2RlcnMgdG8gaW5jaXNpb25zLgpObyBsaWZ0aW5nIG1vcmUgdGhhbiAxMCBwb3VuZHMgb3IgZHJpdmluZyB1bnRpbCBmb2xsb3cgdXAgd2l0aApzdXJnZW9uLgoKWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpIDIxMzgqKl1wIEluc3RydWN0aW9uczoKU2VlIERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgMTExNTc1KipdIG9uIFsqKjIxNDgtMS00KipdIGF0IDM6MTAKU2VlIERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgKipdIDIgd2Vla3MuICBQbGVhc2UgY2FsbCB0byBtYWtlIGFuIGFwcG9pbnRtZW50LgpEci4gWyoqTGFzdCBOYW1lIChQcmVmaXhlcykgKipdIDQgd2Vla3MuICBQbGVhc2UgY2FsbCB0byBtYWtlIGFuIGFwcG9pbnRtZW50LgpXaWxsIG5lZWQgYW4gSU5SIGNoZWNrIG9uIFsqKjEyLTE2KipdIGZheGVkIHRvIFsqKkZpcnN0IE5hbWU4IChOYW1lUGF0dGVybjIpIDIwNDgqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjEpICoqXSBhdCB0aGUKb2ZmaWNlIG9mIERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgMTExNTc1KipdIGF0IChbKipUZWxlcGhvbmUvRmF4ICgxKSAxMTE1NzYqKl0uICBUaGVpciBwaG9uZSBpcwooWyoqVGVsZXBob25lL0ZheCAoMSkgMTExNTc3KipdLgpTcG9rZSB0byBbKipGaXJzdCBOYW1lOCAoTmFtZVBhdHRlcm4yKSAyMDQ4KipdIFsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSAqKl0gb24gWyoqMjE0OC0xMi0xMyoqXSBhdCAxMTowMCB0byBjb25maXJtIHRoaXMKcGxhbi4KCgoKQ29tcGxldGVkIGJ5OlsqKjIxNDgtMTItMTUqKl0iCg=='
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjEyOC00LTE4KipdICAgICAgIERpc2NoYXJnZSBEYXRlOiAgWyoqMjEyOC00LTIyKipdCgpEYXRlIG9mIEJpcnRoOiAgIFsqKjIwNTUtMTAtMTEqKl0gICAgICAgU2V4OiAgTQoKU2VydmljZToKSElTVE9SWSBPRiBUSEUgUFJFU0VOVCBJTExORVNTOiAgVGhpcyBpcyBhIDczLXllYXItb2xkCmdlbnRsZW1hbiwgd2hvIHByZXNlbnRlZCB3aXRoIGEgY2VyZWJyb3Zhc2N1bGFyIGFjY2lkZW50IG9uCnRoZSBbKioyMTI4LTItMSoqXS4gIEhlIGRldmVsb3BlZCBsZWZ0IGhhbmQgYW5kIGZvb3QKbnVtYm5lc3MuICBIZSBhbHNvIGhhZCByZXBlYXRlZCBlcGlzb2RlcyBvZiBsZWZ0IGZhY2lhbCBkcm9vcAphbmQgbGVmdCBoYW5kIHRpbmdsaW5nOyBtb3N0IHJlY2VudCBiZWluZyBzZXZlbiBkYXlzIGJlZm9yZQphbmQgYWxzbyBmb3IgcG9zc2libGUgY2Fyb3RpZCBzdGVudGluZy4KClBBU1QgTUVESUNBTCBISVNUT1JZOgoxLiAgSHlwZXJjaG9sZXN0ZXJvbGVtaWEgZm9yIHRoZSBsYXN0IHR3ZW50eSB5ZWFycy4KMi4gIENlcmVicm92YXNjdWxhciBhY2NpZGVudCBvbiB0aGUgWyoqMS0yOCoqXS4gIERpYWJldGVzIG1lbGxpdHVzLgo0LiAgQmlsYXRlcmFsIGNhcm90aWQgc3Rlbm9zaXMuCk1FRElDQVRJT05TIE9OIEFETUlTU0lPTjoKMS4gIENvdW1hZGluCjIuICBBY3Rvcy4KMy4gIEF2ZWxpZGUuCjQuICBQcmF2YWNob2wuCjUuICBDZWxleGEuCjYuICBDb2xhY2UuCgpBTExFUkdJRVM6ICBUaGUgcGF0aWVudCBoYWQgbm8gZHJ1ZyBhbGxlcmdpZXMuCgpQSFlTSUNBTCBFWEFNSU5BVElPTjogIE9uIGV4YW1pbmF0aW9uIHRoZSB0ZW1wZXJhdHVyZSB3YXMKOTguNCwgaGVhcnQgcmF0ZSA2NywgYmxvb2QgcHJlc3N1cmUgMTIwLzY4OyBveHlnZW4gc2F0dXJhdGlvbgo5NSBvbiByb29tIGFpci4gIE5ldXJvbG9naWNhbCBleGFtaW5hdGlvbiB3YXMgbm9ybWFsLgoKT24gYWRtaXNzaW9uLCB0aGUgQ291bWFkaW4gd2FzIGhlbGQgYW5kIGhlIHdhcyBzdGFydGVkIG9uIElWCmhlcGFyaW4gZm9yIGFuZ2lvZ3JhcGh5IGFuZCBoZSB3YXMgc3RhcnRlZCBvbiBkYWlseSBhc3BpcmluIGFuZApQbGF2aXggaW4gcHJlcGFyYXRpb24gZm9yIHBvc3NpYmxlIHN0ZW50IHBsYWNlbWVudC4KQW5naW9ncmFtIHdhcyBkb25lIG9uIHRoZSBbKioyMTI4LTQtMjAqKl0gYW5kIGFsc28gbGVmdApjYXJvdGlkIGJpZnVyY2F0aW9uIHN0ZW50aW5nIHdhcyBwZXJmb3JtZWQuICBUaGUgcGF0aWVudAp0b2xlcmF0ZWQgdGhlIHByb2NlZHVyZSB3ZWxsLiAgSGUgd2FzIGluIHRoZSBJQ1Ugb3Zlcm5pZ2h0IGZvcgptb25pdG9yaW5nLiAgSGUgd2FzIHRyYW5zZmVycmVkIHRvIHRoZSBmbG9vciB0aGUgbmV4dCBkYXkuICBIZQp3YXMgc3RhcnRlZCBvbiBQbGF2aXggYW5kIGFzcGlyaW4uClRoZSByZXN0IG9mIGhpcyBob3NwaXRhbCBjb3Vyc2Ugd2FzIHVuZXZlbnRmdWwsIGFuZCBoZSB3YXMKZGlzY2hhcmdlZCBvbiB0aGUgWyoqMjEyOC00LTIyKipdLiAgSGUgd2FzIGluc3RydWN0ZWQgdG8KY29udGludWUgdGhlIFBsYXZpeCBhbmQgYXNwaXJpbi4gIEhlcGFyaW4gd2FzIGRpc2NvbnRpbnVlZCBhcwp3YXMgdGhlIENvdW1hZGluLiAgSGUgd2FzIGFkdmlzZWQgdG8gZm9sbG93dXAgd2l0aCBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpIDExMzIqKl0KaW4gdGhyZWUgd2Vla3MuICBIZSB3YXMgZGlzY2hhcmdlZCBob21lIGluIHN0YWJsZSBjb25kaXRpb24uCgpGSU5BTCBESUFHTk9TSVM6ICAgQmlsYXRlcmFsIGNhcm90aWQgc3Rlbm9zaXMgc3RhdHVzIHBvc3QKbGVmdCBjYXJvdGlkIGJpZnVyY2F0aW9uIHN0ZW50IHBsYWNlbWVudC4KCgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbKipMb2NhdGlvbiAodW4pICoqXSBbKipJbml0aWFscyAoTmFtZVBhdHRlcm40KSAqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpICoqXSwgTS5ELgoKRGljdGF0ZWQgQnk6WyoqTmFtZTggKE1EKSA3MDc1KipdCk1FRFFVSVNUMzYKCkQ6ICBbKioyMTI4LTQtMjIqKl0gIDExOjUwClQ6ICBbKioyMTI4LTQtMjIqKl0gIDEyOjMwCkpPQiM6ICBbKipKb2IgTnVtYmVyIDExMTU2MyoqXQoiCg=='
b''
b''
b'IkFkbWlzc2lvbiBEYXRlOiAgWyoqMjEyOC01LTI1KipdICAgICBEaXNjaGFyZ2UgRGF0ZTogIFsqKjIxMjgtNS0yOCoqXQoKRGF0ZSBvZiBCaXJ0aDogICBbKioyMDU1LTEwLTExKipdICAgICBTZXg6ICBNCgpTZXJ2aWNlOgoKSElTVE9SWSBPRiBQUkVTRU5UIElMTE5FU1M6ICBUaGUgcGF0aWVudCBpcyBhIDcyLXllYXItb2xkCm1hbGUgd2hvIHByZXNlbnRlZCBmb3IgcGxhY2VtZW50IG9mIGEgY2Fyb3RpZCBzdGVudC4KClBBU1QgTUVESUNBTCBISVNUT1JZOiAgSGlzIHBhc3QgbWVkaWNhbCBoaXN0b3J5IGlzCnNpZ25pZmljYW50IGZvciBub24taW5zdWxpbi1kZXBlbmRlbnQgZGlhYmV0ZXMgbWVsbGl0dXMsIGEKY2VyZWJyb3Zhc2N1bGFyIGFjY2lkZW50IGluIFsqKjIxMjgtMS0yNyoqXSB3aXRoIG5vIHJlc2lkdWFsCmRlZmVjdHMsIGhpZ2ggY2hvbGVzdGVyb2wsIGFuZCBoZSBoYXMgYmlsYXRlcmFsIGNhcm90aWQKc3Rlbm9zaXMsIGFuZCBoZSBkZW5pZXMgYW55IGNoZXN0IHBhaW4sIHByZXNzdXJlIG9yCnBhbHBpdGF0aW9ucy4KClBBU1QgU1VSR0lDQUwgSElTVE9SWTogIEhlIHBhc3Qgc3VyZ2ljYWwgaGlzdG9yeSBpcwpzaWduaWZpY2FudCBmb3IgbGVmdCBjYXJvdGlkIHN0ZW50aW5nIGluIFsqKjIxMjgtMy0yNioqXSwKc3RhdHVzIHBvc3QgY2hvbGVjeXN0ZWN0b215IGluIFsqKjIxMTYqKl0sIGFuZCBzdGF0dXMgcG9zdCBiYWNrCnN1cmdlcnkgaW4gWyoqMjA5NyoqXSBhbmQgWyoqMjEwNSoqXS4KClNPQ0lBTCBISVNUT1JZOiBIZSBoYXMgbm8gc21va2luZyBoaXN0b3J5LiAgSGUgZGVuaWVzCmRyaW5raW5nIGFsY29ob2wuCgpNRURJQ0FUSU9OUyBPTiBBRE1JU1NJT046ICBIaXMgbWVkaWNhdGlvbnMgaW5jbHVkZWQKQWN0b3MgNDUgbWcgcC5vLiBxLmQuLCBQcmF2YWNob2wgNDAgbWcgcC5vLiBxLmQuLAphc3BpcmluIDMyNSBtZyBwLm8uIHEuZC4sIFBsYXZpeCA3NSBtZyBwLm8uIHEuZC4sIGFuZApBdG9saWRlIDMwMCBtZyBwLm8uIHEuZC4KClBIWVNJQ0FMIEVYQU1JTkFUSU9OIE9OIFBSRVNFTlRBVElPTjogIE9uIGV4YW1pbmF0aW9uLCBoZSB3YXMKZm91bmQgdG8gYmUgYWZlYnJpbGUgYW5kIHZpdGFsIHNpZ25zIHdlcmUgc3RhYmxlLiAgSGUgaGFkIGEKZmx1c2hlZCBmYWNlLiAgSGUgaGFkIG5vIGx5bXBoYWRlbm9wYXRoeS4gIEEgc29mdCBjYXJvdGlkCmJydWl0IG9uIHRoZSByaWdodCBzaWRlLiAgTHVuZ3Mgd2VyZSBjbGVhciB0byBhdXNjdWx0YXRpb24KYmlsYXRlcmFsbHkuICBOb3JtYWwgZmlyc3QgaGVhcnQgc291bmQgYW5kIHNlY29uZCBoZWFydApzb3VuZC4gIEEgcmVndWxhciByYXRlIGFuZCByaHl0aG0uICBIZSBhIGdyYWRlIDIvNiBzeXN0b2xpYwptdXJtdXIuICBBYmRvbWVuIHdhcyBzb2Z0IGFuZCBub250ZW5kZXIuICBObwpoZXBhdG9zcGxlbm9tZWdhbHkuICBQb3NpdGl2ZSBib3dlbCBzb3VuZHMuICBIZSBoYWQgcG9zaXRpdmUKZGlzdGFsIHB1bHNlcyBpbiBoaXMgZXh0cmVtaXRpZXMgYmlsYXRlcmFsbHkuICBIZSBoYWQgbm8KZWRlbWEuICBDcmFuaWFsIG5lcnZlcyBJSSB0aHJvdWdoIFhJSSB3ZXJlIGludGFjdC4KCkhPU1BJVEFMIENPVVJTRTogICBUaGUgcGF0aWVudCBwcmVzZW50ZWQgZm9yIHJpZ2h0IGNhcm90aWQKc3RlbnQgb24gWyoqNS0yNSoqXS4gIFRoZSBwYXRpZW50IHRvbGVyYXRlZCB0aGUgcHJvY2VkdXJlIHdlbGwuCgpIZSB3ZW50IHRvIHRoZSB1bml0IHBvc3RvcGVyYXRpdmVseSBmb3IgbW9uaXRvcmluZyBhbmQgd2FzCmtlcHQgb24gaGVwYXJpbi4gIEhlIGhhZCBhIHJpZ2h0IGludGVybmFsIGNhcm90aWQgYXJ0ZXJ5CnN0ZW50IHBsYWNlZCBvbiBbKio1LTI2KipdLgoKT24gcG9zdG9wZXJhdGl2ZSBkYXkgb25lLCBoZSB3YXMgYWZlYnJpbGUuICBIaXMgdml0YWwgc2lnbnMKd2VyZSBzdGFibGUuICBIZSB3YXMgbWFraW5nIGFkZXF1YXRlIHVyaW5lLCBhZGVxdWF0ZWx5CmhlcGFyaW5pemVkLiAgSGUgZGlkIHdlbGwsIGFuZCBoZSB3YXMgdHJhbnNmZXJyZWQgdG8gdGhlCmZsb29yLgoKT24gcG9zdG9wZXJhdGl2ZSBkYXkgdHdvLCBoZSB3YXMgbW9uaXRvcmVkIG9uIHRoZSBmbG9vcgpvdmVybmlnaHQsIGhlcGFyaW5pemVkIHVudGlsIHRoZSBtb3JuaW5nLiAgSGlzIEZvbGV5IGNhbWUKb3V0LCBhbmQgaGUgd2VudCBob21lIGFmZWJyaWxlIHdpdGggc3RhYmxlIHZpdGFsIHNpZ25zLgoKQ09ORElUSU9OIEFUIERJU0NIQVJHRTogIE9uIHBvc3RvcGVyYXRpdmUgZGF5IHRocmVlLCBoZQp0b2xlcmF0aW5nIGEgcmVndWxhciBkaWV0IGFuZCBpbiBzdGFibGUgY29uZGl0aW9uLgoKRElTQ0hBUkdFIERJQUdOT1NFUzogIFN0YXR1cyBwb3N0IHJpZ2h0IGludGVybmFsIGNhcm90aWQKYXJ0ZXJ5IHN0ZW50aW5nLgoKRElTQ0hBUkdFIEZPTExPV1VQOiAgIEhlIHdhcyB0byBmb2xsb3cgdXAgd2l0aCBEci4gWyoqTGFzdCBOYW1lIChTVGl0bGUpIDExMzIqKl0uCgpNRURJQ0FUSU9OUyBPTiBESVNDSEFSR0U6ICAoSGlzIG1lZGljYXRpb25zIG9uIGRpc2NoYXJnZQppbmNsdWRlZCkKMS4gIEF2YWxpZGUgMzAwIG1nIHAuby4gcS5kLgoyLiAgUHJhdmFjaG9sIDQwIG1nIHAuby4gcS5kLgozLiAgQWN0b3MgNDUgbWcgcC5vLiBxLmQuCjQuICBBc3BpcmluIDMyNSBtZyBwLm8uIHEuZC4KNS4gIFBsYXZpeCA3NSBtZyBwLm8uIHEuZC4KCgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgWyoqTmFtZTYgKE1EKSAqKl0gWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpICoqXSwgTS5ELiAgWyoqTUQgTnVtYmVyKDEpIDExMzMqKl0KCkRpY3RhdGVkIEJ5OlsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSAyNjQ5KipdCgpNRURRVUlTVDM2CgpEOiAgWyoqMjEyOC01LTI4KipdICAwNzo1MQpUOiAgWyoqMjEyOC01LTI5KipdICAwNzoxMgpKT0IjOiAgWyoqSm9iIE51bWJlciA0NDAwMyoqXQoiCg=='
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxODktNi01KipdIERpc2NoYXJnZSBEYXRlOiBbKioyMTg5LTYtOSoqXSBEYXRlIG9mIEJpcnRoOiBbKioyMTExLTMtMTkqKl0gU2V4OiBNIFNlcnZpY2U6IEdVIEhJU1RPUlkgT0YgUFJFU0VOVCBJTExORVNTOiBUaGlzIGlzIGEgNzgteWVhci1vbGQgbWFsZSB3aG8gcHJlc2VudHMgcG9zdG9wZXJhdGl2ZSBkYXkgMiBzdGF0dXMgcG9zdCB0cmFuc3JlY3RhbCBiaW9wc3kgb2YgdGhlIHByb3N0YXRlIHdpdGggZmV2ZXIgYW5kIG1hbGFpc2UgYWZ0ZXIgd2hpY2ggdGltZSBoZSBoYWQgYSAzMCBzZWNvbmQgZXBpc29kZSBvZiBzeW5jb3BlLiBObyBzZWl6dXJlIGFjdGl2aXR5IHdhcyBub3RlZCBhdCB0aGUgdGltZS4gSGUgaGFkIG5vIHBvc3RpY3RhbCBzdGF0ZS4gSGlzIHZpdGFsIHNpZ25zIHdlcmUgc3RhYmxlIGltbWVkaWF0ZWx5IGFmdGVyIGhlIHJlZ2FpbmVkIGNvbnNjaW91c25lc3MuIEF0IHRoYXQgdGltZSBoZSB3YXMgdGFrZW4gdG8gdGhlIGVtZXJnZW5jeSByb29tIGF0IHdoaWNoIHBvaW50IGhpcyB0ZW1wZXJhdHVyZSB3YXMgbm90ZWQgdG8gYmUgMTAxLjggZGVncmVlcyBGYWhyZW5oZWl0LiBIZSBoYXMgYWxzbyBub3RlZCBzb21lIGR5c3VyaWEgMSBkYXkgcHJpb3IgdG8gcHJlc2VudGF0aW9uIHdoaWNoIGhhcyBzaW5jZSByZXNvbHZlZC4gUEFTVCBNRURJQ0FMIEhJU1RPUlk6IFNpZ25pZmljYW50IGZvciBpbmNyZWFzZWQgUFNBIGFzIHdlbGwgYXMgaGlzdG9yeSBvZiByaGV1bWF0aWMgZmV2ZXIgYXMgYSBjaGlsZC4gVGhlIHBhdGllbnQgYWxzbyBub3RlcyB0aGF0IGhlIGhhcyBhbiBBY2hpbGxlcyB0ZW5kb24gd2hpY2ggaGFzIHJ1cHR1cmVkIGZvciB3aGljaCBoZSBpcyBzY2hlZHVsZWQgdG8gaGF2ZSBhIHN1cmdpY2FsIHJlcGFpciBzb21ldGltZSB0aGlzIHN1bW1lci4gRkFNSUxZIEhJU1RPUlk6IFNpZ25pZmljYW50IGZvciBjYXJkaWFjIGRpc2Vhc2UgYW5kIGludGVzdGluYWwvIGNvbG9uIGNhbmNlci4gU09DSUFMIEhJU1RPUlk6IEhlIGRlbmllcyB1c2Ugb2YgYWxjb2hvbCBvciB0b2JhY2NvIG9yIG90aGVyIG5hcmNvdGljcy4gTUVESUNBVElPTlMgQVQgSE9NRTogMS4gQXNwaXJpbiwgd2hpY2ggaGUgaGFzIHN0b3BwZWQuIDIuIExpcGl0b3IsIHdoaWNoIGhhcyBhbHNvIGJlZW4gc3RvcHBlZC4gMy4gQ2lwcm8gMyBkYXkgY291cnNlIHdoaWNoIHdhcyB0YWtpbmcgcHJlb3BlcmF0aXZlbHkgYWZ0ZXIgaGlzIHRyYW5zcmVjdGFsIGJpb3BzeSBvZiBoaXMgcHJvc3RhdGUgYW5kIGhlIGlzIGZpbmlzaGVkLiBBTExFUkdJRVM6IEluIHRoZSBFUiBoZSB3YXMgbm90ZWQgdG8gaGF2ZSBhbiBhbGxlcmd5IGFmdGVyIGhlIGdvdCBhbiBpbmZ1c2lvbiBvZiBsZXZvZmxveGFjaW4uIEZvciB0aGlzIHJlYXNvbiB3ZSBub3cgbGlzdCBsZXZvZmxveGFjaW4gYXMgYW4gYWxsZXJneS4gUkVWSUVXIE9GIFNZTVBUT01TOiBUaGUgcGF0aWVudCBzdGF0ZXMgaGUgaGFzIGxvc3QgMTAgcG91bmRzIG92ZXIgdGhlIHBhc3QgeWVhciB3aGlsZSB0cnlpbmcuIEhlIGhhcyBiZWVuIHNsZWVwaW5nIG1vcmUgc2luY2UgWyoqMjE4OS00LTIwKipdLCBidXQgaGFzIGJlZW4gaGF2aW5nIG5vcm1hbCBib3dlbCBtb3ZlbWVudHMuIFBIWVNJQ0FMIEVYQU1JTkFUSU9OOiBIaXMgdGVtcGVyYXR1cmUgd2FzIDEwMS43IEZhaHJlbmhlaXQsIGhpcyBoZWFydCByYXRlIHdhcyA4NiwgaGlzIGJsb29kIHByZXNzdXJlIHdhcyA5OS81MCwgYW5kIGhpcyByZXNwaXJhdG9yeSByYXRlIHdhcyAyMiBhbmQgaGUgd2FzIHNhdHVyYXRpbmcgOTglIG9uIDIgbGl0ZXJzIG5hc2FsIGNhbm51bGEuIEdFTkVSQUw6IFRoaXMgaXMgYW4gZWxkZXJseSBtYWxlIGluIG5vIGFjdXRlIGRpc3RyZXNzLiBIZSBpcyBhd2FrZSwgYWxlcnQgYW5kIG9yaWVudGVkIHgzLiBIZSBtb3ZlcyBhbGwgZXh0cmVtaXRpZXMuIFBVTE1PTkFSWTogQ3JhY2tsZXMgaW4gdGhlIHJpZ2h0IHBvc3RlcmlvciBiYXNlIFsqKjEyLTIzKipdIG9mIHRoZSB3YXkgdXAuIENBUkRJT1ZBU0NVTEFSOiBIZSBoYXMgcmVndWxhciByYXRlIGFuZCByaHl0aG0uIFMxIGFuZCBTMiBjbGVhcmx5IGhlYXJkLiBObyBtdXJtdXJzLCBydWJzIG9yIGdhbGxvcHMuIEFCRE9NRU46IEhpcyBhYmRvbWVuIGlzIHNvZnQgYW5kIG5vbnRlbmRlciwgbm9uZGlzdGVuZGVkLiBIaXMgYm93ZWwgc291bmRzIGFyZSBwcmVzZW50LiBHRU5JVE9VUklOQVJZOiBObyBwcm9zdGF0aWMgdGVuZGVybmVzcy4gTm9ybWFsIHJlY3RhbCB0b25lLiBOb3JtYWwgaWYgbGFyZ2UgcHJvc3RhdGUuIEhpcyBleHRyZW1pdGllcyByZXZlYWwgbm8gZWRlbWEuIFBlZGFsIHB1bHNlcyBhZXIgcHJlc2VudCBiaWxhdGVyYWxseS4gSU1BR0lORyBPTiBBRE1JU1NJT046IENoZXN0IHgtcmF5IHNob3dzIG5vIGFjdXRlIHByb2Nlc3MuIEVLRyBzaG93cyBub3JtYWwgc2ludXMgcmh5dGhtIHdpdGggUSB3YXZlcyBub3RlZCBpbiBsZWFkcyAzIGFuZCBULXdhdmUgaW52ZXJzaW9uIGluIGxlYWQgMywgb3RoZXJ3aXNlIHRoZXJlIGFyZSBubyBhYm5vcm1hbGl0aWVzLiBMQUJPUkFUT1JZIERBVEE6IEhpcyBzb2RpdW0gaXMgMTM3LCBwb3Rhc3NpdW0gNC4xLCBjaGxvcmlkZSAxMDIsIGJpY2FyYm9uYXRlIDI1LCBCVU4gMjEsIGNyZWF0aW5pbmUgd2FzIDEuMCwgYW5kIGdsdWNvc2UgMTQ5LiBIaXMgQ0JDIHNob3dzIHdoaXRlIGNvdW50IDcuOCwgaGVtYXRvY3JpdCAzNy4zLCBhbmQgcGxhdGVsZXRzIDEzMy4gSGlzIFVBIGlzIHBvc2l0aXZlIGZvciBzbWFsbCBsZXVrb2N5dGVzLCBsYXJnZSBibG9vZCB3aXRoIDE3IHJlZCBibG9vZCBjZWxscywgNTQgd2hpdGUgYmxvb2QgY2VsbHMsIGFuZCBhIGZldyBiYWN0ZXJpYSBub3RlZC4gUFJPQ0VEVVJFIFBFUkZPUk1FRDogTm9uZS4gQ09OQ0lTRSBTVU1NQVJZIE9GIEhPU1BJVEFMIENPVVJTRTogVGhlIHBhdGllbnQgd2FzIHJlc3VzY2l0YXRlZCBpbiB0aGUgRVIgd2l0aCAyIGxpdGVycyBvZiBub3JtYWwgc2FsaW5lIGFmdGVyIHdoaWNoIHRpbWUgaGUgaGFkIGEgaHlwb3RlbnNpdmUgZXBpc29kZSBpbnRvIHRoZSA4MHMgc3lzdG9saWMgYW5kIDQwcyBkaWFzdG9saWMuIEF0IHRoaXMgdGltZSBpdCB3YXMgbm90ZWQgdGhhdCBoZSBhbHJlYWR5IGhhZCAyIGxpdGVycyBvZiBJViBmbHVpZCBhbmQgaGUgd2FzIG5vdCByZXNwb25zaXZlIHRvIHRoaXMuIEZvciB0aGlzIHJlYXNvbiBoZSB3YXMgcHV0IG9uIGEgc2Vwc2lzIHByb3RvY29sIGFuZCBhIGNlbnRyYWwgbGluZSB3YXMgc3RhcnRlZC4gVGhlIHBhdGllbnQgd2FzIHN0YXJ0ZWQgb24gYSBMZXZvcGhlZCBkcmlwLiBIZSB3YXMgdHJhbnNmZXJyZWQgdG8gdGhlIHN1cmdpY2FsIGludGVuc2l2ZSBjYXJlIHVuaXQgYXQgd2hpY2ggdGltZSBoZSB3YXMgb2JzZXJ2ZWQgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBldmVuaW5nIHRvIGNvbnRpbnVlIGhpcyByZXN1c2NpdGF0aW9uIGFuZCB3ZSB3ZXJlIGFibGUgdG8gd2VhbiBoaW0gb2ZmIHRoZSBMZXZvcGhlZCBvbiBob3NwaXRhbCBkYXkgMi4gVGhlIHBhdGllbnQgd2FzIHRyYW5zZmVycmVkIG91dCBvZiB0aGUgaW50ZW5zaXZlIGNhcmUgdW5pdCB0byB0aGUgZmxvb3IsIHN0YWJsZSBhbmQgb2ZmIHByZXNzb3JzLiBUaGUgcGF0aWVudCBoYWQgYmVlbiBzdGFydGVkIG9uIGJyb2FkIHNwZWN0cnVtIGFudGliaW90aWMgdHJlYXRtZW50IG9uIGFkbWlzc2lvbi4gVGhpcyBhbnRpYmlvdGljIHRyZWF0bWVudCBjb250aW51ZWQgdG8gYmUgcmVmaW5lZCBhcyBoZSBjb250aW51ZWQgdG8gc3Bpa2UgZmV2ZXJzLCBhbmQgYXdhaXRpbmcgZm9yIGJsb29kIGFuZCB1cmluZSBjdWx0dXJlIHJlc3VsdHMuIFRoZSBibG9vZCBhbmQgdXJpbmUgY3VsdHVyZSB1bHRpbWF0ZWx5IGdyZXcgb3V0IHRoZSBzYW1lIEUuY29saSB0aGF0IHdhcyBwb2x5IGRydWcgcmVzaXN0YW50LiBUaGlzIEUuY29saSBncmV3IG91dCBvZiAzIG9yIDQgYmxvb2QgY3VsdHVyZXMgdGhhdCB3YXMgdGFrZW4gb24gdGhlIGRheSBvZiBob3NwaXRhbCBkYXkgMSBhbmQgaG9zcGl0YWwgZGF5IDIgYXMgd2VsbCBhcyB0aGUgdXJpbmUgY3VsdHVyZSB0aGF0IHdhcyB0YWtlbiBvbiBob3NwaXRhbCBkYXkgMS4gVGhlIGJsb29kIGN1bHR1cmVzIG9uIGhvc3BpdGFsIGRheSAzIGFuZCBob3NwaXRhbCBkYXkgNCB3ZXJlIGFsbCBuZWdhdGl2ZSBmb3IgZ3Jvd3RoIGFzIHdlbGwgYXMgdGhlIHVyaW5lIGN1bHR1cmUgb24gaG9zcGl0YWwgZGF5IDMgYW5kIGhvc3BpdGFsIGRheSA2LiBXaGVuIHRoZSBzZW5zaXRpdml0aWVzIG9mIHRoZSBFLmNvbGkgY2FtZSBiYWNrLCB0aG9zZSBiZWluZyBwb2x5LWRydWcgcmVzaXN0YW50LCB0aGUgcGF0aWVudCdzIG1lZGljYXRpb25zIHdlcmUgY2hhbmdlZCBvdmVyIHRvIGNlZnRhemlkaW1lIHRvIHdoaWNoIHRoZSBvcmdhbmlzbSB3YXMgbm90ZWQgdG8gYmUgc2Vuc2l0aXZlLiBUaGUgcGF0aWVudCB3YXMgbWFpbnRhaW5lZCBvbiBjZWZ0YXppZGltZSBzdGFydGluZyBvbiB0aGUgZXZlbmluZyBvZiBob3NwaXRhbCBkYXkgMiBhbmQgY29udGludWluZyB0aHJvdWdoIGhvc3BpdGFsIGRheSA0IGF0IHdoaWNoIHRpbWUgdGhlIHBhdGllbnQgd2FzIGNoYW5nZWQgdG8gQmFjdHJpbSBkb3VibGUgc3RyZW5ndGggMSBQTyBiLmkuZC4gVGhlIHBhdGllbnQgd2FzIG9ic2VydmVkIG9uIHRoaXMgbWVkaWNhbCByZWdpbWVuIGZvciAyNCBob3VycyBhZnRlciB3aGljaCB0aW1lIGhlIHdhcyBub3RlZCB0byBoYXZlIHJlbWFpbmVkIGFmZWJyaWxlIGFuZCBhc3ltcHRvbWF0aWMuIEF0IHRoaXMgdGltZSB0aGUgcGF0aWVudCB3YXMgZGlzY2hhcmdlZCB0byBob21lLCB0b2xlcmF0aW5nIGEgcmVndWxhciBkaWV0LCBhZmVicmlsZSB3aXRoIGEgc3RhYmxlIHdoaXRlIGNvdW50IG9mIDQuOC4gQ09ORElUSU9OIE9OIERJU0NIQVJHRTogU3RhYmxlLiBESVNDSEFSR0UgU1RBVFVTOiBUbyBob21lLiBESVNDSEFSR0UgRElBR05PU0lTOiBQb3N0b3BlcmF0aXZlIHNlcHRpY2VtaWEuIERJU0NIQVJHRSBNRURJQ0FUSU9OUzogMS4gQmFjdHJpbSBkb3VibGUgc3RyZW5ndGgsIHRvIHRha2UgMSBQTyBiLmkuZCBmb3IgNCB3ZWVrcy4gMi4gUHlyaWRpdW0gMTAwIG1nIDEgUE8gcS44IHAuci5uLiBmb3IgMyBkYXlzIFJFQ09NTUVOREVEIEZPTExPVyBVUDogVGhlIHBhdGllbnQgd2FzIGdpdmVuIGZvbGxvdyB1cCBwbGFucyB3aXRoIERyLiBbKipMYXN0IE5hbWUgKFNUaXRsZSkgKipdLiBIZSB3YXMgaW5zdHJ1Y3RlZCB0byBmb2xsb3cgdXAgd2l0aCBEci4gWyoqRmlyc3QgTmFtZTggKE5hbWVQYXR0ZXJuMikgKipdIFsqKk5hbWUgKFNUaXRsZSkgKipdIFsqKk5hbWUgKFNUaXRsZSkgKipdIGluIDEgd2VlaydzIHRpbWUuIEhlIHdhcyBhbHNvIGdpdmVuIHRoZSBwaG9uZSBudW1iZXIgZm9yIERyLlsqKk5hbWUgKE5JKSAxMDUyOSoqXSBvZmZpY2UgZm9yIGhpcyBjb252ZW5pZW5jZS4gWyoqRmlyc3QgTmFtZTggKE5hbWVQYXR0ZXJuMikgKipdIFsqKk5hbWU2IChNRCkgKipdIFsqKk5hbWU4IChNRCkgKipdLCBNRCBbKipNRCBOdW1iZXIoMikgMTExNjExKipdIERpY3RhdGVkIEJ5OlsqKkxhc3QgTmFtZSAoTmFtZVBhdHRlcm4xKSA1MDMyKipdIE1FRFFVSVNUMzYgRDogWyoqMjE4OS02LTEwKipdIDE4OjMyOjI0IFQ6IFsqKjIxODktNi0xMSoqXSAwMToxMTo0MSBKb2IjOiBbKipKb2IgTnVtYmVyIDExMTYxMioqXSBjYzpbKipOYW1lOCAoTUQpIDExMTYxMyoqXQo='
b''
b''
b'QWRtaXNzaW9uIERhdGU6IFsqKjIxOTgtNi05KipdIERpc2NoYXJnZSBEYXRlOiBbKioyMTk4LTYtMTEqKl0gU2VydmljZTogTUVEIEhJU1RPUlkgT0YgUFJFU0VOVCBJTExORVNTOiBBbiA4MS15ZWFyLW9sZCBtYWxlIHdpdGggYSBoaXN0b3J5IG9mIHJlY3RhbCBjYW5jZXIgc3RhdHVzIHBvc3Qgc2lnbW9pZCBjb2xlY3RvbXkgaW4gWyoqMjE5MioqXSwgcHJlc2VudHMgd2l0aCBtZWxlbmEgYW5kIGxlZnQgZm9vdCBjZWxsdWxpdGlzLiBUaGUgcGF0aWVudCBzdGF0ZXMgdGhhdCBoZSBoYXMgYmVlbiBzaG9ydCBvZiBicmVhdGggeCAyIHdlZWtzIHdpdGggd29yc2VuaW5nIHN5bXB0b21zIGluIHRoaXMgcGFzdCB3ZWVrLiBJbiBoaXMgdXN1YWwgc3RhdGUgb2YgaGVhbHRoLCBoZSB3b3VsZCB3YWxrIGhpcyBkb2dzIDItMyB0aW1lcyBhIGRheS4gSW4gdGhlIHBhc3Qgd2VlayBoZSBzdG9wcGVkIHdhbGtpbmcgaGlzIGRvZ3MsIGZvdW5kIHRoYXQgaGUgY2Fubm90IHdhbGsgdG8gaGlzIGRvb3Igbm9yIHdhbGsgdXAgdGhlIHN0YWlycyB3aXRob3V0IGZlZWxpbmcgdGlyZWQuIEhlIGFsc28gbm90ZXMgdGhhdCBoaXMgc3Rvb2xzIHdlcmUgZGFya2VyIHRoYW4gdXN1YWwgKDIgc3Rvb2xzIHBlciBkYXksIGludGVybWl0dGVudCBibGFjaykgZm9yIHRoZSBwYXN0IDctMTAgZGF5cywgYnV0IGRpZCBub3QgdGhpbmsgbXVjaCBvZiBpdC4gQXQgdGhpcyB0aW1lLCBoZSBhbHNvIGRldmVsb3BlZCByZWRuZXNzIGFuZCB0ZW5kZXJuZXNzIGluIGhpcyBsZWZ0IG1pZGRsZSB0b2UuIEhlIHdlbnQgdG8gWyoqSG9zcGl0YWwgMTI2MyoqXSBIb3NwaXRhbCBmb3IgZXZhbHVhdGlvbiBvZiBoaXMgbGVmdCBmb290IGNlbGx1bGl0aXMsIHdoZW4gdGhlIGRvY3RvciBub3RpY2VkIHRoYXQgaGUgd2FzIHNob3J0IG9mIGJyZWF0aCAoQ0JDIHNob3dlZCBhIGhlbWF0b2NyaXQgb2YgMjIpLiBQb3NpdGl2ZSBmb3IgbmF1c2VhIChkcnkgaGVhdmVzKSwgbGlnaHRoZWFkZWRuZXNzIHdpdGggcG9zaXRpb25hbCBjaGFuZ2UsIGV0aGFub2wsIGFuZCBnZW5lcmFsaXplZCBtYWxhaXNlLiBOZWdhdGl2ZSBmb3IgZmV2ZXIsIGNoaWxscywgdm9taXRpbmcsIGhlbWF0ZW1lc2lzLCBlcGlzdGF4aXMsIHN5bmNvcGUsIEJSQlBSLCBoaXN0b3J5IG9mIFhSVCBpbiB0aGUgZXNvcGhhZ3VzIHJlZ2lvbiwgaGlzdG9yeSBvZiBQVUQsIGhpc3Rvcnkgb2YgR0VSRC4gVGhlIHBhdGllbnQgZGVjaWRlZCB0aGF0IGhlIHdhbnRlZCB0byBiZSBhZG1pdHRlZCB0byB0aGUgWyoqSG9zcGl0YWwzIDU1NzU5KipdIENlbnRlciBhdCB0aGlzIHBvaW50LiBFTUVSR0VOQ1kgREVQQVJUTUVOVCBDT1VSU0U6IFRlbXBlcmF0dXJlIDk5LjUgZGVncmVlcywgcHVsc2UgMTEzLCBibG9vZCBwcmVzc3VyZSAxNDMvNjEsIHJlc3BpcmF0b3J5IHJhdGUgMTYsIDk3IHBlcmNlbnQgb24gcm9vbSBhaXIsIGFuZCBoZW1hdG9jcml0IDIzLiBSRUNUQUwgRVhBTTogR3VhaWFjIHBvc2l0aXZlLiBORyBsYXZhZ2U6IENvZmZlZSBncm91bmQgd2l0aCA1MDAgY2MgbGF2YWdlLiBFR0Q6IFNldmVyYWwgbm9uYmxlZWRpbmcgZXJvc2lvbnMgaW4gYm9keSBvZiBzdG9tYWNoIGJ1dCBkdW9kZW51bS9lc29waGFndXMgd2l0aGluIG5vcm1hbCBsaW1pdHMuIFJlY2VpdmVkIDQgdW5pdHMgb2YgcGFja2VkIHJlZCBibG9vZCBjZWxscy4gU3RhcnRlZCBvbiBjbGluZGFteWNpbiA2MDAgbWcgeDEgZm9yIGNlbGx1bGl0aXMuIFRoZSBwYXRpZW50IHdhcyB0aGVuIHRyYW5zZmVycmVkIHRvIHRoZSBTSUNVLiBTSUNVIENPVVJTRTogVC1tYXggPywgcHVsc2UgODAsIGJsb29kIHByZXNzdXJlIDEyNy80NSwgcmVzcGlyYXRvcnkgcmF0ZSBvZiAxNiwgOTkgcGVyY2VudCBvbiByb29tIGFpciwgaGVtYXRvY3JpdCBvZiAyNi42IHRvIDI5LjAgdG8gMzEuOC4gV2FzIHN0YXJ0ZWQgb24gQXVnbWVudGluIGZvciBjZWxsdWxpdGlzLiBQQVNUIE1FRElDQUwgSElTVE9SWTogVHlwZSAyIGRpYWJldGVzLiBIeXBlcnRlbnNpb24uIEdvdXQuIFJlY3RhbCBjYXJjaW5vbWEgc3RhdHVzIHBvc3Qgc2lnbW9pZCBjb2xlY3RvbXkgb24gWyoqMi0vMjE5MioqXS4gQ2hyb25pYyByZW5hbCBpbnN1ZmZpY2llbmN5LiBTdGF0dXMgcG9zdCBhcHBlbmRlY3RvbXkuIFNraW4gY2FuY2VyLiBBc3RobWEuIFNPQ0lBTCBISVNUT1JZOiBUaGUgcGF0aWVudCBsaXZlcyBhdCBob21lIGFsb25lLCBkcmlua3MgWyoqMS0xOSoqXSBnbGFzc2VzIG9mIHdpbmUgcGVyIGRheSwgc3RvcHBlZCBzbW9raW5nIDQ0IHllYXJzIGFnby4gQUxMRVJHSUVTOiBObyBrbm93biBkcnVnIGFsbGVyZ2llcy4gTUVESUNBVElPTlM6IDEuIExpc2lub3ByaWwuIDIuIExhc2l4IDIwIHEuZC4gMy4gRmxvdmVudC4gNC4gV2VsbGJ1dHJpbi4gNS4gQWxsb3B1cmlub2wuIDYuIEFzcGlyaW4uIDcuIEdseWJ1cmlkZSA3LjUgdW5pdHMgcS5hLm0uLzV1bml0cyBxLnAubS4gOC4gTWV0Zm9ybWluIDUwMCBtZyBxLmQuIDkuIFNpbmd1bGFpciBxLmQuIDEwLiBQcmF6b3NpbiAxIHRhYmxldCBxLmQuIFBIWVNJQ0FMIEVYQU1JTkFUSU9OOiBPbiBpbml0aWFsIGV4YW0sIHBhdGllbnQgaGFkIGEgVC1tYXggb2YgOTguNCBkZWdyZWVzLCBwdWxzZSBvZiA2NCwgYmxvb2QgcHJlc3N1cmUgb2YgMTIyLzYwLCByZXNwaXJhdG9yeSByYXRlIG9mIDIyLCA5NyBwZXJjZW50IG9uIHJvb20gYWlyLiBUaGUgcGF0aWVudCBoYWQgZGlmZnVzZSB3aGVlemluZyB3aXRoIHJlc29sdmluZyBsZWZ0IGZvb3QgZXJ5dGhlbWEuIFRoZSByZW1haW5kZXIgb2YgdGhlIGV4YW0gd2FzIHVucmVtYXJrYWJsZS4gTEFCT1JBVE9SWSBEQVRBOiBDaGVtLTEwIHdhcyBzaWduaWZpY2FudCBmb3IgYSBCVU4gb2YgMzIsIGNyZWF0aW5pbmUgb2YgMS40LCB3aGljaCBoYWQgZGVjcmVhc2VkIGZyb20gMS44LCBjYWxjaXVtIG9mIDcuNSwgd2l0aCBhbiBhbGJ1bWluIG9mIDMuMi4gSGVtYXRvY3JpdCB3YXMgMzEuOCwgaW5pdGlhbGx5IGF0IDI5LiBQVCwgUFRUIGFuZCBJTlIgYWxsIHdpdGhpbiBub3JtYWwgbGltaXRzLiBJTVBSRVNTSU9OOiBBbiA4MS15ZWFyLW9sZCBtYWxlIHdpdGggYSBoaXN0b3J5IG9mIHJlY3RhbCBjYXJjaW5vbWEgc3RhdHVzIHBvc3Qgc2lnbW9pZCBjb2xlY3RvbXkgYWRtaXR0ZWQgZm9yIHVwcGVyIGdhc3Ryb2ludGVzdGluYWwgYmxlZWQgYW5kIGxlZnQgZm9vdCBjZWxsdWxpdGlzLiBVcHBlciBnYXN0cm9pbnRlc3RpbmFsIGJsZWVkLiBVbmNsZWFyIHNvdXJjZS4gRXNvcGhhZ29nYXN0cm9kdW9kZW5vc2NvcHkgcmV2ZWFsZWQgb25seSBlcm9zaW9uLiBUaGUgcGF0aWVudCB3YXMgbW9uaXRvcmVkIGJ5IHNlcmlhbCBoZW1hdG9jcml0cywgNCB1bml0cyBvZiBibG9vZCB3YXMgdHJhbnNmdXNlZCBpbiB0aGUgRUQuIFRoZSBwYXRpZW50IHdhcyBzdGFydGVkIG9uIGNsZWFycyBhbmQgSVYgUHJvdG9uaXggYi5pLmQuIHdhcyBnaXZlbi4gT25jZSBoZW1hdG9jcml0IHdhcyBzdGFibGUgZ3JlYXRlciB0aGFuIDMwLCBQcm90b25peCB3YXMgc3dpdGNoZWQgdG8gcC5vLiBhbmQgcGF0aWVudCB3YXMgcmVzdGFydGVkIG9uIGhpcyBtZWRpY2F0aW9ucyB3aXRoaG9sZGluZyBhc3BpcmluLiBDZWxsdWxpdGlzLiBMZWZ0IHRvZSBlcnl0aGVtYSB3YXMgaW1wcm92aW5nIG9uY2UgdGhlIHBhdGllbnQgd2FzIG9uIHRoZSBmbG9vci4gVGhlIHBhdGllbnQgd2FzIGNvbnRpbnVlZCBvbiBBdWdtZW50aW4gZm9yIGEgNy1kYXkgY291cnNlLiBDdWx0dXJlcyByZW1haW5lZCBuZWdhdGl2ZSBkdXJpbmcgdGhpcyB0aW1lIGZyYW1lLiBESVNDSEFSR0UgTUVESUNBVElPTlM6IFNhbWUgYXMgYWRtaXNzaW9uIHdpdGggdGhlIGFkZGl0aW9uIG9mLCAxLiBBdWdtZW50aW4gNTAwLzEyNSBtZyAxIHRhYiBxLmQuIGZvciB0aGUgcmVtYWluaW5nIDUgZGF5cy4gMi4gUHJvdG9uaXggNDAgbWcgcC5vLiBxLmQuIDMuIENvbGFjZS4gNC4gQXNwaXJpbiB3YXMgd2l0aGhlbGQuIERJU1BPU0lUSU9OOiBUbyBob21lLiBESVNDSEFSR0UgU1RBVFVTOiBUaGUgcGF0aWVudCB3YXMgYW1idWxhdGluZywgbWVudGF0aW5nLCBlYXRpbmcgYW5kIGRyaW5raW5nIG5vcm1hbGx5LiBESVNDSEFSR0UgRElBR05PU0lTOiBVcHBlciBnYXN0cm9pbnRlc3RpbmFsIGJsZWVkIHNlY29uZGFyeSB0byBlcm9zaW9uIHdpdGhpbiB0aGUgc3RvbWFjaCBhbmQgZHVvZGVudW0uIERJU0NIQVJHRSBGT0xMT1dVUDogVGhlIHBhdGllbnQgd2FzIGFza2VkIHRvIGZvbGxvdyB1cCB3aXRoIGhpcyBQQ1AgWyoqTGFzdCBOYW1lIChOYW1lUGF0dGVybjQpICoqXS4gWyoqTGFzdCBOYW1lIChTVGl0bGUpICoqXSB3aXRoaW4gdGhlIHdlZWsuIFsqKk5hbWU2IChNRCkgKipdIFsqKk5hbWU4IChNRCkgKipdLCBbKipNRCBOdW1iZXIoMSkgNjY0OCoqXSBEaWN0YXRlZCBCeTpbKipMYXN0IE5hbWUgKE5hbWVQYXR0ZXJuMSkgNTYwOTYqKl0gTUVEUVVJU1QzNiBEOiBbKioyMTk4LTYtMTMqKl0gMDg6MzY6MTUgVDogWyoqMjE5OC02LTEzKipdIDEwOjE0OjIzIEpvYiM6IFsqKkpvYiBOdW1iZXIgMTExNjI5KipdIAo='
`;


export function newNotes(): Observable<string> {
	return new Observable((observe: Observer<string>) => {
		const data: string[] = notes.split('b\'');
		//update table
		for (let eachPerson of data) {
			eachPerson = eachPerson.substring(0, eachPerson.length - 2);
			observe.next(eachPerson);
		}
	});
}

const InputNote = () => {
	const [score, setScore] = useState('');
	const [inputText, setText] = useState<string>('');
	const getEnteredPredict = () => {
		getPrediction2(btoa(inputText)).subscribe({
			next: data => setScore(old => {
				let dataString: string = data + '';
				dataString = dataString.substring(0, 5);
				const dataNumber: number = parseFloat(dataString) * 100;
				dataString = (dataNumber + '').substring(0, 4) + '%';
				return dataString;
			})
		});
	};

	const getPrediction2 = (note: string): Observable<string> => {
		const predictionPost: AxiosRequestConfig = {
			method: 'POST',
			url: document.location + 'predict',
			data: {note}
		};
		const predit = new Observable((observe: Observer<string>) => {
			axios(predictionPost).then(res => {
				console.log(res.data);
				observe.next(res.data);
			});
		});
		return predit;
	};


	return (
		<div>
			<TextField label="Please enter discharge note" variant="outlined" rows={4} style={box1}
					   onChange={text => setText(text.target.value)}/>
			<div><Button variant="contained" color="primary" onClick={getEnteredPredict} style={{marginBottom: '5%'}}>Send
				Note</Button></div>
			<h3>Score: {score ? score : 'Not Entered'}</h3>
			<br/>
			<br/>
		</div>
	);
};


const box1 = {
	width: 800,
	paddingBottom: '1%'
};


export default InputNote;
